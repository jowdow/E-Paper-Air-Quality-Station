
stm32f411_Printf.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000031fc  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08003394  08003394  00013394  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080033ac  080033ac  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080033ac  080033ac  000133ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080033b4  080033b4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080033b4  080033b4  000133b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080033b8  080033b8  000133b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080033bc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000150  2000000c  080033c8  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000c04  2000015c  080033c8  0002015c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f762  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000025fa  00000000  00000000  0002f79e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d18  00000000  00000000  00031d98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c28  00000000  00000000  00032ab0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002892  00000000  00000000  000336d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011ff5  00000000  00000000  00035f6a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008ef22  00000000  00000000  00047f5f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d6e81  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000357c  00000000  00000000  000d6ed4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000000c 	.word	0x2000000c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	0800337c 	.word	0x0800337c

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000010 	.word	0x20000010
 80001d4:	0800337c 	.word	0x0800337c

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b974 	b.w	80004d8 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	468e      	mov	lr, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	d14d      	bne.n	80002b2 <__udivmoddi4+0xaa>
 8000216:	428a      	cmp	r2, r1
 8000218:	4694      	mov	ip, r2
 800021a:	d969      	bls.n	80002f0 <__udivmoddi4+0xe8>
 800021c:	fab2 f282 	clz	r2, r2
 8000220:	b152      	cbz	r2, 8000238 <__udivmoddi4+0x30>
 8000222:	fa01 f302 	lsl.w	r3, r1, r2
 8000226:	f1c2 0120 	rsb	r1, r2, #32
 800022a:	fa20 f101 	lsr.w	r1, r0, r1
 800022e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000232:	ea41 0e03 	orr.w	lr, r1, r3
 8000236:	4094      	lsls	r4, r2
 8000238:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800023c:	0c21      	lsrs	r1, r4, #16
 800023e:	fbbe f6f8 	udiv	r6, lr, r8
 8000242:	fa1f f78c 	uxth.w	r7, ip
 8000246:	fb08 e316 	mls	r3, r8, r6, lr
 800024a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800024e:	fb06 f107 	mul.w	r1, r6, r7
 8000252:	4299      	cmp	r1, r3
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x64>
 8000256:	eb1c 0303 	adds.w	r3, ip, r3
 800025a:	f106 30ff 	add.w	r0, r6, #4294967295
 800025e:	f080 811f 	bcs.w	80004a0 <__udivmoddi4+0x298>
 8000262:	4299      	cmp	r1, r3
 8000264:	f240 811c 	bls.w	80004a0 <__udivmoddi4+0x298>
 8000268:	3e02      	subs	r6, #2
 800026a:	4463      	add	r3, ip
 800026c:	1a5b      	subs	r3, r3, r1
 800026e:	b2a4      	uxth	r4, r4
 8000270:	fbb3 f0f8 	udiv	r0, r3, r8
 8000274:	fb08 3310 	mls	r3, r8, r0, r3
 8000278:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800027c:	fb00 f707 	mul.w	r7, r0, r7
 8000280:	42a7      	cmp	r7, r4
 8000282:	d90a      	bls.n	800029a <__udivmoddi4+0x92>
 8000284:	eb1c 0404 	adds.w	r4, ip, r4
 8000288:	f100 33ff 	add.w	r3, r0, #4294967295
 800028c:	f080 810a 	bcs.w	80004a4 <__udivmoddi4+0x29c>
 8000290:	42a7      	cmp	r7, r4
 8000292:	f240 8107 	bls.w	80004a4 <__udivmoddi4+0x29c>
 8000296:	4464      	add	r4, ip
 8000298:	3802      	subs	r0, #2
 800029a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800029e:	1be4      	subs	r4, r4, r7
 80002a0:	2600      	movs	r6, #0
 80002a2:	b11d      	cbz	r5, 80002ac <__udivmoddi4+0xa4>
 80002a4:	40d4      	lsrs	r4, r2
 80002a6:	2300      	movs	r3, #0
 80002a8:	e9c5 4300 	strd	r4, r3, [r5]
 80002ac:	4631      	mov	r1, r6
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d909      	bls.n	80002ca <__udivmoddi4+0xc2>
 80002b6:	2d00      	cmp	r5, #0
 80002b8:	f000 80ef 	beq.w	800049a <__udivmoddi4+0x292>
 80002bc:	2600      	movs	r6, #0
 80002be:	e9c5 0100 	strd	r0, r1, [r5]
 80002c2:	4630      	mov	r0, r6
 80002c4:	4631      	mov	r1, r6
 80002c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ca:	fab3 f683 	clz	r6, r3
 80002ce:	2e00      	cmp	r6, #0
 80002d0:	d14a      	bne.n	8000368 <__udivmoddi4+0x160>
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d302      	bcc.n	80002dc <__udivmoddi4+0xd4>
 80002d6:	4282      	cmp	r2, r0
 80002d8:	f200 80f9 	bhi.w	80004ce <__udivmoddi4+0x2c6>
 80002dc:	1a84      	subs	r4, r0, r2
 80002de:	eb61 0303 	sbc.w	r3, r1, r3
 80002e2:	2001      	movs	r0, #1
 80002e4:	469e      	mov	lr, r3
 80002e6:	2d00      	cmp	r5, #0
 80002e8:	d0e0      	beq.n	80002ac <__udivmoddi4+0xa4>
 80002ea:	e9c5 4e00 	strd	r4, lr, [r5]
 80002ee:	e7dd      	b.n	80002ac <__udivmoddi4+0xa4>
 80002f0:	b902      	cbnz	r2, 80002f4 <__udivmoddi4+0xec>
 80002f2:	deff      	udf	#255	; 0xff
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	2a00      	cmp	r2, #0
 80002fa:	f040 8092 	bne.w	8000422 <__udivmoddi4+0x21a>
 80002fe:	eba1 010c 	sub.w	r1, r1, ip
 8000302:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000306:	fa1f fe8c 	uxth.w	lr, ip
 800030a:	2601      	movs	r6, #1
 800030c:	0c20      	lsrs	r0, r4, #16
 800030e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000312:	fb07 1113 	mls	r1, r7, r3, r1
 8000316:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800031a:	fb0e f003 	mul.w	r0, lr, r3
 800031e:	4288      	cmp	r0, r1
 8000320:	d908      	bls.n	8000334 <__udivmoddi4+0x12c>
 8000322:	eb1c 0101 	adds.w	r1, ip, r1
 8000326:	f103 38ff 	add.w	r8, r3, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x12a>
 800032c:	4288      	cmp	r0, r1
 800032e:	f200 80cb 	bhi.w	80004c8 <__udivmoddi4+0x2c0>
 8000332:	4643      	mov	r3, r8
 8000334:	1a09      	subs	r1, r1, r0
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb1 f0f7 	udiv	r0, r1, r7
 800033c:	fb07 1110 	mls	r1, r7, r0, r1
 8000340:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000344:	fb0e fe00 	mul.w	lr, lr, r0
 8000348:	45a6      	cmp	lr, r4
 800034a:	d908      	bls.n	800035e <__udivmoddi4+0x156>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 31ff 	add.w	r1, r0, #4294967295
 8000354:	d202      	bcs.n	800035c <__udivmoddi4+0x154>
 8000356:	45a6      	cmp	lr, r4
 8000358:	f200 80bb 	bhi.w	80004d2 <__udivmoddi4+0x2ca>
 800035c:	4608      	mov	r0, r1
 800035e:	eba4 040e 	sub.w	r4, r4, lr
 8000362:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000366:	e79c      	b.n	80002a2 <__udivmoddi4+0x9a>
 8000368:	f1c6 0720 	rsb	r7, r6, #32
 800036c:	40b3      	lsls	r3, r6
 800036e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000372:	ea4c 0c03 	orr.w	ip, ip, r3
 8000376:	fa20 f407 	lsr.w	r4, r0, r7
 800037a:	fa01 f306 	lsl.w	r3, r1, r6
 800037e:	431c      	orrs	r4, r3
 8000380:	40f9      	lsrs	r1, r7
 8000382:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000386:	fa00 f306 	lsl.w	r3, r0, r6
 800038a:	fbb1 f8f9 	udiv	r8, r1, r9
 800038e:	0c20      	lsrs	r0, r4, #16
 8000390:	fa1f fe8c 	uxth.w	lr, ip
 8000394:	fb09 1118 	mls	r1, r9, r8, r1
 8000398:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800039c:	fb08 f00e 	mul.w	r0, r8, lr
 80003a0:	4288      	cmp	r0, r1
 80003a2:	fa02 f206 	lsl.w	r2, r2, r6
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b8>
 80003a8:	eb1c 0101 	adds.w	r1, ip, r1
 80003ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b0:	f080 8088 	bcs.w	80004c4 <__udivmoddi4+0x2bc>
 80003b4:	4288      	cmp	r0, r1
 80003b6:	f240 8085 	bls.w	80004c4 <__udivmoddi4+0x2bc>
 80003ba:	f1a8 0802 	sub.w	r8, r8, #2
 80003be:	4461      	add	r1, ip
 80003c0:	1a09      	subs	r1, r1, r0
 80003c2:	b2a4      	uxth	r4, r4
 80003c4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c8:	fb09 1110 	mls	r1, r9, r0, r1
 80003cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003d4:	458e      	cmp	lr, r1
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1e2>
 80003d8:	eb1c 0101 	adds.w	r1, ip, r1
 80003dc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003e0:	d26c      	bcs.n	80004bc <__udivmoddi4+0x2b4>
 80003e2:	458e      	cmp	lr, r1
 80003e4:	d96a      	bls.n	80004bc <__udivmoddi4+0x2b4>
 80003e6:	3802      	subs	r0, #2
 80003e8:	4461      	add	r1, ip
 80003ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003ee:	fba0 9402 	umull	r9, r4, r0, r2
 80003f2:	eba1 010e 	sub.w	r1, r1, lr
 80003f6:	42a1      	cmp	r1, r4
 80003f8:	46c8      	mov	r8, r9
 80003fa:	46a6      	mov	lr, r4
 80003fc:	d356      	bcc.n	80004ac <__udivmoddi4+0x2a4>
 80003fe:	d053      	beq.n	80004a8 <__udivmoddi4+0x2a0>
 8000400:	b15d      	cbz	r5, 800041a <__udivmoddi4+0x212>
 8000402:	ebb3 0208 	subs.w	r2, r3, r8
 8000406:	eb61 010e 	sbc.w	r1, r1, lr
 800040a:	fa01 f707 	lsl.w	r7, r1, r7
 800040e:	fa22 f306 	lsr.w	r3, r2, r6
 8000412:	40f1      	lsrs	r1, r6
 8000414:	431f      	orrs	r7, r3
 8000416:	e9c5 7100 	strd	r7, r1, [r5]
 800041a:	2600      	movs	r6, #0
 800041c:	4631      	mov	r1, r6
 800041e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000422:	f1c2 0320 	rsb	r3, r2, #32
 8000426:	40d8      	lsrs	r0, r3
 8000428:	fa0c fc02 	lsl.w	ip, ip, r2
 800042c:	fa21 f303 	lsr.w	r3, r1, r3
 8000430:	4091      	lsls	r1, r2
 8000432:	4301      	orrs	r1, r0
 8000434:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000440:	fb07 3610 	mls	r6, r7, r0, r3
 8000444:	0c0b      	lsrs	r3, r1, #16
 8000446:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800044a:	fb00 f60e 	mul.w	r6, r0, lr
 800044e:	429e      	cmp	r6, r3
 8000450:	fa04 f402 	lsl.w	r4, r4, r2
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x260>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 38ff 	add.w	r8, r0, #4294967295
 800045e:	d22f      	bcs.n	80004c0 <__udivmoddi4+0x2b8>
 8000460:	429e      	cmp	r6, r3
 8000462:	d92d      	bls.n	80004c0 <__udivmoddi4+0x2b8>
 8000464:	3802      	subs	r0, #2
 8000466:	4463      	add	r3, ip
 8000468:	1b9b      	subs	r3, r3, r6
 800046a:	b289      	uxth	r1, r1
 800046c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000470:	fb07 3316 	mls	r3, r7, r6, r3
 8000474:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000478:	fb06 f30e 	mul.w	r3, r6, lr
 800047c:	428b      	cmp	r3, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x28a>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f106 38ff 	add.w	r8, r6, #4294967295
 8000488:	d216      	bcs.n	80004b8 <__udivmoddi4+0x2b0>
 800048a:	428b      	cmp	r3, r1
 800048c:	d914      	bls.n	80004b8 <__udivmoddi4+0x2b0>
 800048e:	3e02      	subs	r6, #2
 8000490:	4461      	add	r1, ip
 8000492:	1ac9      	subs	r1, r1, r3
 8000494:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000498:	e738      	b.n	800030c <__udivmoddi4+0x104>
 800049a:	462e      	mov	r6, r5
 800049c:	4628      	mov	r0, r5
 800049e:	e705      	b.n	80002ac <__udivmoddi4+0xa4>
 80004a0:	4606      	mov	r6, r0
 80004a2:	e6e3      	b.n	800026c <__udivmoddi4+0x64>
 80004a4:	4618      	mov	r0, r3
 80004a6:	e6f8      	b.n	800029a <__udivmoddi4+0x92>
 80004a8:	454b      	cmp	r3, r9
 80004aa:	d2a9      	bcs.n	8000400 <__udivmoddi4+0x1f8>
 80004ac:	ebb9 0802 	subs.w	r8, r9, r2
 80004b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004b4:	3801      	subs	r0, #1
 80004b6:	e7a3      	b.n	8000400 <__udivmoddi4+0x1f8>
 80004b8:	4646      	mov	r6, r8
 80004ba:	e7ea      	b.n	8000492 <__udivmoddi4+0x28a>
 80004bc:	4620      	mov	r0, r4
 80004be:	e794      	b.n	80003ea <__udivmoddi4+0x1e2>
 80004c0:	4640      	mov	r0, r8
 80004c2:	e7d1      	b.n	8000468 <__udivmoddi4+0x260>
 80004c4:	46d0      	mov	r8, sl
 80004c6:	e77b      	b.n	80003c0 <__udivmoddi4+0x1b8>
 80004c8:	3b02      	subs	r3, #2
 80004ca:	4461      	add	r1, ip
 80004cc:	e732      	b.n	8000334 <__udivmoddi4+0x12c>
 80004ce:	4630      	mov	r0, r6
 80004d0:	e709      	b.n	80002e6 <__udivmoddi4+0xde>
 80004d2:	4464      	add	r4, ip
 80004d4:	3802      	subs	r0, #2
 80004d6:	e742      	b.n	800035e <__udivmoddi4+0x156>

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	b08a      	sub	sp, #40	; 0x28
 80004e0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004e2:	f107 0314 	add.w	r3, r7, #20
 80004e6:	2200      	movs	r2, #0
 80004e8:	601a      	str	r2, [r3, #0]
 80004ea:	605a      	str	r2, [r3, #4]
 80004ec:	609a      	str	r2, [r3, #8]
 80004ee:	60da      	str	r2, [r3, #12]
 80004f0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004f2:	2300      	movs	r3, #0
 80004f4:	613b      	str	r3, [r7, #16]
 80004f6:	4b37      	ldr	r3, [pc, #220]	; (80005d4 <MX_GPIO_Init+0xf8>)
 80004f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004fa:	4a36      	ldr	r2, [pc, #216]	; (80005d4 <MX_GPIO_Init+0xf8>)
 80004fc:	f043 0304 	orr.w	r3, r3, #4
 8000500:	6313      	str	r3, [r2, #48]	; 0x30
 8000502:	4b34      	ldr	r3, [pc, #208]	; (80005d4 <MX_GPIO_Init+0xf8>)
 8000504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000506:	f003 0304 	and.w	r3, r3, #4
 800050a:	613b      	str	r3, [r7, #16]
 800050c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800050e:	2300      	movs	r3, #0
 8000510:	60fb      	str	r3, [r7, #12]
 8000512:	4b30      	ldr	r3, [pc, #192]	; (80005d4 <MX_GPIO_Init+0xf8>)
 8000514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000516:	4a2f      	ldr	r2, [pc, #188]	; (80005d4 <MX_GPIO_Init+0xf8>)
 8000518:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800051c:	6313      	str	r3, [r2, #48]	; 0x30
 800051e:	4b2d      	ldr	r3, [pc, #180]	; (80005d4 <MX_GPIO_Init+0xf8>)
 8000520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000522:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000526:	60fb      	str	r3, [r7, #12]
 8000528:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800052a:	2300      	movs	r3, #0
 800052c:	60bb      	str	r3, [r7, #8]
 800052e:	4b29      	ldr	r3, [pc, #164]	; (80005d4 <MX_GPIO_Init+0xf8>)
 8000530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000532:	4a28      	ldr	r2, [pc, #160]	; (80005d4 <MX_GPIO_Init+0xf8>)
 8000534:	f043 0301 	orr.w	r3, r3, #1
 8000538:	6313      	str	r3, [r2, #48]	; 0x30
 800053a:	4b26      	ldr	r3, [pc, #152]	; (80005d4 <MX_GPIO_Init+0xf8>)
 800053c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800053e:	f003 0301 	and.w	r3, r3, #1
 8000542:	60bb      	str	r3, [r7, #8]
 8000544:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000546:	2300      	movs	r3, #0
 8000548:	607b      	str	r3, [r7, #4]
 800054a:	4b22      	ldr	r3, [pc, #136]	; (80005d4 <MX_GPIO_Init+0xf8>)
 800054c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800054e:	4a21      	ldr	r2, [pc, #132]	; (80005d4 <MX_GPIO_Init+0xf8>)
 8000550:	f043 0302 	orr.w	r3, r3, #2
 8000554:	6313      	str	r3, [r2, #48]	; 0x30
 8000556:	4b1f      	ldr	r3, [pc, #124]	; (80005d4 <MX_GPIO_Init+0xf8>)
 8000558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800055a:	f003 0302 	and.w	r3, r3, #2
 800055e:	607b      	str	r3, [r7, #4]
 8000560:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8000562:	2201      	movs	r2, #1
 8000564:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000568:	481b      	ldr	r0, [pc, #108]	; (80005d8 <MX_GPIO_Init+0xfc>)
 800056a:	f000 ff21 	bl	80013b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RST_Pin|DC_Pin|SPI_CS_Pin, GPIO_PIN_RESET);
 800056e:	2200      	movs	r2, #0
 8000570:	2116      	movs	r1, #22
 8000572:	481a      	ldr	r0, [pc, #104]	; (80005dc <MX_GPIO_Init+0x100>)
 8000574:	f000 ff1c 	bl	80013b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000578:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800057c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800057e:	2301      	movs	r3, #1
 8000580:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000582:	2300      	movs	r3, #0
 8000584:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000586:	2300      	movs	r3, #0
 8000588:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 800058a:	f107 0314 	add.w	r3, r7, #20
 800058e:	4619      	mov	r1, r3
 8000590:	4811      	ldr	r0, [pc, #68]	; (80005d8 <MX_GPIO_Init+0xfc>)
 8000592:	f000 fd89 	bl	80010a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RST_Pin|DC_Pin|SPI_CS_Pin;
 8000596:	2316      	movs	r3, #22
 8000598:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800059a:	2301      	movs	r3, #1
 800059c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800059e:	2300      	movs	r3, #0
 80005a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005a2:	2300      	movs	r3, #0
 80005a4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005a6:	f107 0314 	add.w	r3, r7, #20
 80005aa:	4619      	mov	r1, r3
 80005ac:	480b      	ldr	r0, [pc, #44]	; (80005dc <MX_GPIO_Init+0x100>)
 80005ae:	f000 fd7b 	bl	80010a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BUSY_Pin;
 80005b2:	2308      	movs	r3, #8
 80005b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005b6:	2300      	movs	r3, #0
 80005b8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ba:	2300      	movs	r3, #0
 80005bc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUSY_GPIO_Port, &GPIO_InitStruct);
 80005be:	f107 0314 	add.w	r3, r7, #20
 80005c2:	4619      	mov	r1, r3
 80005c4:	4805      	ldr	r0, [pc, #20]	; (80005dc <MX_GPIO_Init+0x100>)
 80005c6:	f000 fd6f 	bl	80010a8 <HAL_GPIO_Init>

}
 80005ca:	bf00      	nop
 80005cc:	3728      	adds	r7, #40	; 0x28
 80005ce:	46bd      	mov	sp, r7
 80005d0:	bd80      	pop	{r7, pc}
 80005d2:	bf00      	nop
 80005d4:	40023800 	.word	0x40023800
 80005d8:	40020800 	.word	0x40020800
 80005dc:	40020000 	.word	0x40020000

080005e0 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80005e4:	4b12      	ldr	r3, [pc, #72]	; (8000630 <MX_I2C1_Init+0x50>)
 80005e6:	4a13      	ldr	r2, [pc, #76]	; (8000634 <MX_I2C1_Init+0x54>)
 80005e8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80005ea:	4b11      	ldr	r3, [pc, #68]	; (8000630 <MX_I2C1_Init+0x50>)
 80005ec:	4a12      	ldr	r2, [pc, #72]	; (8000638 <MX_I2C1_Init+0x58>)
 80005ee:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80005f0:	4b0f      	ldr	r3, [pc, #60]	; (8000630 <MX_I2C1_Init+0x50>)
 80005f2:	2200      	movs	r2, #0
 80005f4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80005f6:	4b0e      	ldr	r3, [pc, #56]	; (8000630 <MX_I2C1_Init+0x50>)
 80005f8:	2200      	movs	r2, #0
 80005fa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80005fc:	4b0c      	ldr	r3, [pc, #48]	; (8000630 <MX_I2C1_Init+0x50>)
 80005fe:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000602:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000604:	4b0a      	ldr	r3, [pc, #40]	; (8000630 <MX_I2C1_Init+0x50>)
 8000606:	2200      	movs	r2, #0
 8000608:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800060a:	4b09      	ldr	r3, [pc, #36]	; (8000630 <MX_I2C1_Init+0x50>)
 800060c:	2200      	movs	r2, #0
 800060e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000610:	4b07      	ldr	r3, [pc, #28]	; (8000630 <MX_I2C1_Init+0x50>)
 8000612:	2200      	movs	r2, #0
 8000614:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000616:	4b06      	ldr	r3, [pc, #24]	; (8000630 <MX_I2C1_Init+0x50>)
 8000618:	2200      	movs	r2, #0
 800061a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800061c:	4804      	ldr	r0, [pc, #16]	; (8000630 <MX_I2C1_Init+0x50>)
 800061e:	f000 fefb 	bl	8001418 <HAL_I2C_Init>
 8000622:	4603      	mov	r3, r0
 8000624:	2b00      	cmp	r3, #0
 8000626:	d001      	beq.n	800062c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000628:	f000 f8ea 	bl	8000800 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800062c:	bf00      	nop
 800062e:	bd80      	pop	{r7, pc}
 8000630:	20000028 	.word	0x20000028
 8000634:	40005400 	.word	0x40005400
 8000638:	000186a0 	.word	0x000186a0

0800063c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	b08a      	sub	sp, #40	; 0x28
 8000640:	af00      	add	r7, sp, #0
 8000642:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000644:	f107 0314 	add.w	r3, r7, #20
 8000648:	2200      	movs	r2, #0
 800064a:	601a      	str	r2, [r3, #0]
 800064c:	605a      	str	r2, [r3, #4]
 800064e:	609a      	str	r2, [r3, #8]
 8000650:	60da      	str	r2, [r3, #12]
 8000652:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	4a19      	ldr	r2, [pc, #100]	; (80006c0 <HAL_I2C_MspInit+0x84>)
 800065a:	4293      	cmp	r3, r2
 800065c:	d12b      	bne.n	80006b6 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800065e:	2300      	movs	r3, #0
 8000660:	613b      	str	r3, [r7, #16]
 8000662:	4b18      	ldr	r3, [pc, #96]	; (80006c4 <HAL_I2C_MspInit+0x88>)
 8000664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000666:	4a17      	ldr	r2, [pc, #92]	; (80006c4 <HAL_I2C_MspInit+0x88>)
 8000668:	f043 0302 	orr.w	r3, r3, #2
 800066c:	6313      	str	r3, [r2, #48]	; 0x30
 800066e:	4b15      	ldr	r3, [pc, #84]	; (80006c4 <HAL_I2C_MspInit+0x88>)
 8000670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000672:	f003 0302 	and.w	r3, r3, #2
 8000676:	613b      	str	r3, [r7, #16]
 8000678:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800067a:	23c0      	movs	r3, #192	; 0xc0
 800067c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800067e:	2312      	movs	r3, #18
 8000680:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000682:	2300      	movs	r3, #0
 8000684:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000686:	2303      	movs	r3, #3
 8000688:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800068a:	2304      	movs	r3, #4
 800068c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800068e:	f107 0314 	add.w	r3, r7, #20
 8000692:	4619      	mov	r1, r3
 8000694:	480c      	ldr	r0, [pc, #48]	; (80006c8 <HAL_I2C_MspInit+0x8c>)
 8000696:	f000 fd07 	bl	80010a8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800069a:	2300      	movs	r3, #0
 800069c:	60fb      	str	r3, [r7, #12]
 800069e:	4b09      	ldr	r3, [pc, #36]	; (80006c4 <HAL_I2C_MspInit+0x88>)
 80006a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006a2:	4a08      	ldr	r2, [pc, #32]	; (80006c4 <HAL_I2C_MspInit+0x88>)
 80006a4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80006a8:	6413      	str	r3, [r2, #64]	; 0x40
 80006aa:	4b06      	ldr	r3, [pc, #24]	; (80006c4 <HAL_I2C_MspInit+0x88>)
 80006ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006ae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80006b2:	60fb      	str	r3, [r7, #12]
 80006b4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80006b6:	bf00      	nop
 80006b8:	3728      	adds	r7, #40	; 0x28
 80006ba:	46bd      	mov	sp, r7
 80006bc:	bd80      	pop	{r7, pc}
 80006be:	bf00      	nop
 80006c0:	40005400 	.word	0x40005400
 80006c4:	40023800 	.word	0x40023800
 80006c8:	40020400 	.word	0x40020400

080006cc <HAL_UART_RxCpltCallback>:
  *The board with `WeAct` Logo && `version number` is our board, quality guarantee. 
  *For more information please visit: https://github.com/WeActTC/MiniF4-STM32F4x1
  *更多信�?�请访问：https://gitee.com/WeActTC/MiniF4-STM32F4x1
  */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b082      	sub	sp, #8
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	6078      	str	r0, [r7, #4]
    if (huart == &huart1) {
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	4a06      	ldr	r2, [pc, #24]	; (80006f0 <HAL_UART_RxCpltCallback+0x24>)
 80006d8:	4293      	cmp	r3, r2
 80006da:	d104      	bne.n	80006e6 <HAL_UART_RxCpltCallback+0x1a>
        // Process received data
        // For example, you can print the received data to a terminal

        // Restart the UART reception
        HAL_UART_Receive_IT(&huart1, dataArray, 32);
 80006dc:	2220      	movs	r2, #32
 80006de:	4905      	ldr	r1, [pc, #20]	; (80006f4 <HAL_UART_RxCpltCallback+0x28>)
 80006e0:	4803      	ldr	r0, [pc, #12]	; (80006f0 <HAL_UART_RxCpltCallback+0x24>)
 80006e2:	f001 fef5 	bl	80024d0 <HAL_UART_Receive_IT>
    }
}
 80006e6:	bf00      	nop
 80006e8:	3708      	adds	r7, #8
 80006ea:	46bd      	mov	sp, r7
 80006ec:	bd80      	pop	{r7, pc}
 80006ee:	bf00      	nop
 80006f0:	20000114 	.word	0x20000114
 80006f4:	2000007c 	.word	0x2000007c

080006f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b082      	sub	sp, #8
 80006fc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006fe:	f000 fa99 	bl	8000c34 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000702:	f000 f811 	bl	8000728 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000706:	f7ff fee9 	bl	80004dc <MX_GPIO_Init>
  MX_RTC_Init();
 800070a:	f000 f889 	bl	8000820 <MX_RTC_Init>
  MX_I2C1_Init();
 800070e:	f7ff ff67 	bl	80005e0 <MX_I2C1_Init>
  MX_SPI1_Init();
 8000712:	f000 f8d7 	bl	80008c4 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8000716:	f000 f9e9 	bl	8000aec <MX_USART1_UART_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  HAL_Delay(5000);
 800071a:	f241 3088 	movw	r0, #5000	; 0x1388
 800071e:	f000 fafb 	bl	8000d18 <HAL_Delay>
  uint8_t value = 0;
 8000722:	2300      	movs	r3, #0
 8000724:	71fb      	strb	r3, [r7, #7]
  while (1)
 8000726:	e7fe      	b.n	8000726 <main+0x2e>

08000728 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	b094      	sub	sp, #80	; 0x50
 800072c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800072e:	f107 0320 	add.w	r3, r7, #32
 8000732:	2230      	movs	r2, #48	; 0x30
 8000734:	2100      	movs	r1, #0
 8000736:	4618      	mov	r0, r3
 8000738:	f002 fe18 	bl	800336c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800073c:	f107 030c 	add.w	r3, r7, #12
 8000740:	2200      	movs	r2, #0
 8000742:	601a      	str	r2, [r3, #0]
 8000744:	605a      	str	r2, [r3, #4]
 8000746:	609a      	str	r2, [r3, #8]
 8000748:	60da      	str	r2, [r3, #12]
 800074a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800074c:	2300      	movs	r3, #0
 800074e:	60bb      	str	r3, [r7, #8]
 8000750:	4b29      	ldr	r3, [pc, #164]	; (80007f8 <SystemClock_Config+0xd0>)
 8000752:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000754:	4a28      	ldr	r2, [pc, #160]	; (80007f8 <SystemClock_Config+0xd0>)
 8000756:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800075a:	6413      	str	r3, [r2, #64]	; 0x40
 800075c:	4b26      	ldr	r3, [pc, #152]	; (80007f8 <SystemClock_Config+0xd0>)
 800075e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000760:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000764:	60bb      	str	r3, [r7, #8]
 8000766:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000768:	2300      	movs	r3, #0
 800076a:	607b      	str	r3, [r7, #4]
 800076c:	4b23      	ldr	r3, [pc, #140]	; (80007fc <SystemClock_Config+0xd4>)
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	4a22      	ldr	r2, [pc, #136]	; (80007fc <SystemClock_Config+0xd4>)
 8000772:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000776:	6013      	str	r3, [r2, #0]
 8000778:	4b20      	ldr	r3, [pc, #128]	; (80007fc <SystemClock_Config+0xd4>)
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000780:	607b      	str	r3, [r7, #4]
 8000782:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8000784:	2309      	movs	r3, #9
 8000786:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000788:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800078c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800078e:	2301      	movs	r3, #1
 8000790:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000792:	2302      	movs	r3, #2
 8000794:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000796:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800079a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 800079c:	2319      	movs	r3, #25
 800079e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 144;
 80007a0:	2390      	movs	r3, #144	; 0x90
 80007a2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007a4:	2302      	movs	r3, #2
 80007a6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 5;
 80007a8:	2305      	movs	r3, #5
 80007aa:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007ac:	f107 0320 	add.w	r3, r7, #32
 80007b0:	4618      	mov	r0, r3
 80007b2:	f000 ff75 	bl	80016a0 <HAL_RCC_OscConfig>
 80007b6:	4603      	mov	r3, r0
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d001      	beq.n	80007c0 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80007bc:	f000 f820 	bl	8000800 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007c0:	230f      	movs	r3, #15
 80007c2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007c4:	2302      	movs	r3, #2
 80007c6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007c8:	2300      	movs	r3, #0
 80007ca:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80007cc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007d0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80007d2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007d6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80007d8:	f107 030c 	add.w	r3, r7, #12
 80007dc:	2102      	movs	r1, #2
 80007de:	4618      	mov	r0, r3
 80007e0:	f001 f9d6 	bl	8001b90 <HAL_RCC_ClockConfig>
 80007e4:	4603      	mov	r3, r0
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d001      	beq.n	80007ee <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80007ea:	f000 f809 	bl	8000800 <Error_Handler>
  }
}
 80007ee:	bf00      	nop
 80007f0:	3750      	adds	r7, #80	; 0x50
 80007f2:	46bd      	mov	sp, r7
 80007f4:	bd80      	pop	{r7, pc}
 80007f6:	bf00      	nop
 80007f8:	40023800 	.word	0x40023800
 80007fc:	40007000 	.word	0x40007000

08000800 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
	HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000804:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000808:	4804      	ldr	r0, [pc, #16]	; (800081c <Error_Handler+0x1c>)
 800080a:	f000 fdea 	bl	80013e2 <HAL_GPIO_TogglePin>
	HAL_Delay(1000);
 800080e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000812:	f000 fa81 	bl	8000d18 <HAL_Delay>
  /* USER CODE END Error_Handler_Debug */
}
 8000816:	bf00      	nop
 8000818:	bd80      	pop	{r7, pc}
 800081a:	bf00      	nop
 800081c:	40020800 	.word	0x40020800

08000820 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000824:	4b0f      	ldr	r3, [pc, #60]	; (8000864 <MX_RTC_Init+0x44>)
 8000826:	4a10      	ldr	r2, [pc, #64]	; (8000868 <MX_RTC_Init+0x48>)
 8000828:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800082a:	4b0e      	ldr	r3, [pc, #56]	; (8000864 <MX_RTC_Init+0x44>)
 800082c:	2200      	movs	r2, #0
 800082e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000830:	4b0c      	ldr	r3, [pc, #48]	; (8000864 <MX_RTC_Init+0x44>)
 8000832:	227f      	movs	r2, #127	; 0x7f
 8000834:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000836:	4b0b      	ldr	r3, [pc, #44]	; (8000864 <MX_RTC_Init+0x44>)
 8000838:	22ff      	movs	r2, #255	; 0xff
 800083a:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800083c:	4b09      	ldr	r3, [pc, #36]	; (8000864 <MX_RTC_Init+0x44>)
 800083e:	2200      	movs	r2, #0
 8000840:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000842:	4b08      	ldr	r3, [pc, #32]	; (8000864 <MX_RTC_Init+0x44>)
 8000844:	2200      	movs	r2, #0
 8000846:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000848:	4b06      	ldr	r3, [pc, #24]	; (8000864 <MX_RTC_Init+0x44>)
 800084a:	2200      	movs	r2, #0
 800084c:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800084e:	4805      	ldr	r0, [pc, #20]	; (8000864 <MX_RTC_Init+0x44>)
 8000850:	f001 fc6e 	bl	8002130 <HAL_RTC_Init>
 8000854:	4603      	mov	r3, r0
 8000856:	2b00      	cmp	r3, #0
 8000858:	d001      	beq.n	800085e <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 800085a:	f7ff ffd1 	bl	8000800 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800085e:	bf00      	nop
 8000860:	bd80      	pop	{r7, pc}
 8000862:	bf00      	nop
 8000864:	2000009c 	.word	0x2000009c
 8000868:	40002800 	.word	0x40002800

0800086c <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	b088      	sub	sp, #32
 8000870:	af00      	add	r7, sp, #0
 8000872:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000874:	f107 0308 	add.w	r3, r7, #8
 8000878:	2200      	movs	r2, #0
 800087a:	601a      	str	r2, [r3, #0]
 800087c:	605a      	str	r2, [r3, #4]
 800087e:	609a      	str	r2, [r3, #8]
 8000880:	60da      	str	r2, [r3, #12]
 8000882:	611a      	str	r2, [r3, #16]
 8000884:	615a      	str	r2, [r3, #20]
  if(rtcHandle->Instance==RTC)
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	681b      	ldr	r3, [r3, #0]
 800088a:	4a0c      	ldr	r2, [pc, #48]	; (80008bc <HAL_RTC_MspInit+0x50>)
 800088c:	4293      	cmp	r3, r2
 800088e:	d111      	bne.n	80008b4 <HAL_RTC_MspInit+0x48>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000890:	2302      	movs	r3, #2
 8000892:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000894:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000898:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800089a:	f107 0308 	add.w	r3, r7, #8
 800089e:	4618      	mov	r0, r3
 80008a0:	f001 fb56 	bl	8001f50 <HAL_RCCEx_PeriphCLKConfig>
 80008a4:	4603      	mov	r3, r0
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d001      	beq.n	80008ae <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 80008aa:	f7ff ffa9 	bl	8000800 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 80008ae:	4b04      	ldr	r3, [pc, #16]	; (80008c0 <HAL_RTC_MspInit+0x54>)
 80008b0:	2201      	movs	r2, #1
 80008b2:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 80008b4:	bf00      	nop
 80008b6:	3720      	adds	r7, #32
 80008b8:	46bd      	mov	sp, r7
 80008ba:	bd80      	pop	{r7, pc}
 80008bc:	40002800 	.word	0x40002800
 80008c0:	42470e3c 	.word	0x42470e3c

080008c4 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80008c8:	4b17      	ldr	r3, [pc, #92]	; (8000928 <MX_SPI1_Init+0x64>)
 80008ca:	4a18      	ldr	r2, [pc, #96]	; (800092c <MX_SPI1_Init+0x68>)
 80008cc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80008ce:	4b16      	ldr	r3, [pc, #88]	; (8000928 <MX_SPI1_Init+0x64>)
 80008d0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80008d4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80008d6:	4b14      	ldr	r3, [pc, #80]	; (8000928 <MX_SPI1_Init+0x64>)
 80008d8:	2200      	movs	r2, #0
 80008da:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80008dc:	4b12      	ldr	r3, [pc, #72]	; (8000928 <MX_SPI1_Init+0x64>)
 80008de:	2200      	movs	r2, #0
 80008e0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80008e2:	4b11      	ldr	r3, [pc, #68]	; (8000928 <MX_SPI1_Init+0x64>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80008e8:	4b0f      	ldr	r3, [pc, #60]	; (8000928 <MX_SPI1_Init+0x64>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80008ee:	4b0e      	ldr	r3, [pc, #56]	; (8000928 <MX_SPI1_Init+0x64>)
 80008f0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80008f4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 80008f6:	4b0c      	ldr	r3, [pc, #48]	; (8000928 <MX_SPI1_Init+0x64>)
 80008f8:	2230      	movs	r2, #48	; 0x30
 80008fa:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80008fc:	4b0a      	ldr	r3, [pc, #40]	; (8000928 <MX_SPI1_Init+0x64>)
 80008fe:	2200      	movs	r2, #0
 8000900:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000902:	4b09      	ldr	r3, [pc, #36]	; (8000928 <MX_SPI1_Init+0x64>)
 8000904:	2200      	movs	r2, #0
 8000906:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000908:	4b07      	ldr	r3, [pc, #28]	; (8000928 <MX_SPI1_Init+0x64>)
 800090a:	2200      	movs	r2, #0
 800090c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800090e:	4b06      	ldr	r3, [pc, #24]	; (8000928 <MX_SPI1_Init+0x64>)
 8000910:	220a      	movs	r2, #10
 8000912:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000914:	4804      	ldr	r0, [pc, #16]	; (8000928 <MX_SPI1_Init+0x64>)
 8000916:	f001 fd05 	bl	8002324 <HAL_SPI_Init>
 800091a:	4603      	mov	r3, r0
 800091c:	2b00      	cmp	r3, #0
 800091e:	d001      	beq.n	8000924 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000920:	f7ff ff6e 	bl	8000800 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000924:	bf00      	nop
 8000926:	bd80      	pop	{r7, pc}
 8000928:	200000bc 	.word	0x200000bc
 800092c:	40013000 	.word	0x40013000

08000930 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b08a      	sub	sp, #40	; 0x28
 8000934:	af00      	add	r7, sp, #0
 8000936:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000938:	f107 0314 	add.w	r3, r7, #20
 800093c:	2200      	movs	r2, #0
 800093e:	601a      	str	r2, [r3, #0]
 8000940:	605a      	str	r2, [r3, #4]
 8000942:	609a      	str	r2, [r3, #8]
 8000944:	60da      	str	r2, [r3, #12]
 8000946:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	4a19      	ldr	r2, [pc, #100]	; (80009b4 <HAL_SPI_MspInit+0x84>)
 800094e:	4293      	cmp	r3, r2
 8000950:	d12b      	bne.n	80009aa <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000952:	2300      	movs	r3, #0
 8000954:	613b      	str	r3, [r7, #16]
 8000956:	4b18      	ldr	r3, [pc, #96]	; (80009b8 <HAL_SPI_MspInit+0x88>)
 8000958:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800095a:	4a17      	ldr	r2, [pc, #92]	; (80009b8 <HAL_SPI_MspInit+0x88>)
 800095c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000960:	6453      	str	r3, [r2, #68]	; 0x44
 8000962:	4b15      	ldr	r3, [pc, #84]	; (80009b8 <HAL_SPI_MspInit+0x88>)
 8000964:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000966:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800096a:	613b      	str	r3, [r7, #16]
 800096c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800096e:	2300      	movs	r3, #0
 8000970:	60fb      	str	r3, [r7, #12]
 8000972:	4b11      	ldr	r3, [pc, #68]	; (80009b8 <HAL_SPI_MspInit+0x88>)
 8000974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000976:	4a10      	ldr	r2, [pc, #64]	; (80009b8 <HAL_SPI_MspInit+0x88>)
 8000978:	f043 0301 	orr.w	r3, r3, #1
 800097c:	6313      	str	r3, [r2, #48]	; 0x30
 800097e:	4b0e      	ldr	r3, [pc, #56]	; (80009b8 <HAL_SPI_MspInit+0x88>)
 8000980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000982:	f003 0301 	and.w	r3, r3, #1
 8000986:	60fb      	str	r3, [r7, #12]
 8000988:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 800098a:	23a0      	movs	r3, #160	; 0xa0
 800098c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800098e:	2302      	movs	r3, #2
 8000990:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000992:	2300      	movs	r3, #0
 8000994:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000996:	2303      	movs	r3, #3
 8000998:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800099a:	2305      	movs	r3, #5
 800099c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800099e:	f107 0314 	add.w	r3, r7, #20
 80009a2:	4619      	mov	r1, r3
 80009a4:	4805      	ldr	r0, [pc, #20]	; (80009bc <HAL_SPI_MspInit+0x8c>)
 80009a6:	f000 fb7f 	bl	80010a8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80009aa:	bf00      	nop
 80009ac:	3728      	adds	r7, #40	; 0x28
 80009ae:	46bd      	mov	sp, r7
 80009b0:	bd80      	pop	{r7, pc}
 80009b2:	bf00      	nop
 80009b4:	40013000 	.word	0x40013000
 80009b8:	40023800 	.word	0x40023800
 80009bc:	40020000 	.word	0x40020000

080009c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009c0:	b480      	push	{r7}
 80009c2:	b083      	sub	sp, #12
 80009c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009c6:	2300      	movs	r3, #0
 80009c8:	607b      	str	r3, [r7, #4]
 80009ca:	4b10      	ldr	r3, [pc, #64]	; (8000a0c <HAL_MspInit+0x4c>)
 80009cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009ce:	4a0f      	ldr	r2, [pc, #60]	; (8000a0c <HAL_MspInit+0x4c>)
 80009d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009d4:	6453      	str	r3, [r2, #68]	; 0x44
 80009d6:	4b0d      	ldr	r3, [pc, #52]	; (8000a0c <HAL_MspInit+0x4c>)
 80009d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009de:	607b      	str	r3, [r7, #4]
 80009e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009e2:	2300      	movs	r3, #0
 80009e4:	603b      	str	r3, [r7, #0]
 80009e6:	4b09      	ldr	r3, [pc, #36]	; (8000a0c <HAL_MspInit+0x4c>)
 80009e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ea:	4a08      	ldr	r2, [pc, #32]	; (8000a0c <HAL_MspInit+0x4c>)
 80009ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009f0:	6413      	str	r3, [r2, #64]	; 0x40
 80009f2:	4b06      	ldr	r3, [pc, #24]	; (8000a0c <HAL_MspInit+0x4c>)
 80009f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009fa:	603b      	str	r3, [r7, #0]
 80009fc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009fe:	bf00      	nop
 8000a00:	370c      	adds	r7, #12
 8000a02:	46bd      	mov	sp, r7
 8000a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a08:	4770      	bx	lr
 8000a0a:	bf00      	nop
 8000a0c:	40023800 	.word	0x40023800

08000a10 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a10:	b480      	push	{r7}
 8000a12:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000a14:	bf00      	nop
 8000a16:	46bd      	mov	sp, r7
 8000a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1c:	4770      	bx	lr

08000a1e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a1e:	b480      	push	{r7}
 8000a20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a22:	e7fe      	b.n	8000a22 <HardFault_Handler+0x4>

08000a24 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a24:	b480      	push	{r7}
 8000a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a28:	e7fe      	b.n	8000a28 <MemManage_Handler+0x4>

08000a2a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a2a:	b480      	push	{r7}
 8000a2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a2e:	e7fe      	b.n	8000a2e <BusFault_Handler+0x4>

08000a30 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a30:	b480      	push	{r7}
 8000a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a34:	e7fe      	b.n	8000a34 <UsageFault_Handler+0x4>

08000a36 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a36:	b480      	push	{r7}
 8000a38:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a3a:	bf00      	nop
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a42:	4770      	bx	lr

08000a44 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a44:	b480      	push	{r7}
 8000a46:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a48:	bf00      	nop
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a50:	4770      	bx	lr

08000a52 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a52:	b480      	push	{r7}
 8000a54:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a56:	bf00      	nop
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5e:	4770      	bx	lr

08000a60 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a64:	f000 f938 	bl	8000cd8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a68:	bf00      	nop
 8000a6a:	bd80      	pop	{r7, pc}

08000a6c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000a70:	4802      	ldr	r0, [pc, #8]	; (8000a7c <USART1_IRQHandler+0x10>)
 8000a72:	f001 fd5d 	bl	8002530 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000a76:	bf00      	nop
 8000a78:	bd80      	pop	{r7, pc}
 8000a7a:	bf00      	nop
 8000a7c:	20000114 	.word	0x20000114

08000a80 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a80:	b480      	push	{r7}
 8000a82:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a84:	4b16      	ldr	r3, [pc, #88]	; (8000ae0 <SystemInit+0x60>)
 8000a86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a8a:	4a15      	ldr	r2, [pc, #84]	; (8000ae0 <SystemInit+0x60>)
 8000a8c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a90:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000a94:	4b13      	ldr	r3, [pc, #76]	; (8000ae4 <SystemInit+0x64>)
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	4a12      	ldr	r2, [pc, #72]	; (8000ae4 <SystemInit+0x64>)
 8000a9a:	f043 0301 	orr.w	r3, r3, #1
 8000a9e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000aa0:	4b10      	ldr	r3, [pc, #64]	; (8000ae4 <SystemInit+0x64>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000aa6:	4b0f      	ldr	r3, [pc, #60]	; (8000ae4 <SystemInit+0x64>)
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	4a0e      	ldr	r2, [pc, #56]	; (8000ae4 <SystemInit+0x64>)
 8000aac:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000ab0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000ab4:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8000ab6:	4b0b      	ldr	r3, [pc, #44]	; (8000ae4 <SystemInit+0x64>)
 8000ab8:	4a0b      	ldr	r2, [pc, #44]	; (8000ae8 <SystemInit+0x68>)
 8000aba:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000abc:	4b09      	ldr	r3, [pc, #36]	; (8000ae4 <SystemInit+0x64>)
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	4a08      	ldr	r2, [pc, #32]	; (8000ae4 <SystemInit+0x64>)
 8000ac2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000ac6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000ac8:	4b06      	ldr	r3, [pc, #24]	; (8000ae4 <SystemInit+0x64>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000ace:	4b04      	ldr	r3, [pc, #16]	; (8000ae0 <SystemInit+0x60>)
 8000ad0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000ad4:	609a      	str	r2, [r3, #8]
#endif
}
 8000ad6:	bf00      	nop
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ade:	4770      	bx	lr
 8000ae0:	e000ed00 	.word	0xe000ed00
 8000ae4:	40023800 	.word	0x40023800
 8000ae8:	24003010 	.word	0x24003010

08000aec <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000af0:	4b11      	ldr	r3, [pc, #68]	; (8000b38 <MX_USART1_UART_Init+0x4c>)
 8000af2:	4a12      	ldr	r2, [pc, #72]	; (8000b3c <MX_USART1_UART_Init+0x50>)
 8000af4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000af6:	4b10      	ldr	r3, [pc, #64]	; (8000b38 <MX_USART1_UART_Init+0x4c>)
 8000af8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000afc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000afe:	4b0e      	ldr	r3, [pc, #56]	; (8000b38 <MX_USART1_UART_Init+0x4c>)
 8000b00:	2200      	movs	r2, #0
 8000b02:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000b04:	4b0c      	ldr	r3, [pc, #48]	; (8000b38 <MX_USART1_UART_Init+0x4c>)
 8000b06:	2200      	movs	r2, #0
 8000b08:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000b0a:	4b0b      	ldr	r3, [pc, #44]	; (8000b38 <MX_USART1_UART_Init+0x4c>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_RX;
 8000b10:	4b09      	ldr	r3, [pc, #36]	; (8000b38 <MX_USART1_UART_Init+0x4c>)
 8000b12:	2204      	movs	r2, #4
 8000b14:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b16:	4b08      	ldr	r3, [pc, #32]	; (8000b38 <MX_USART1_UART_Init+0x4c>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b1c:	4b06      	ldr	r3, [pc, #24]	; (8000b38 <MX_USART1_UART_Init+0x4c>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000b22:	4805      	ldr	r0, [pc, #20]	; (8000b38 <MX_USART1_UART_Init+0x4c>)
 8000b24:	f001 fc87 	bl	8002436 <HAL_UART_Init>
 8000b28:	4603      	mov	r3, r0
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d001      	beq.n	8000b32 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000b2e:	f7ff fe67 	bl	8000800 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000b32:	bf00      	nop
 8000b34:	bd80      	pop	{r7, pc}
 8000b36:	bf00      	nop
 8000b38:	20000114 	.word	0x20000114
 8000b3c:	40011000 	.word	0x40011000

08000b40 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b08a      	sub	sp, #40	; 0x28
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b48:	f107 0314 	add.w	r3, r7, #20
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	601a      	str	r2, [r3, #0]
 8000b50:	605a      	str	r2, [r3, #4]
 8000b52:	609a      	str	r2, [r3, #8]
 8000b54:	60da      	str	r2, [r3, #12]
 8000b56:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	4a1d      	ldr	r2, [pc, #116]	; (8000bd4 <HAL_UART_MspInit+0x94>)
 8000b5e:	4293      	cmp	r3, r2
 8000b60:	d134      	bne.n	8000bcc <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000b62:	2300      	movs	r3, #0
 8000b64:	613b      	str	r3, [r7, #16]
 8000b66:	4b1c      	ldr	r3, [pc, #112]	; (8000bd8 <HAL_UART_MspInit+0x98>)
 8000b68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b6a:	4a1b      	ldr	r2, [pc, #108]	; (8000bd8 <HAL_UART_MspInit+0x98>)
 8000b6c:	f043 0310 	orr.w	r3, r3, #16
 8000b70:	6453      	str	r3, [r2, #68]	; 0x44
 8000b72:	4b19      	ldr	r3, [pc, #100]	; (8000bd8 <HAL_UART_MspInit+0x98>)
 8000b74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b76:	f003 0310 	and.w	r3, r3, #16
 8000b7a:	613b      	str	r3, [r7, #16]
 8000b7c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b7e:	2300      	movs	r3, #0
 8000b80:	60fb      	str	r3, [r7, #12]
 8000b82:	4b15      	ldr	r3, [pc, #84]	; (8000bd8 <HAL_UART_MspInit+0x98>)
 8000b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b86:	4a14      	ldr	r2, [pc, #80]	; (8000bd8 <HAL_UART_MspInit+0x98>)
 8000b88:	f043 0301 	orr.w	r3, r3, #1
 8000b8c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b8e:	4b12      	ldr	r3, [pc, #72]	; (8000bd8 <HAL_UART_MspInit+0x98>)
 8000b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b92:	f003 0301 	and.w	r3, r3, #1
 8000b96:	60fb      	str	r3, [r7, #12]
 8000b98:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000b9a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000b9e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ba0:	2302      	movs	r3, #2
 8000ba2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ba8:	2303      	movs	r3, #3
 8000baa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000bac:	2307      	movs	r3, #7
 8000bae:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bb0:	f107 0314 	add.w	r3, r7, #20
 8000bb4:	4619      	mov	r1, r3
 8000bb6:	4809      	ldr	r0, [pc, #36]	; (8000bdc <HAL_UART_MspInit+0x9c>)
 8000bb8:	f000 fa76 	bl	80010a8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	2100      	movs	r1, #0
 8000bc0:	2025      	movs	r0, #37	; 0x25
 8000bc2:	f000 f9a8 	bl	8000f16 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000bc6:	2025      	movs	r0, #37	; 0x25
 8000bc8:	f000 f9c1 	bl	8000f4e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8000bcc:	bf00      	nop
 8000bce:	3728      	adds	r7, #40	; 0x28
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	bd80      	pop	{r7, pc}
 8000bd4:	40011000 	.word	0x40011000
 8000bd8:	40023800 	.word	0x40023800
 8000bdc:	40020000 	.word	0x40020000

08000be0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000be0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c18 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000be4:	480d      	ldr	r0, [pc, #52]	; (8000c1c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000be6:	490e      	ldr	r1, [pc, #56]	; (8000c20 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000be8:	4a0e      	ldr	r2, [pc, #56]	; (8000c24 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000bea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bec:	e002      	b.n	8000bf4 <LoopCopyDataInit>

08000bee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bf0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bf2:	3304      	adds	r3, #4

08000bf4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bf4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bf6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bf8:	d3f9      	bcc.n	8000bee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bfa:	4a0b      	ldr	r2, [pc, #44]	; (8000c28 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000bfc:	4c0b      	ldr	r4, [pc, #44]	; (8000c2c <LoopFillZerobss+0x26>)
  movs r3, #0
 8000bfe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c00:	e001      	b.n	8000c06 <LoopFillZerobss>

08000c02 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c02:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c04:	3204      	adds	r2, #4

08000c06 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c06:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c08:	d3fb      	bcc.n	8000c02 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000c0a:	f7ff ff39 	bl	8000a80 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c0e:	f002 fb89 	bl	8003324 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c12:	f7ff fd71 	bl	80006f8 <main>
  bx  lr    
 8000c16:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000c18:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000c1c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c20:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000c24:	080033bc 	.word	0x080033bc
  ldr r2, =_sbss
 8000c28:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000c2c:	2000015c 	.word	0x2000015c

08000c30 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c30:	e7fe      	b.n	8000c30 <ADC_IRQHandler>
	...

08000c34 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c38:	4b0e      	ldr	r3, [pc, #56]	; (8000c74 <HAL_Init+0x40>)
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	4a0d      	ldr	r2, [pc, #52]	; (8000c74 <HAL_Init+0x40>)
 8000c3e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c42:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c44:	4b0b      	ldr	r3, [pc, #44]	; (8000c74 <HAL_Init+0x40>)
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	4a0a      	ldr	r2, [pc, #40]	; (8000c74 <HAL_Init+0x40>)
 8000c4a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c4e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c50:	4b08      	ldr	r3, [pc, #32]	; (8000c74 <HAL_Init+0x40>)
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	4a07      	ldr	r2, [pc, #28]	; (8000c74 <HAL_Init+0x40>)
 8000c56:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c5a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c5c:	2003      	movs	r0, #3
 8000c5e:	f000 f94f 	bl	8000f00 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c62:	2000      	movs	r0, #0
 8000c64:	f000 f808 	bl	8000c78 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c68:	f7ff feaa 	bl	80009c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c6c:	2300      	movs	r3, #0
}
 8000c6e:	4618      	mov	r0, r3
 8000c70:	bd80      	pop	{r7, pc}
 8000c72:	bf00      	nop
 8000c74:	40023c00 	.word	0x40023c00

08000c78 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b082      	sub	sp, #8
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c80:	4b12      	ldr	r3, [pc, #72]	; (8000ccc <HAL_InitTick+0x54>)
 8000c82:	681a      	ldr	r2, [r3, #0]
 8000c84:	4b12      	ldr	r3, [pc, #72]	; (8000cd0 <HAL_InitTick+0x58>)
 8000c86:	781b      	ldrb	r3, [r3, #0]
 8000c88:	4619      	mov	r1, r3
 8000c8a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c8e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c92:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c96:	4618      	mov	r0, r3
 8000c98:	f000 f967 	bl	8000f6a <HAL_SYSTICK_Config>
 8000c9c:	4603      	mov	r3, r0
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d001      	beq.n	8000ca6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ca2:	2301      	movs	r3, #1
 8000ca4:	e00e      	b.n	8000cc4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	2b0f      	cmp	r3, #15
 8000caa:	d80a      	bhi.n	8000cc2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000cac:	2200      	movs	r2, #0
 8000cae:	6879      	ldr	r1, [r7, #4]
 8000cb0:	f04f 30ff 	mov.w	r0, #4294967295
 8000cb4:	f000 f92f 	bl	8000f16 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000cb8:	4a06      	ldr	r2, [pc, #24]	; (8000cd4 <HAL_InitTick+0x5c>)
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	e000      	b.n	8000cc4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000cc2:	2301      	movs	r3, #1
}
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	3708      	adds	r7, #8
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	bd80      	pop	{r7, pc}
 8000ccc:	20000000 	.word	0x20000000
 8000cd0:	20000008 	.word	0x20000008
 8000cd4:	20000004 	.word	0x20000004

08000cd8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000cdc:	4b06      	ldr	r3, [pc, #24]	; (8000cf8 <HAL_IncTick+0x20>)
 8000cde:	781b      	ldrb	r3, [r3, #0]
 8000ce0:	461a      	mov	r2, r3
 8000ce2:	4b06      	ldr	r3, [pc, #24]	; (8000cfc <HAL_IncTick+0x24>)
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	4413      	add	r3, r2
 8000ce8:	4a04      	ldr	r2, [pc, #16]	; (8000cfc <HAL_IncTick+0x24>)
 8000cea:	6013      	str	r3, [r2, #0]
}
 8000cec:	bf00      	nop
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf4:	4770      	bx	lr
 8000cf6:	bf00      	nop
 8000cf8:	20000008 	.word	0x20000008
 8000cfc:	20000158 	.word	0x20000158

08000d00 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d00:	b480      	push	{r7}
 8000d02:	af00      	add	r7, sp, #0
  return uwTick;
 8000d04:	4b03      	ldr	r3, [pc, #12]	; (8000d14 <HAL_GetTick+0x14>)
 8000d06:	681b      	ldr	r3, [r3, #0]
}
 8000d08:	4618      	mov	r0, r3
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d10:	4770      	bx	lr
 8000d12:	bf00      	nop
 8000d14:	20000158 	.word	0x20000158

08000d18 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b084      	sub	sp, #16
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d20:	f7ff ffee 	bl	8000d00 <HAL_GetTick>
 8000d24:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d2a:	68fb      	ldr	r3, [r7, #12]
 8000d2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d30:	d005      	beq.n	8000d3e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d32:	4b0a      	ldr	r3, [pc, #40]	; (8000d5c <HAL_Delay+0x44>)
 8000d34:	781b      	ldrb	r3, [r3, #0]
 8000d36:	461a      	mov	r2, r3
 8000d38:	68fb      	ldr	r3, [r7, #12]
 8000d3a:	4413      	add	r3, r2
 8000d3c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000d3e:	bf00      	nop
 8000d40:	f7ff ffde 	bl	8000d00 <HAL_GetTick>
 8000d44:	4602      	mov	r2, r0
 8000d46:	68bb      	ldr	r3, [r7, #8]
 8000d48:	1ad3      	subs	r3, r2, r3
 8000d4a:	68fa      	ldr	r2, [r7, #12]
 8000d4c:	429a      	cmp	r2, r3
 8000d4e:	d8f7      	bhi.n	8000d40 <HAL_Delay+0x28>
  {
  }
}
 8000d50:	bf00      	nop
 8000d52:	bf00      	nop
 8000d54:	3710      	adds	r7, #16
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bd80      	pop	{r7, pc}
 8000d5a:	bf00      	nop
 8000d5c:	20000008 	.word	0x20000008

08000d60 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d60:	b480      	push	{r7}
 8000d62:	b085      	sub	sp, #20
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	f003 0307 	and.w	r3, r3, #7
 8000d6e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d70:	4b0c      	ldr	r3, [pc, #48]	; (8000da4 <__NVIC_SetPriorityGrouping+0x44>)
 8000d72:	68db      	ldr	r3, [r3, #12]
 8000d74:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d76:	68ba      	ldr	r2, [r7, #8]
 8000d78:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d7c:	4013      	ands	r3, r2
 8000d7e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d80:	68fb      	ldr	r3, [r7, #12]
 8000d82:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d84:	68bb      	ldr	r3, [r7, #8]
 8000d86:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d88:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d8c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d90:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d92:	4a04      	ldr	r2, [pc, #16]	; (8000da4 <__NVIC_SetPriorityGrouping+0x44>)
 8000d94:	68bb      	ldr	r3, [r7, #8]
 8000d96:	60d3      	str	r3, [r2, #12]
}
 8000d98:	bf00      	nop
 8000d9a:	3714      	adds	r7, #20
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da2:	4770      	bx	lr
 8000da4:	e000ed00 	.word	0xe000ed00

08000da8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000da8:	b480      	push	{r7}
 8000daa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000dac:	4b04      	ldr	r3, [pc, #16]	; (8000dc0 <__NVIC_GetPriorityGrouping+0x18>)
 8000dae:	68db      	ldr	r3, [r3, #12]
 8000db0:	0a1b      	lsrs	r3, r3, #8
 8000db2:	f003 0307 	and.w	r3, r3, #7
}
 8000db6:	4618      	mov	r0, r3
 8000db8:	46bd      	mov	sp, r7
 8000dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbe:	4770      	bx	lr
 8000dc0:	e000ed00 	.word	0xe000ed00

08000dc4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	b083      	sub	sp, #12
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	4603      	mov	r3, r0
 8000dcc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	db0b      	blt.n	8000dee <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000dd6:	79fb      	ldrb	r3, [r7, #7]
 8000dd8:	f003 021f 	and.w	r2, r3, #31
 8000ddc:	4907      	ldr	r1, [pc, #28]	; (8000dfc <__NVIC_EnableIRQ+0x38>)
 8000dde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000de2:	095b      	lsrs	r3, r3, #5
 8000de4:	2001      	movs	r0, #1
 8000de6:	fa00 f202 	lsl.w	r2, r0, r2
 8000dea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000dee:	bf00      	nop
 8000df0:	370c      	adds	r7, #12
 8000df2:	46bd      	mov	sp, r7
 8000df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df8:	4770      	bx	lr
 8000dfa:	bf00      	nop
 8000dfc:	e000e100 	.word	0xe000e100

08000e00 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e00:	b480      	push	{r7}
 8000e02:	b083      	sub	sp, #12
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	4603      	mov	r3, r0
 8000e08:	6039      	str	r1, [r7, #0]
 8000e0a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	db0a      	blt.n	8000e2a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e14:	683b      	ldr	r3, [r7, #0]
 8000e16:	b2da      	uxtb	r2, r3
 8000e18:	490c      	ldr	r1, [pc, #48]	; (8000e4c <__NVIC_SetPriority+0x4c>)
 8000e1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e1e:	0112      	lsls	r2, r2, #4
 8000e20:	b2d2      	uxtb	r2, r2
 8000e22:	440b      	add	r3, r1
 8000e24:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e28:	e00a      	b.n	8000e40 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e2a:	683b      	ldr	r3, [r7, #0]
 8000e2c:	b2da      	uxtb	r2, r3
 8000e2e:	4908      	ldr	r1, [pc, #32]	; (8000e50 <__NVIC_SetPriority+0x50>)
 8000e30:	79fb      	ldrb	r3, [r7, #7]
 8000e32:	f003 030f 	and.w	r3, r3, #15
 8000e36:	3b04      	subs	r3, #4
 8000e38:	0112      	lsls	r2, r2, #4
 8000e3a:	b2d2      	uxtb	r2, r2
 8000e3c:	440b      	add	r3, r1
 8000e3e:	761a      	strb	r2, [r3, #24]
}
 8000e40:	bf00      	nop
 8000e42:	370c      	adds	r7, #12
 8000e44:	46bd      	mov	sp, r7
 8000e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4a:	4770      	bx	lr
 8000e4c:	e000e100 	.word	0xe000e100
 8000e50:	e000ed00 	.word	0xe000ed00

08000e54 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e54:	b480      	push	{r7}
 8000e56:	b089      	sub	sp, #36	; 0x24
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	60f8      	str	r0, [r7, #12]
 8000e5c:	60b9      	str	r1, [r7, #8]
 8000e5e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e60:	68fb      	ldr	r3, [r7, #12]
 8000e62:	f003 0307 	and.w	r3, r3, #7
 8000e66:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e68:	69fb      	ldr	r3, [r7, #28]
 8000e6a:	f1c3 0307 	rsb	r3, r3, #7
 8000e6e:	2b04      	cmp	r3, #4
 8000e70:	bf28      	it	cs
 8000e72:	2304      	movcs	r3, #4
 8000e74:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e76:	69fb      	ldr	r3, [r7, #28]
 8000e78:	3304      	adds	r3, #4
 8000e7a:	2b06      	cmp	r3, #6
 8000e7c:	d902      	bls.n	8000e84 <NVIC_EncodePriority+0x30>
 8000e7e:	69fb      	ldr	r3, [r7, #28]
 8000e80:	3b03      	subs	r3, #3
 8000e82:	e000      	b.n	8000e86 <NVIC_EncodePriority+0x32>
 8000e84:	2300      	movs	r3, #0
 8000e86:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e88:	f04f 32ff 	mov.w	r2, #4294967295
 8000e8c:	69bb      	ldr	r3, [r7, #24]
 8000e8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e92:	43da      	mvns	r2, r3
 8000e94:	68bb      	ldr	r3, [r7, #8]
 8000e96:	401a      	ands	r2, r3
 8000e98:	697b      	ldr	r3, [r7, #20]
 8000e9a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e9c:	f04f 31ff 	mov.w	r1, #4294967295
 8000ea0:	697b      	ldr	r3, [r7, #20]
 8000ea2:	fa01 f303 	lsl.w	r3, r1, r3
 8000ea6:	43d9      	mvns	r1, r3
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000eac:	4313      	orrs	r3, r2
         );
}
 8000eae:	4618      	mov	r0, r3
 8000eb0:	3724      	adds	r7, #36	; 0x24
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb8:	4770      	bx	lr
	...

08000ebc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b082      	sub	sp, #8
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	3b01      	subs	r3, #1
 8000ec8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ecc:	d301      	bcc.n	8000ed2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ece:	2301      	movs	r3, #1
 8000ed0:	e00f      	b.n	8000ef2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ed2:	4a0a      	ldr	r2, [pc, #40]	; (8000efc <SysTick_Config+0x40>)
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	3b01      	subs	r3, #1
 8000ed8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000eda:	210f      	movs	r1, #15
 8000edc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ee0:	f7ff ff8e 	bl	8000e00 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ee4:	4b05      	ldr	r3, [pc, #20]	; (8000efc <SysTick_Config+0x40>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000eea:	4b04      	ldr	r3, [pc, #16]	; (8000efc <SysTick_Config+0x40>)
 8000eec:	2207      	movs	r2, #7
 8000eee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ef0:	2300      	movs	r3, #0
}
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	3708      	adds	r7, #8
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	bd80      	pop	{r7, pc}
 8000efa:	bf00      	nop
 8000efc:	e000e010 	.word	0xe000e010

08000f00 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b082      	sub	sp, #8
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f08:	6878      	ldr	r0, [r7, #4]
 8000f0a:	f7ff ff29 	bl	8000d60 <__NVIC_SetPriorityGrouping>
}
 8000f0e:	bf00      	nop
 8000f10:	3708      	adds	r7, #8
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bd80      	pop	{r7, pc}

08000f16 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f16:	b580      	push	{r7, lr}
 8000f18:	b086      	sub	sp, #24
 8000f1a:	af00      	add	r7, sp, #0
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	60b9      	str	r1, [r7, #8]
 8000f20:	607a      	str	r2, [r7, #4]
 8000f22:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f24:	2300      	movs	r3, #0
 8000f26:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f28:	f7ff ff3e 	bl	8000da8 <__NVIC_GetPriorityGrouping>
 8000f2c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f2e:	687a      	ldr	r2, [r7, #4]
 8000f30:	68b9      	ldr	r1, [r7, #8]
 8000f32:	6978      	ldr	r0, [r7, #20]
 8000f34:	f7ff ff8e 	bl	8000e54 <NVIC_EncodePriority>
 8000f38:	4602      	mov	r2, r0
 8000f3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f3e:	4611      	mov	r1, r2
 8000f40:	4618      	mov	r0, r3
 8000f42:	f7ff ff5d 	bl	8000e00 <__NVIC_SetPriority>
}
 8000f46:	bf00      	nop
 8000f48:	3718      	adds	r7, #24
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	bd80      	pop	{r7, pc}

08000f4e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f4e:	b580      	push	{r7, lr}
 8000f50:	b082      	sub	sp, #8
 8000f52:	af00      	add	r7, sp, #0
 8000f54:	4603      	mov	r3, r0
 8000f56:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	f7ff ff31 	bl	8000dc4 <__NVIC_EnableIRQ>
}
 8000f62:	bf00      	nop
 8000f64:	3708      	adds	r7, #8
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bd80      	pop	{r7, pc}

08000f6a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f6a:	b580      	push	{r7, lr}
 8000f6c:	b082      	sub	sp, #8
 8000f6e:	af00      	add	r7, sp, #0
 8000f70:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f72:	6878      	ldr	r0, [r7, #4]
 8000f74:	f7ff ffa2 	bl	8000ebc <SysTick_Config>
 8000f78:	4603      	mov	r3, r0
}
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	3708      	adds	r7, #8
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bd80      	pop	{r7, pc}

08000f82 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000f82:	b580      	push	{r7, lr}
 8000f84:	b084      	sub	sp, #16
 8000f86:	af00      	add	r7, sp, #0
 8000f88:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f8e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8000f90:	f7ff feb6 	bl	8000d00 <HAL_GetTick>
 8000f94:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000f9c:	b2db      	uxtb	r3, r3
 8000f9e:	2b02      	cmp	r3, #2
 8000fa0:	d008      	beq.n	8000fb4 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	2280      	movs	r2, #128	; 0x80
 8000fa6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	2200      	movs	r2, #0
 8000fac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8000fb0:	2301      	movs	r3, #1
 8000fb2:	e052      	b.n	800105a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	681a      	ldr	r2, [r3, #0]
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	f022 0216 	bic.w	r2, r2, #22
 8000fc2:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	695a      	ldr	r2, [r3, #20]
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000fd2:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d103      	bne.n	8000fe4 <HAL_DMA_Abort+0x62>
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d007      	beq.n	8000ff4 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	681a      	ldr	r2, [r3, #0]
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	f022 0208 	bic.w	r2, r2, #8
 8000ff2:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	681a      	ldr	r2, [r3, #0]
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	f022 0201 	bic.w	r2, r2, #1
 8001002:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001004:	e013      	b.n	800102e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001006:	f7ff fe7b 	bl	8000d00 <HAL_GetTick>
 800100a:	4602      	mov	r2, r0
 800100c:	68bb      	ldr	r3, [r7, #8]
 800100e:	1ad3      	subs	r3, r2, r3
 8001010:	2b05      	cmp	r3, #5
 8001012:	d90c      	bls.n	800102e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	2220      	movs	r2, #32
 8001018:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	2203      	movs	r2, #3
 800101e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	2200      	movs	r2, #0
 8001026:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800102a:	2303      	movs	r3, #3
 800102c:	e015      	b.n	800105a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	f003 0301 	and.w	r3, r3, #1
 8001038:	2b00      	cmp	r3, #0
 800103a:	d1e4      	bne.n	8001006 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001040:	223f      	movs	r2, #63	; 0x3f
 8001042:	409a      	lsls	r2, r3
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	2201      	movs	r2, #1
 800104c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	2200      	movs	r2, #0
 8001054:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001058:	2300      	movs	r3, #0
}
 800105a:	4618      	mov	r0, r3
 800105c:	3710      	adds	r7, #16
 800105e:	46bd      	mov	sp, r7
 8001060:	bd80      	pop	{r7, pc}

08001062 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001062:	b480      	push	{r7}
 8001064:	b083      	sub	sp, #12
 8001066:	af00      	add	r7, sp, #0
 8001068:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001070:	b2db      	uxtb	r3, r3
 8001072:	2b02      	cmp	r3, #2
 8001074:	d004      	beq.n	8001080 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	2280      	movs	r2, #128	; 0x80
 800107a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800107c:	2301      	movs	r3, #1
 800107e:	e00c      	b.n	800109a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	2205      	movs	r2, #5
 8001084:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	681a      	ldr	r2, [r3, #0]
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	f022 0201 	bic.w	r2, r2, #1
 8001096:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001098:	2300      	movs	r3, #0
}
 800109a:	4618      	mov	r0, r3
 800109c:	370c      	adds	r7, #12
 800109e:	46bd      	mov	sp, r7
 80010a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a4:	4770      	bx	lr
	...

080010a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010a8:	b480      	push	{r7}
 80010aa:	b089      	sub	sp, #36	; 0x24
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
 80010b0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80010b2:	2300      	movs	r3, #0
 80010b4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80010b6:	2300      	movs	r3, #0
 80010b8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80010ba:	2300      	movs	r3, #0
 80010bc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80010be:	2300      	movs	r3, #0
 80010c0:	61fb      	str	r3, [r7, #28]
 80010c2:	e159      	b.n	8001378 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80010c4:	2201      	movs	r2, #1
 80010c6:	69fb      	ldr	r3, [r7, #28]
 80010c8:	fa02 f303 	lsl.w	r3, r2, r3
 80010cc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80010ce:	683b      	ldr	r3, [r7, #0]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	697a      	ldr	r2, [r7, #20]
 80010d4:	4013      	ands	r3, r2
 80010d6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80010d8:	693a      	ldr	r2, [r7, #16]
 80010da:	697b      	ldr	r3, [r7, #20]
 80010dc:	429a      	cmp	r2, r3
 80010de:	f040 8148 	bne.w	8001372 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80010e2:	683b      	ldr	r3, [r7, #0]
 80010e4:	685b      	ldr	r3, [r3, #4]
 80010e6:	f003 0303 	and.w	r3, r3, #3
 80010ea:	2b01      	cmp	r3, #1
 80010ec:	d005      	beq.n	80010fa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010ee:	683b      	ldr	r3, [r7, #0]
 80010f0:	685b      	ldr	r3, [r3, #4]
 80010f2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80010f6:	2b02      	cmp	r3, #2
 80010f8:	d130      	bne.n	800115c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	689b      	ldr	r3, [r3, #8]
 80010fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001100:	69fb      	ldr	r3, [r7, #28]
 8001102:	005b      	lsls	r3, r3, #1
 8001104:	2203      	movs	r2, #3
 8001106:	fa02 f303 	lsl.w	r3, r2, r3
 800110a:	43db      	mvns	r3, r3
 800110c:	69ba      	ldr	r2, [r7, #24]
 800110e:	4013      	ands	r3, r2
 8001110:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001112:	683b      	ldr	r3, [r7, #0]
 8001114:	68da      	ldr	r2, [r3, #12]
 8001116:	69fb      	ldr	r3, [r7, #28]
 8001118:	005b      	lsls	r3, r3, #1
 800111a:	fa02 f303 	lsl.w	r3, r2, r3
 800111e:	69ba      	ldr	r2, [r7, #24]
 8001120:	4313      	orrs	r3, r2
 8001122:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	69ba      	ldr	r2, [r7, #24]
 8001128:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	685b      	ldr	r3, [r3, #4]
 800112e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001130:	2201      	movs	r2, #1
 8001132:	69fb      	ldr	r3, [r7, #28]
 8001134:	fa02 f303 	lsl.w	r3, r2, r3
 8001138:	43db      	mvns	r3, r3
 800113a:	69ba      	ldr	r2, [r7, #24]
 800113c:	4013      	ands	r3, r2
 800113e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001140:	683b      	ldr	r3, [r7, #0]
 8001142:	685b      	ldr	r3, [r3, #4]
 8001144:	091b      	lsrs	r3, r3, #4
 8001146:	f003 0201 	and.w	r2, r3, #1
 800114a:	69fb      	ldr	r3, [r7, #28]
 800114c:	fa02 f303 	lsl.w	r3, r2, r3
 8001150:	69ba      	ldr	r2, [r7, #24]
 8001152:	4313      	orrs	r3, r2
 8001154:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	69ba      	ldr	r2, [r7, #24]
 800115a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800115c:	683b      	ldr	r3, [r7, #0]
 800115e:	685b      	ldr	r3, [r3, #4]
 8001160:	f003 0303 	and.w	r3, r3, #3
 8001164:	2b03      	cmp	r3, #3
 8001166:	d017      	beq.n	8001198 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	68db      	ldr	r3, [r3, #12]
 800116c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800116e:	69fb      	ldr	r3, [r7, #28]
 8001170:	005b      	lsls	r3, r3, #1
 8001172:	2203      	movs	r2, #3
 8001174:	fa02 f303 	lsl.w	r3, r2, r3
 8001178:	43db      	mvns	r3, r3
 800117a:	69ba      	ldr	r2, [r7, #24]
 800117c:	4013      	ands	r3, r2
 800117e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001180:	683b      	ldr	r3, [r7, #0]
 8001182:	689a      	ldr	r2, [r3, #8]
 8001184:	69fb      	ldr	r3, [r7, #28]
 8001186:	005b      	lsls	r3, r3, #1
 8001188:	fa02 f303 	lsl.w	r3, r2, r3
 800118c:	69ba      	ldr	r2, [r7, #24]
 800118e:	4313      	orrs	r3, r2
 8001190:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	69ba      	ldr	r2, [r7, #24]
 8001196:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001198:	683b      	ldr	r3, [r7, #0]
 800119a:	685b      	ldr	r3, [r3, #4]
 800119c:	f003 0303 	and.w	r3, r3, #3
 80011a0:	2b02      	cmp	r3, #2
 80011a2:	d123      	bne.n	80011ec <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80011a4:	69fb      	ldr	r3, [r7, #28]
 80011a6:	08da      	lsrs	r2, r3, #3
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	3208      	adds	r2, #8
 80011ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80011b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80011b2:	69fb      	ldr	r3, [r7, #28]
 80011b4:	f003 0307 	and.w	r3, r3, #7
 80011b8:	009b      	lsls	r3, r3, #2
 80011ba:	220f      	movs	r2, #15
 80011bc:	fa02 f303 	lsl.w	r3, r2, r3
 80011c0:	43db      	mvns	r3, r3
 80011c2:	69ba      	ldr	r2, [r7, #24]
 80011c4:	4013      	ands	r3, r2
 80011c6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80011c8:	683b      	ldr	r3, [r7, #0]
 80011ca:	691a      	ldr	r2, [r3, #16]
 80011cc:	69fb      	ldr	r3, [r7, #28]
 80011ce:	f003 0307 	and.w	r3, r3, #7
 80011d2:	009b      	lsls	r3, r3, #2
 80011d4:	fa02 f303 	lsl.w	r3, r2, r3
 80011d8:	69ba      	ldr	r2, [r7, #24]
 80011da:	4313      	orrs	r3, r2
 80011dc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80011de:	69fb      	ldr	r3, [r7, #28]
 80011e0:	08da      	lsrs	r2, r3, #3
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	3208      	adds	r2, #8
 80011e6:	69b9      	ldr	r1, [r7, #24]
 80011e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80011f2:	69fb      	ldr	r3, [r7, #28]
 80011f4:	005b      	lsls	r3, r3, #1
 80011f6:	2203      	movs	r2, #3
 80011f8:	fa02 f303 	lsl.w	r3, r2, r3
 80011fc:	43db      	mvns	r3, r3
 80011fe:	69ba      	ldr	r2, [r7, #24]
 8001200:	4013      	ands	r3, r2
 8001202:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001204:	683b      	ldr	r3, [r7, #0]
 8001206:	685b      	ldr	r3, [r3, #4]
 8001208:	f003 0203 	and.w	r2, r3, #3
 800120c:	69fb      	ldr	r3, [r7, #28]
 800120e:	005b      	lsls	r3, r3, #1
 8001210:	fa02 f303 	lsl.w	r3, r2, r3
 8001214:	69ba      	ldr	r2, [r7, #24]
 8001216:	4313      	orrs	r3, r2
 8001218:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	69ba      	ldr	r2, [r7, #24]
 800121e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001220:	683b      	ldr	r3, [r7, #0]
 8001222:	685b      	ldr	r3, [r3, #4]
 8001224:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001228:	2b00      	cmp	r3, #0
 800122a:	f000 80a2 	beq.w	8001372 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800122e:	2300      	movs	r3, #0
 8001230:	60fb      	str	r3, [r7, #12]
 8001232:	4b57      	ldr	r3, [pc, #348]	; (8001390 <HAL_GPIO_Init+0x2e8>)
 8001234:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001236:	4a56      	ldr	r2, [pc, #344]	; (8001390 <HAL_GPIO_Init+0x2e8>)
 8001238:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800123c:	6453      	str	r3, [r2, #68]	; 0x44
 800123e:	4b54      	ldr	r3, [pc, #336]	; (8001390 <HAL_GPIO_Init+0x2e8>)
 8001240:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001242:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001246:	60fb      	str	r3, [r7, #12]
 8001248:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800124a:	4a52      	ldr	r2, [pc, #328]	; (8001394 <HAL_GPIO_Init+0x2ec>)
 800124c:	69fb      	ldr	r3, [r7, #28]
 800124e:	089b      	lsrs	r3, r3, #2
 8001250:	3302      	adds	r3, #2
 8001252:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001256:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001258:	69fb      	ldr	r3, [r7, #28]
 800125a:	f003 0303 	and.w	r3, r3, #3
 800125e:	009b      	lsls	r3, r3, #2
 8001260:	220f      	movs	r2, #15
 8001262:	fa02 f303 	lsl.w	r3, r2, r3
 8001266:	43db      	mvns	r3, r3
 8001268:	69ba      	ldr	r2, [r7, #24]
 800126a:	4013      	ands	r3, r2
 800126c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	4a49      	ldr	r2, [pc, #292]	; (8001398 <HAL_GPIO_Init+0x2f0>)
 8001272:	4293      	cmp	r3, r2
 8001274:	d019      	beq.n	80012aa <HAL_GPIO_Init+0x202>
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	4a48      	ldr	r2, [pc, #288]	; (800139c <HAL_GPIO_Init+0x2f4>)
 800127a:	4293      	cmp	r3, r2
 800127c:	d013      	beq.n	80012a6 <HAL_GPIO_Init+0x1fe>
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	4a47      	ldr	r2, [pc, #284]	; (80013a0 <HAL_GPIO_Init+0x2f8>)
 8001282:	4293      	cmp	r3, r2
 8001284:	d00d      	beq.n	80012a2 <HAL_GPIO_Init+0x1fa>
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	4a46      	ldr	r2, [pc, #280]	; (80013a4 <HAL_GPIO_Init+0x2fc>)
 800128a:	4293      	cmp	r3, r2
 800128c:	d007      	beq.n	800129e <HAL_GPIO_Init+0x1f6>
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	4a45      	ldr	r2, [pc, #276]	; (80013a8 <HAL_GPIO_Init+0x300>)
 8001292:	4293      	cmp	r3, r2
 8001294:	d101      	bne.n	800129a <HAL_GPIO_Init+0x1f2>
 8001296:	2304      	movs	r3, #4
 8001298:	e008      	b.n	80012ac <HAL_GPIO_Init+0x204>
 800129a:	2307      	movs	r3, #7
 800129c:	e006      	b.n	80012ac <HAL_GPIO_Init+0x204>
 800129e:	2303      	movs	r3, #3
 80012a0:	e004      	b.n	80012ac <HAL_GPIO_Init+0x204>
 80012a2:	2302      	movs	r3, #2
 80012a4:	e002      	b.n	80012ac <HAL_GPIO_Init+0x204>
 80012a6:	2301      	movs	r3, #1
 80012a8:	e000      	b.n	80012ac <HAL_GPIO_Init+0x204>
 80012aa:	2300      	movs	r3, #0
 80012ac:	69fa      	ldr	r2, [r7, #28]
 80012ae:	f002 0203 	and.w	r2, r2, #3
 80012b2:	0092      	lsls	r2, r2, #2
 80012b4:	4093      	lsls	r3, r2
 80012b6:	69ba      	ldr	r2, [r7, #24]
 80012b8:	4313      	orrs	r3, r2
 80012ba:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80012bc:	4935      	ldr	r1, [pc, #212]	; (8001394 <HAL_GPIO_Init+0x2ec>)
 80012be:	69fb      	ldr	r3, [r7, #28]
 80012c0:	089b      	lsrs	r3, r3, #2
 80012c2:	3302      	adds	r3, #2
 80012c4:	69ba      	ldr	r2, [r7, #24]
 80012c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80012ca:	4b38      	ldr	r3, [pc, #224]	; (80013ac <HAL_GPIO_Init+0x304>)
 80012cc:	689b      	ldr	r3, [r3, #8]
 80012ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012d0:	693b      	ldr	r3, [r7, #16]
 80012d2:	43db      	mvns	r3, r3
 80012d4:	69ba      	ldr	r2, [r7, #24]
 80012d6:	4013      	ands	r3, r2
 80012d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80012da:	683b      	ldr	r3, [r7, #0]
 80012dc:	685b      	ldr	r3, [r3, #4]
 80012de:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d003      	beq.n	80012ee <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80012e6:	69ba      	ldr	r2, [r7, #24]
 80012e8:	693b      	ldr	r3, [r7, #16]
 80012ea:	4313      	orrs	r3, r2
 80012ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80012ee:	4a2f      	ldr	r2, [pc, #188]	; (80013ac <HAL_GPIO_Init+0x304>)
 80012f0:	69bb      	ldr	r3, [r7, #24]
 80012f2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80012f4:	4b2d      	ldr	r3, [pc, #180]	; (80013ac <HAL_GPIO_Init+0x304>)
 80012f6:	68db      	ldr	r3, [r3, #12]
 80012f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012fa:	693b      	ldr	r3, [r7, #16]
 80012fc:	43db      	mvns	r3, r3
 80012fe:	69ba      	ldr	r2, [r7, #24]
 8001300:	4013      	ands	r3, r2
 8001302:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001304:	683b      	ldr	r3, [r7, #0]
 8001306:	685b      	ldr	r3, [r3, #4]
 8001308:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800130c:	2b00      	cmp	r3, #0
 800130e:	d003      	beq.n	8001318 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001310:	69ba      	ldr	r2, [r7, #24]
 8001312:	693b      	ldr	r3, [r7, #16]
 8001314:	4313      	orrs	r3, r2
 8001316:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001318:	4a24      	ldr	r2, [pc, #144]	; (80013ac <HAL_GPIO_Init+0x304>)
 800131a:	69bb      	ldr	r3, [r7, #24]
 800131c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800131e:	4b23      	ldr	r3, [pc, #140]	; (80013ac <HAL_GPIO_Init+0x304>)
 8001320:	685b      	ldr	r3, [r3, #4]
 8001322:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001324:	693b      	ldr	r3, [r7, #16]
 8001326:	43db      	mvns	r3, r3
 8001328:	69ba      	ldr	r2, [r7, #24]
 800132a:	4013      	ands	r3, r2
 800132c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800132e:	683b      	ldr	r3, [r7, #0]
 8001330:	685b      	ldr	r3, [r3, #4]
 8001332:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001336:	2b00      	cmp	r3, #0
 8001338:	d003      	beq.n	8001342 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800133a:	69ba      	ldr	r2, [r7, #24]
 800133c:	693b      	ldr	r3, [r7, #16]
 800133e:	4313      	orrs	r3, r2
 8001340:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001342:	4a1a      	ldr	r2, [pc, #104]	; (80013ac <HAL_GPIO_Init+0x304>)
 8001344:	69bb      	ldr	r3, [r7, #24]
 8001346:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001348:	4b18      	ldr	r3, [pc, #96]	; (80013ac <HAL_GPIO_Init+0x304>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800134e:	693b      	ldr	r3, [r7, #16]
 8001350:	43db      	mvns	r3, r3
 8001352:	69ba      	ldr	r2, [r7, #24]
 8001354:	4013      	ands	r3, r2
 8001356:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001358:	683b      	ldr	r3, [r7, #0]
 800135a:	685b      	ldr	r3, [r3, #4]
 800135c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001360:	2b00      	cmp	r3, #0
 8001362:	d003      	beq.n	800136c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001364:	69ba      	ldr	r2, [r7, #24]
 8001366:	693b      	ldr	r3, [r7, #16]
 8001368:	4313      	orrs	r3, r2
 800136a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800136c:	4a0f      	ldr	r2, [pc, #60]	; (80013ac <HAL_GPIO_Init+0x304>)
 800136e:	69bb      	ldr	r3, [r7, #24]
 8001370:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001372:	69fb      	ldr	r3, [r7, #28]
 8001374:	3301      	adds	r3, #1
 8001376:	61fb      	str	r3, [r7, #28]
 8001378:	69fb      	ldr	r3, [r7, #28]
 800137a:	2b0f      	cmp	r3, #15
 800137c:	f67f aea2 	bls.w	80010c4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001380:	bf00      	nop
 8001382:	bf00      	nop
 8001384:	3724      	adds	r7, #36	; 0x24
 8001386:	46bd      	mov	sp, r7
 8001388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138c:	4770      	bx	lr
 800138e:	bf00      	nop
 8001390:	40023800 	.word	0x40023800
 8001394:	40013800 	.word	0x40013800
 8001398:	40020000 	.word	0x40020000
 800139c:	40020400 	.word	0x40020400
 80013a0:	40020800 	.word	0x40020800
 80013a4:	40020c00 	.word	0x40020c00
 80013a8:	40021000 	.word	0x40021000
 80013ac:	40013c00 	.word	0x40013c00

080013b0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80013b0:	b480      	push	{r7}
 80013b2:	b083      	sub	sp, #12
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
 80013b8:	460b      	mov	r3, r1
 80013ba:	807b      	strh	r3, [r7, #2]
 80013bc:	4613      	mov	r3, r2
 80013be:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80013c0:	787b      	ldrb	r3, [r7, #1]
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d003      	beq.n	80013ce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80013c6:	887a      	ldrh	r2, [r7, #2]
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80013cc:	e003      	b.n	80013d6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80013ce:	887b      	ldrh	r3, [r7, #2]
 80013d0:	041a      	lsls	r2, r3, #16
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	619a      	str	r2, [r3, #24]
}
 80013d6:	bf00      	nop
 80013d8:	370c      	adds	r7, #12
 80013da:	46bd      	mov	sp, r7
 80013dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e0:	4770      	bx	lr

080013e2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80013e2:	b480      	push	{r7}
 80013e4:	b085      	sub	sp, #20
 80013e6:	af00      	add	r7, sp, #0
 80013e8:	6078      	str	r0, [r7, #4]
 80013ea:	460b      	mov	r3, r1
 80013ec:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	695b      	ldr	r3, [r3, #20]
 80013f2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80013f4:	887a      	ldrh	r2, [r7, #2]
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	4013      	ands	r3, r2
 80013fa:	041a      	lsls	r2, r3, #16
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	43d9      	mvns	r1, r3
 8001400:	887b      	ldrh	r3, [r7, #2]
 8001402:	400b      	ands	r3, r1
 8001404:	431a      	orrs	r2, r3
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	619a      	str	r2, [r3, #24]
}
 800140a:	bf00      	nop
 800140c:	3714      	adds	r7, #20
 800140e:	46bd      	mov	sp, r7
 8001410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001414:	4770      	bx	lr
	...

08001418 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b084      	sub	sp, #16
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	2b00      	cmp	r3, #0
 8001424:	d101      	bne.n	800142a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001426:	2301      	movs	r3, #1
 8001428:	e12b      	b.n	8001682 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001430:	b2db      	uxtb	r3, r3
 8001432:	2b00      	cmp	r3, #0
 8001434:	d106      	bne.n	8001444 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	2200      	movs	r2, #0
 800143a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800143e:	6878      	ldr	r0, [r7, #4]
 8001440:	f7ff f8fc 	bl	800063c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	2224      	movs	r2, #36	; 0x24
 8001448:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	681a      	ldr	r2, [r3, #0]
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	f022 0201 	bic.w	r2, r2, #1
 800145a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	681a      	ldr	r2, [r3, #0]
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800146a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	681a      	ldr	r2, [r3, #0]
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800147a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800147c:	f000 fd40 	bl	8001f00 <HAL_RCC_GetPCLK1Freq>
 8001480:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	685b      	ldr	r3, [r3, #4]
 8001486:	4a81      	ldr	r2, [pc, #516]	; (800168c <HAL_I2C_Init+0x274>)
 8001488:	4293      	cmp	r3, r2
 800148a:	d807      	bhi.n	800149c <HAL_I2C_Init+0x84>
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	4a80      	ldr	r2, [pc, #512]	; (8001690 <HAL_I2C_Init+0x278>)
 8001490:	4293      	cmp	r3, r2
 8001492:	bf94      	ite	ls
 8001494:	2301      	movls	r3, #1
 8001496:	2300      	movhi	r3, #0
 8001498:	b2db      	uxtb	r3, r3
 800149a:	e006      	b.n	80014aa <HAL_I2C_Init+0x92>
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	4a7d      	ldr	r2, [pc, #500]	; (8001694 <HAL_I2C_Init+0x27c>)
 80014a0:	4293      	cmp	r3, r2
 80014a2:	bf94      	ite	ls
 80014a4:	2301      	movls	r3, #1
 80014a6:	2300      	movhi	r3, #0
 80014a8:	b2db      	uxtb	r3, r3
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d001      	beq.n	80014b2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80014ae:	2301      	movs	r3, #1
 80014b0:	e0e7      	b.n	8001682 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	4a78      	ldr	r2, [pc, #480]	; (8001698 <HAL_I2C_Init+0x280>)
 80014b6:	fba2 2303 	umull	r2, r3, r2, r3
 80014ba:	0c9b      	lsrs	r3, r3, #18
 80014bc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	685b      	ldr	r3, [r3, #4]
 80014c4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	68ba      	ldr	r2, [r7, #8]
 80014ce:	430a      	orrs	r2, r1
 80014d0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	6a1b      	ldr	r3, [r3, #32]
 80014d8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	685b      	ldr	r3, [r3, #4]
 80014e0:	4a6a      	ldr	r2, [pc, #424]	; (800168c <HAL_I2C_Init+0x274>)
 80014e2:	4293      	cmp	r3, r2
 80014e4:	d802      	bhi.n	80014ec <HAL_I2C_Init+0xd4>
 80014e6:	68bb      	ldr	r3, [r7, #8]
 80014e8:	3301      	adds	r3, #1
 80014ea:	e009      	b.n	8001500 <HAL_I2C_Init+0xe8>
 80014ec:	68bb      	ldr	r3, [r7, #8]
 80014ee:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80014f2:	fb02 f303 	mul.w	r3, r2, r3
 80014f6:	4a69      	ldr	r2, [pc, #420]	; (800169c <HAL_I2C_Init+0x284>)
 80014f8:	fba2 2303 	umull	r2, r3, r2, r3
 80014fc:	099b      	lsrs	r3, r3, #6
 80014fe:	3301      	adds	r3, #1
 8001500:	687a      	ldr	r2, [r7, #4]
 8001502:	6812      	ldr	r2, [r2, #0]
 8001504:	430b      	orrs	r3, r1
 8001506:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	69db      	ldr	r3, [r3, #28]
 800150e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001512:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	685b      	ldr	r3, [r3, #4]
 800151a:	495c      	ldr	r1, [pc, #368]	; (800168c <HAL_I2C_Init+0x274>)
 800151c:	428b      	cmp	r3, r1
 800151e:	d819      	bhi.n	8001554 <HAL_I2C_Init+0x13c>
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	1e59      	subs	r1, r3, #1
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	685b      	ldr	r3, [r3, #4]
 8001528:	005b      	lsls	r3, r3, #1
 800152a:	fbb1 f3f3 	udiv	r3, r1, r3
 800152e:	1c59      	adds	r1, r3, #1
 8001530:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001534:	400b      	ands	r3, r1
 8001536:	2b00      	cmp	r3, #0
 8001538:	d00a      	beq.n	8001550 <HAL_I2C_Init+0x138>
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	1e59      	subs	r1, r3, #1
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	685b      	ldr	r3, [r3, #4]
 8001542:	005b      	lsls	r3, r3, #1
 8001544:	fbb1 f3f3 	udiv	r3, r1, r3
 8001548:	3301      	adds	r3, #1
 800154a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800154e:	e051      	b.n	80015f4 <HAL_I2C_Init+0x1dc>
 8001550:	2304      	movs	r3, #4
 8001552:	e04f      	b.n	80015f4 <HAL_I2C_Init+0x1dc>
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	689b      	ldr	r3, [r3, #8]
 8001558:	2b00      	cmp	r3, #0
 800155a:	d111      	bne.n	8001580 <HAL_I2C_Init+0x168>
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	1e58      	subs	r0, r3, #1
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	6859      	ldr	r1, [r3, #4]
 8001564:	460b      	mov	r3, r1
 8001566:	005b      	lsls	r3, r3, #1
 8001568:	440b      	add	r3, r1
 800156a:	fbb0 f3f3 	udiv	r3, r0, r3
 800156e:	3301      	adds	r3, #1
 8001570:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001574:	2b00      	cmp	r3, #0
 8001576:	bf0c      	ite	eq
 8001578:	2301      	moveq	r3, #1
 800157a:	2300      	movne	r3, #0
 800157c:	b2db      	uxtb	r3, r3
 800157e:	e012      	b.n	80015a6 <HAL_I2C_Init+0x18e>
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	1e58      	subs	r0, r3, #1
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	6859      	ldr	r1, [r3, #4]
 8001588:	460b      	mov	r3, r1
 800158a:	009b      	lsls	r3, r3, #2
 800158c:	440b      	add	r3, r1
 800158e:	0099      	lsls	r1, r3, #2
 8001590:	440b      	add	r3, r1
 8001592:	fbb0 f3f3 	udiv	r3, r0, r3
 8001596:	3301      	adds	r3, #1
 8001598:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800159c:	2b00      	cmp	r3, #0
 800159e:	bf0c      	ite	eq
 80015a0:	2301      	moveq	r3, #1
 80015a2:	2300      	movne	r3, #0
 80015a4:	b2db      	uxtb	r3, r3
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d001      	beq.n	80015ae <HAL_I2C_Init+0x196>
 80015aa:	2301      	movs	r3, #1
 80015ac:	e022      	b.n	80015f4 <HAL_I2C_Init+0x1dc>
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	689b      	ldr	r3, [r3, #8]
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d10e      	bne.n	80015d4 <HAL_I2C_Init+0x1bc>
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	1e58      	subs	r0, r3, #1
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	6859      	ldr	r1, [r3, #4]
 80015be:	460b      	mov	r3, r1
 80015c0:	005b      	lsls	r3, r3, #1
 80015c2:	440b      	add	r3, r1
 80015c4:	fbb0 f3f3 	udiv	r3, r0, r3
 80015c8:	3301      	adds	r3, #1
 80015ca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80015ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80015d2:	e00f      	b.n	80015f4 <HAL_I2C_Init+0x1dc>
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	1e58      	subs	r0, r3, #1
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	6859      	ldr	r1, [r3, #4]
 80015dc:	460b      	mov	r3, r1
 80015de:	009b      	lsls	r3, r3, #2
 80015e0:	440b      	add	r3, r1
 80015e2:	0099      	lsls	r1, r3, #2
 80015e4:	440b      	add	r3, r1
 80015e6:	fbb0 f3f3 	udiv	r3, r0, r3
 80015ea:	3301      	adds	r3, #1
 80015ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80015f0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80015f4:	6879      	ldr	r1, [r7, #4]
 80015f6:	6809      	ldr	r1, [r1, #0]
 80015f8:	4313      	orrs	r3, r2
 80015fa:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	69da      	ldr	r2, [r3, #28]
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	6a1b      	ldr	r3, [r3, #32]
 800160e:	431a      	orrs	r2, r3
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	430a      	orrs	r2, r1
 8001616:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	689b      	ldr	r3, [r3, #8]
 800161e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001622:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001626:	687a      	ldr	r2, [r7, #4]
 8001628:	6911      	ldr	r1, [r2, #16]
 800162a:	687a      	ldr	r2, [r7, #4]
 800162c:	68d2      	ldr	r2, [r2, #12]
 800162e:	4311      	orrs	r1, r2
 8001630:	687a      	ldr	r2, [r7, #4]
 8001632:	6812      	ldr	r2, [r2, #0]
 8001634:	430b      	orrs	r3, r1
 8001636:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	68db      	ldr	r3, [r3, #12]
 800163e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	695a      	ldr	r2, [r3, #20]
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	699b      	ldr	r3, [r3, #24]
 800164a:	431a      	orrs	r2, r3
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	430a      	orrs	r2, r1
 8001652:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	681a      	ldr	r2, [r3, #0]
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	f042 0201 	orr.w	r2, r2, #1
 8001662:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	2200      	movs	r2, #0
 8001668:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	2220      	movs	r2, #32
 800166e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	2200      	movs	r2, #0
 8001676:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	2200      	movs	r2, #0
 800167c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001680:	2300      	movs	r3, #0
}
 8001682:	4618      	mov	r0, r3
 8001684:	3710      	adds	r7, #16
 8001686:	46bd      	mov	sp, r7
 8001688:	bd80      	pop	{r7, pc}
 800168a:	bf00      	nop
 800168c:	000186a0 	.word	0x000186a0
 8001690:	001e847f 	.word	0x001e847f
 8001694:	003d08ff 	.word	0x003d08ff
 8001698:	431bde83 	.word	0x431bde83
 800169c:	10624dd3 	.word	0x10624dd3

080016a0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b086      	sub	sp, #24
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d101      	bne.n	80016b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80016ae:	2301      	movs	r3, #1
 80016b0:	e267      	b.n	8001b82 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f003 0301 	and.w	r3, r3, #1
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d075      	beq.n	80017aa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80016be:	4b88      	ldr	r3, [pc, #544]	; (80018e0 <HAL_RCC_OscConfig+0x240>)
 80016c0:	689b      	ldr	r3, [r3, #8]
 80016c2:	f003 030c 	and.w	r3, r3, #12
 80016c6:	2b04      	cmp	r3, #4
 80016c8:	d00c      	beq.n	80016e4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80016ca:	4b85      	ldr	r3, [pc, #532]	; (80018e0 <HAL_RCC_OscConfig+0x240>)
 80016cc:	689b      	ldr	r3, [r3, #8]
 80016ce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80016d2:	2b08      	cmp	r3, #8
 80016d4:	d112      	bne.n	80016fc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80016d6:	4b82      	ldr	r3, [pc, #520]	; (80018e0 <HAL_RCC_OscConfig+0x240>)
 80016d8:	685b      	ldr	r3, [r3, #4]
 80016da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80016de:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80016e2:	d10b      	bne.n	80016fc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016e4:	4b7e      	ldr	r3, [pc, #504]	; (80018e0 <HAL_RCC_OscConfig+0x240>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d05b      	beq.n	80017a8 <HAL_RCC_OscConfig+0x108>
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	685b      	ldr	r3, [r3, #4]
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d157      	bne.n	80017a8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80016f8:	2301      	movs	r3, #1
 80016fa:	e242      	b.n	8001b82 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	685b      	ldr	r3, [r3, #4]
 8001700:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001704:	d106      	bne.n	8001714 <HAL_RCC_OscConfig+0x74>
 8001706:	4b76      	ldr	r3, [pc, #472]	; (80018e0 <HAL_RCC_OscConfig+0x240>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	4a75      	ldr	r2, [pc, #468]	; (80018e0 <HAL_RCC_OscConfig+0x240>)
 800170c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001710:	6013      	str	r3, [r2, #0]
 8001712:	e01d      	b.n	8001750 <HAL_RCC_OscConfig+0xb0>
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	685b      	ldr	r3, [r3, #4]
 8001718:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800171c:	d10c      	bne.n	8001738 <HAL_RCC_OscConfig+0x98>
 800171e:	4b70      	ldr	r3, [pc, #448]	; (80018e0 <HAL_RCC_OscConfig+0x240>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	4a6f      	ldr	r2, [pc, #444]	; (80018e0 <HAL_RCC_OscConfig+0x240>)
 8001724:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001728:	6013      	str	r3, [r2, #0]
 800172a:	4b6d      	ldr	r3, [pc, #436]	; (80018e0 <HAL_RCC_OscConfig+0x240>)
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	4a6c      	ldr	r2, [pc, #432]	; (80018e0 <HAL_RCC_OscConfig+0x240>)
 8001730:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001734:	6013      	str	r3, [r2, #0]
 8001736:	e00b      	b.n	8001750 <HAL_RCC_OscConfig+0xb0>
 8001738:	4b69      	ldr	r3, [pc, #420]	; (80018e0 <HAL_RCC_OscConfig+0x240>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	4a68      	ldr	r2, [pc, #416]	; (80018e0 <HAL_RCC_OscConfig+0x240>)
 800173e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001742:	6013      	str	r3, [r2, #0]
 8001744:	4b66      	ldr	r3, [pc, #408]	; (80018e0 <HAL_RCC_OscConfig+0x240>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	4a65      	ldr	r2, [pc, #404]	; (80018e0 <HAL_RCC_OscConfig+0x240>)
 800174a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800174e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	685b      	ldr	r3, [r3, #4]
 8001754:	2b00      	cmp	r3, #0
 8001756:	d013      	beq.n	8001780 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001758:	f7ff fad2 	bl	8000d00 <HAL_GetTick>
 800175c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800175e:	e008      	b.n	8001772 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001760:	f7ff face 	bl	8000d00 <HAL_GetTick>
 8001764:	4602      	mov	r2, r0
 8001766:	693b      	ldr	r3, [r7, #16]
 8001768:	1ad3      	subs	r3, r2, r3
 800176a:	2b64      	cmp	r3, #100	; 0x64
 800176c:	d901      	bls.n	8001772 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800176e:	2303      	movs	r3, #3
 8001770:	e207      	b.n	8001b82 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001772:	4b5b      	ldr	r3, [pc, #364]	; (80018e0 <HAL_RCC_OscConfig+0x240>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800177a:	2b00      	cmp	r3, #0
 800177c:	d0f0      	beq.n	8001760 <HAL_RCC_OscConfig+0xc0>
 800177e:	e014      	b.n	80017aa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001780:	f7ff fabe 	bl	8000d00 <HAL_GetTick>
 8001784:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001786:	e008      	b.n	800179a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001788:	f7ff faba 	bl	8000d00 <HAL_GetTick>
 800178c:	4602      	mov	r2, r0
 800178e:	693b      	ldr	r3, [r7, #16]
 8001790:	1ad3      	subs	r3, r2, r3
 8001792:	2b64      	cmp	r3, #100	; 0x64
 8001794:	d901      	bls.n	800179a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001796:	2303      	movs	r3, #3
 8001798:	e1f3      	b.n	8001b82 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800179a:	4b51      	ldr	r3, [pc, #324]	; (80018e0 <HAL_RCC_OscConfig+0x240>)
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d1f0      	bne.n	8001788 <HAL_RCC_OscConfig+0xe8>
 80017a6:	e000      	b.n	80017aa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	f003 0302 	and.w	r3, r3, #2
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d063      	beq.n	800187e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80017b6:	4b4a      	ldr	r3, [pc, #296]	; (80018e0 <HAL_RCC_OscConfig+0x240>)
 80017b8:	689b      	ldr	r3, [r3, #8]
 80017ba:	f003 030c 	and.w	r3, r3, #12
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d00b      	beq.n	80017da <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80017c2:	4b47      	ldr	r3, [pc, #284]	; (80018e0 <HAL_RCC_OscConfig+0x240>)
 80017c4:	689b      	ldr	r3, [r3, #8]
 80017c6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80017ca:	2b08      	cmp	r3, #8
 80017cc:	d11c      	bne.n	8001808 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80017ce:	4b44      	ldr	r3, [pc, #272]	; (80018e0 <HAL_RCC_OscConfig+0x240>)
 80017d0:	685b      	ldr	r3, [r3, #4]
 80017d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d116      	bne.n	8001808 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017da:	4b41      	ldr	r3, [pc, #260]	; (80018e0 <HAL_RCC_OscConfig+0x240>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	f003 0302 	and.w	r3, r3, #2
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d005      	beq.n	80017f2 <HAL_RCC_OscConfig+0x152>
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	68db      	ldr	r3, [r3, #12]
 80017ea:	2b01      	cmp	r3, #1
 80017ec:	d001      	beq.n	80017f2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80017ee:	2301      	movs	r3, #1
 80017f0:	e1c7      	b.n	8001b82 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017f2:	4b3b      	ldr	r3, [pc, #236]	; (80018e0 <HAL_RCC_OscConfig+0x240>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	691b      	ldr	r3, [r3, #16]
 80017fe:	00db      	lsls	r3, r3, #3
 8001800:	4937      	ldr	r1, [pc, #220]	; (80018e0 <HAL_RCC_OscConfig+0x240>)
 8001802:	4313      	orrs	r3, r2
 8001804:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001806:	e03a      	b.n	800187e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	68db      	ldr	r3, [r3, #12]
 800180c:	2b00      	cmp	r3, #0
 800180e:	d020      	beq.n	8001852 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001810:	4b34      	ldr	r3, [pc, #208]	; (80018e4 <HAL_RCC_OscConfig+0x244>)
 8001812:	2201      	movs	r2, #1
 8001814:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001816:	f7ff fa73 	bl	8000d00 <HAL_GetTick>
 800181a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800181c:	e008      	b.n	8001830 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800181e:	f7ff fa6f 	bl	8000d00 <HAL_GetTick>
 8001822:	4602      	mov	r2, r0
 8001824:	693b      	ldr	r3, [r7, #16]
 8001826:	1ad3      	subs	r3, r2, r3
 8001828:	2b02      	cmp	r3, #2
 800182a:	d901      	bls.n	8001830 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800182c:	2303      	movs	r3, #3
 800182e:	e1a8      	b.n	8001b82 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001830:	4b2b      	ldr	r3, [pc, #172]	; (80018e0 <HAL_RCC_OscConfig+0x240>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	f003 0302 	and.w	r3, r3, #2
 8001838:	2b00      	cmp	r3, #0
 800183a:	d0f0      	beq.n	800181e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800183c:	4b28      	ldr	r3, [pc, #160]	; (80018e0 <HAL_RCC_OscConfig+0x240>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	691b      	ldr	r3, [r3, #16]
 8001848:	00db      	lsls	r3, r3, #3
 800184a:	4925      	ldr	r1, [pc, #148]	; (80018e0 <HAL_RCC_OscConfig+0x240>)
 800184c:	4313      	orrs	r3, r2
 800184e:	600b      	str	r3, [r1, #0]
 8001850:	e015      	b.n	800187e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001852:	4b24      	ldr	r3, [pc, #144]	; (80018e4 <HAL_RCC_OscConfig+0x244>)
 8001854:	2200      	movs	r2, #0
 8001856:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001858:	f7ff fa52 	bl	8000d00 <HAL_GetTick>
 800185c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800185e:	e008      	b.n	8001872 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001860:	f7ff fa4e 	bl	8000d00 <HAL_GetTick>
 8001864:	4602      	mov	r2, r0
 8001866:	693b      	ldr	r3, [r7, #16]
 8001868:	1ad3      	subs	r3, r2, r3
 800186a:	2b02      	cmp	r3, #2
 800186c:	d901      	bls.n	8001872 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800186e:	2303      	movs	r3, #3
 8001870:	e187      	b.n	8001b82 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001872:	4b1b      	ldr	r3, [pc, #108]	; (80018e0 <HAL_RCC_OscConfig+0x240>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f003 0302 	and.w	r3, r3, #2
 800187a:	2b00      	cmp	r3, #0
 800187c:	d1f0      	bne.n	8001860 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f003 0308 	and.w	r3, r3, #8
 8001886:	2b00      	cmp	r3, #0
 8001888:	d036      	beq.n	80018f8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	695b      	ldr	r3, [r3, #20]
 800188e:	2b00      	cmp	r3, #0
 8001890:	d016      	beq.n	80018c0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001892:	4b15      	ldr	r3, [pc, #84]	; (80018e8 <HAL_RCC_OscConfig+0x248>)
 8001894:	2201      	movs	r2, #1
 8001896:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001898:	f7ff fa32 	bl	8000d00 <HAL_GetTick>
 800189c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800189e:	e008      	b.n	80018b2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80018a0:	f7ff fa2e 	bl	8000d00 <HAL_GetTick>
 80018a4:	4602      	mov	r2, r0
 80018a6:	693b      	ldr	r3, [r7, #16]
 80018a8:	1ad3      	subs	r3, r2, r3
 80018aa:	2b02      	cmp	r3, #2
 80018ac:	d901      	bls.n	80018b2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80018ae:	2303      	movs	r3, #3
 80018b0:	e167      	b.n	8001b82 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80018b2:	4b0b      	ldr	r3, [pc, #44]	; (80018e0 <HAL_RCC_OscConfig+0x240>)
 80018b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80018b6:	f003 0302 	and.w	r3, r3, #2
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d0f0      	beq.n	80018a0 <HAL_RCC_OscConfig+0x200>
 80018be:	e01b      	b.n	80018f8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80018c0:	4b09      	ldr	r3, [pc, #36]	; (80018e8 <HAL_RCC_OscConfig+0x248>)
 80018c2:	2200      	movs	r2, #0
 80018c4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018c6:	f7ff fa1b 	bl	8000d00 <HAL_GetTick>
 80018ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80018cc:	e00e      	b.n	80018ec <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80018ce:	f7ff fa17 	bl	8000d00 <HAL_GetTick>
 80018d2:	4602      	mov	r2, r0
 80018d4:	693b      	ldr	r3, [r7, #16]
 80018d6:	1ad3      	subs	r3, r2, r3
 80018d8:	2b02      	cmp	r3, #2
 80018da:	d907      	bls.n	80018ec <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80018dc:	2303      	movs	r3, #3
 80018de:	e150      	b.n	8001b82 <HAL_RCC_OscConfig+0x4e2>
 80018e0:	40023800 	.word	0x40023800
 80018e4:	42470000 	.word	0x42470000
 80018e8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80018ec:	4b88      	ldr	r3, [pc, #544]	; (8001b10 <HAL_RCC_OscConfig+0x470>)
 80018ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80018f0:	f003 0302 	and.w	r3, r3, #2
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d1ea      	bne.n	80018ce <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	f003 0304 	and.w	r3, r3, #4
 8001900:	2b00      	cmp	r3, #0
 8001902:	f000 8097 	beq.w	8001a34 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001906:	2300      	movs	r3, #0
 8001908:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800190a:	4b81      	ldr	r3, [pc, #516]	; (8001b10 <HAL_RCC_OscConfig+0x470>)
 800190c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800190e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001912:	2b00      	cmp	r3, #0
 8001914:	d10f      	bne.n	8001936 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001916:	2300      	movs	r3, #0
 8001918:	60bb      	str	r3, [r7, #8]
 800191a:	4b7d      	ldr	r3, [pc, #500]	; (8001b10 <HAL_RCC_OscConfig+0x470>)
 800191c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800191e:	4a7c      	ldr	r2, [pc, #496]	; (8001b10 <HAL_RCC_OscConfig+0x470>)
 8001920:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001924:	6413      	str	r3, [r2, #64]	; 0x40
 8001926:	4b7a      	ldr	r3, [pc, #488]	; (8001b10 <HAL_RCC_OscConfig+0x470>)
 8001928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800192a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800192e:	60bb      	str	r3, [r7, #8]
 8001930:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001932:	2301      	movs	r3, #1
 8001934:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001936:	4b77      	ldr	r3, [pc, #476]	; (8001b14 <HAL_RCC_OscConfig+0x474>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800193e:	2b00      	cmp	r3, #0
 8001940:	d118      	bne.n	8001974 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001942:	4b74      	ldr	r3, [pc, #464]	; (8001b14 <HAL_RCC_OscConfig+0x474>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	4a73      	ldr	r2, [pc, #460]	; (8001b14 <HAL_RCC_OscConfig+0x474>)
 8001948:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800194c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800194e:	f7ff f9d7 	bl	8000d00 <HAL_GetTick>
 8001952:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001954:	e008      	b.n	8001968 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001956:	f7ff f9d3 	bl	8000d00 <HAL_GetTick>
 800195a:	4602      	mov	r2, r0
 800195c:	693b      	ldr	r3, [r7, #16]
 800195e:	1ad3      	subs	r3, r2, r3
 8001960:	2b02      	cmp	r3, #2
 8001962:	d901      	bls.n	8001968 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001964:	2303      	movs	r3, #3
 8001966:	e10c      	b.n	8001b82 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001968:	4b6a      	ldr	r3, [pc, #424]	; (8001b14 <HAL_RCC_OscConfig+0x474>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001970:	2b00      	cmp	r3, #0
 8001972:	d0f0      	beq.n	8001956 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	689b      	ldr	r3, [r3, #8]
 8001978:	2b01      	cmp	r3, #1
 800197a:	d106      	bne.n	800198a <HAL_RCC_OscConfig+0x2ea>
 800197c:	4b64      	ldr	r3, [pc, #400]	; (8001b10 <HAL_RCC_OscConfig+0x470>)
 800197e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001980:	4a63      	ldr	r2, [pc, #396]	; (8001b10 <HAL_RCC_OscConfig+0x470>)
 8001982:	f043 0301 	orr.w	r3, r3, #1
 8001986:	6713      	str	r3, [r2, #112]	; 0x70
 8001988:	e01c      	b.n	80019c4 <HAL_RCC_OscConfig+0x324>
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	689b      	ldr	r3, [r3, #8]
 800198e:	2b05      	cmp	r3, #5
 8001990:	d10c      	bne.n	80019ac <HAL_RCC_OscConfig+0x30c>
 8001992:	4b5f      	ldr	r3, [pc, #380]	; (8001b10 <HAL_RCC_OscConfig+0x470>)
 8001994:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001996:	4a5e      	ldr	r2, [pc, #376]	; (8001b10 <HAL_RCC_OscConfig+0x470>)
 8001998:	f043 0304 	orr.w	r3, r3, #4
 800199c:	6713      	str	r3, [r2, #112]	; 0x70
 800199e:	4b5c      	ldr	r3, [pc, #368]	; (8001b10 <HAL_RCC_OscConfig+0x470>)
 80019a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019a2:	4a5b      	ldr	r2, [pc, #364]	; (8001b10 <HAL_RCC_OscConfig+0x470>)
 80019a4:	f043 0301 	orr.w	r3, r3, #1
 80019a8:	6713      	str	r3, [r2, #112]	; 0x70
 80019aa:	e00b      	b.n	80019c4 <HAL_RCC_OscConfig+0x324>
 80019ac:	4b58      	ldr	r3, [pc, #352]	; (8001b10 <HAL_RCC_OscConfig+0x470>)
 80019ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019b0:	4a57      	ldr	r2, [pc, #348]	; (8001b10 <HAL_RCC_OscConfig+0x470>)
 80019b2:	f023 0301 	bic.w	r3, r3, #1
 80019b6:	6713      	str	r3, [r2, #112]	; 0x70
 80019b8:	4b55      	ldr	r3, [pc, #340]	; (8001b10 <HAL_RCC_OscConfig+0x470>)
 80019ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019bc:	4a54      	ldr	r2, [pc, #336]	; (8001b10 <HAL_RCC_OscConfig+0x470>)
 80019be:	f023 0304 	bic.w	r3, r3, #4
 80019c2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	689b      	ldr	r3, [r3, #8]
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d015      	beq.n	80019f8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019cc:	f7ff f998 	bl	8000d00 <HAL_GetTick>
 80019d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019d2:	e00a      	b.n	80019ea <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80019d4:	f7ff f994 	bl	8000d00 <HAL_GetTick>
 80019d8:	4602      	mov	r2, r0
 80019da:	693b      	ldr	r3, [r7, #16]
 80019dc:	1ad3      	subs	r3, r2, r3
 80019de:	f241 3288 	movw	r2, #5000	; 0x1388
 80019e2:	4293      	cmp	r3, r2
 80019e4:	d901      	bls.n	80019ea <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80019e6:	2303      	movs	r3, #3
 80019e8:	e0cb      	b.n	8001b82 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019ea:	4b49      	ldr	r3, [pc, #292]	; (8001b10 <HAL_RCC_OscConfig+0x470>)
 80019ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019ee:	f003 0302 	and.w	r3, r3, #2
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d0ee      	beq.n	80019d4 <HAL_RCC_OscConfig+0x334>
 80019f6:	e014      	b.n	8001a22 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019f8:	f7ff f982 	bl	8000d00 <HAL_GetTick>
 80019fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80019fe:	e00a      	b.n	8001a16 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a00:	f7ff f97e 	bl	8000d00 <HAL_GetTick>
 8001a04:	4602      	mov	r2, r0
 8001a06:	693b      	ldr	r3, [r7, #16]
 8001a08:	1ad3      	subs	r3, r2, r3
 8001a0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a0e:	4293      	cmp	r3, r2
 8001a10:	d901      	bls.n	8001a16 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001a12:	2303      	movs	r3, #3
 8001a14:	e0b5      	b.n	8001b82 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a16:	4b3e      	ldr	r3, [pc, #248]	; (8001b10 <HAL_RCC_OscConfig+0x470>)
 8001a18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a1a:	f003 0302 	and.w	r3, r3, #2
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d1ee      	bne.n	8001a00 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001a22:	7dfb      	ldrb	r3, [r7, #23]
 8001a24:	2b01      	cmp	r3, #1
 8001a26:	d105      	bne.n	8001a34 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a28:	4b39      	ldr	r3, [pc, #228]	; (8001b10 <HAL_RCC_OscConfig+0x470>)
 8001a2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a2c:	4a38      	ldr	r2, [pc, #224]	; (8001b10 <HAL_RCC_OscConfig+0x470>)
 8001a2e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001a32:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	699b      	ldr	r3, [r3, #24]
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	f000 80a1 	beq.w	8001b80 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001a3e:	4b34      	ldr	r3, [pc, #208]	; (8001b10 <HAL_RCC_OscConfig+0x470>)
 8001a40:	689b      	ldr	r3, [r3, #8]
 8001a42:	f003 030c 	and.w	r3, r3, #12
 8001a46:	2b08      	cmp	r3, #8
 8001a48:	d05c      	beq.n	8001b04 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	699b      	ldr	r3, [r3, #24]
 8001a4e:	2b02      	cmp	r3, #2
 8001a50:	d141      	bne.n	8001ad6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a52:	4b31      	ldr	r3, [pc, #196]	; (8001b18 <HAL_RCC_OscConfig+0x478>)
 8001a54:	2200      	movs	r2, #0
 8001a56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a58:	f7ff f952 	bl	8000d00 <HAL_GetTick>
 8001a5c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a5e:	e008      	b.n	8001a72 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a60:	f7ff f94e 	bl	8000d00 <HAL_GetTick>
 8001a64:	4602      	mov	r2, r0
 8001a66:	693b      	ldr	r3, [r7, #16]
 8001a68:	1ad3      	subs	r3, r2, r3
 8001a6a:	2b02      	cmp	r3, #2
 8001a6c:	d901      	bls.n	8001a72 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001a6e:	2303      	movs	r3, #3
 8001a70:	e087      	b.n	8001b82 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a72:	4b27      	ldr	r3, [pc, #156]	; (8001b10 <HAL_RCC_OscConfig+0x470>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d1f0      	bne.n	8001a60 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	69da      	ldr	r2, [r3, #28]
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	6a1b      	ldr	r3, [r3, #32]
 8001a86:	431a      	orrs	r2, r3
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a8c:	019b      	lsls	r3, r3, #6
 8001a8e:	431a      	orrs	r2, r3
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a94:	085b      	lsrs	r3, r3, #1
 8001a96:	3b01      	subs	r3, #1
 8001a98:	041b      	lsls	r3, r3, #16
 8001a9a:	431a      	orrs	r2, r3
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001aa0:	061b      	lsls	r3, r3, #24
 8001aa2:	491b      	ldr	r1, [pc, #108]	; (8001b10 <HAL_RCC_OscConfig+0x470>)
 8001aa4:	4313      	orrs	r3, r2
 8001aa6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001aa8:	4b1b      	ldr	r3, [pc, #108]	; (8001b18 <HAL_RCC_OscConfig+0x478>)
 8001aaa:	2201      	movs	r2, #1
 8001aac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001aae:	f7ff f927 	bl	8000d00 <HAL_GetTick>
 8001ab2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ab4:	e008      	b.n	8001ac8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ab6:	f7ff f923 	bl	8000d00 <HAL_GetTick>
 8001aba:	4602      	mov	r2, r0
 8001abc:	693b      	ldr	r3, [r7, #16]
 8001abe:	1ad3      	subs	r3, r2, r3
 8001ac0:	2b02      	cmp	r3, #2
 8001ac2:	d901      	bls.n	8001ac8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001ac4:	2303      	movs	r3, #3
 8001ac6:	e05c      	b.n	8001b82 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ac8:	4b11      	ldr	r3, [pc, #68]	; (8001b10 <HAL_RCC_OscConfig+0x470>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d0f0      	beq.n	8001ab6 <HAL_RCC_OscConfig+0x416>
 8001ad4:	e054      	b.n	8001b80 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ad6:	4b10      	ldr	r3, [pc, #64]	; (8001b18 <HAL_RCC_OscConfig+0x478>)
 8001ad8:	2200      	movs	r2, #0
 8001ada:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001adc:	f7ff f910 	bl	8000d00 <HAL_GetTick>
 8001ae0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ae2:	e008      	b.n	8001af6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ae4:	f7ff f90c 	bl	8000d00 <HAL_GetTick>
 8001ae8:	4602      	mov	r2, r0
 8001aea:	693b      	ldr	r3, [r7, #16]
 8001aec:	1ad3      	subs	r3, r2, r3
 8001aee:	2b02      	cmp	r3, #2
 8001af0:	d901      	bls.n	8001af6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001af2:	2303      	movs	r3, #3
 8001af4:	e045      	b.n	8001b82 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001af6:	4b06      	ldr	r3, [pc, #24]	; (8001b10 <HAL_RCC_OscConfig+0x470>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d1f0      	bne.n	8001ae4 <HAL_RCC_OscConfig+0x444>
 8001b02:	e03d      	b.n	8001b80 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	699b      	ldr	r3, [r3, #24]
 8001b08:	2b01      	cmp	r3, #1
 8001b0a:	d107      	bne.n	8001b1c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001b0c:	2301      	movs	r3, #1
 8001b0e:	e038      	b.n	8001b82 <HAL_RCC_OscConfig+0x4e2>
 8001b10:	40023800 	.word	0x40023800
 8001b14:	40007000 	.word	0x40007000
 8001b18:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001b1c:	4b1b      	ldr	r3, [pc, #108]	; (8001b8c <HAL_RCC_OscConfig+0x4ec>)
 8001b1e:	685b      	ldr	r3, [r3, #4]
 8001b20:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	699b      	ldr	r3, [r3, #24]
 8001b26:	2b01      	cmp	r3, #1
 8001b28:	d028      	beq.n	8001b7c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001b34:	429a      	cmp	r2, r3
 8001b36:	d121      	bne.n	8001b7c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b42:	429a      	cmp	r2, r3
 8001b44:	d11a      	bne.n	8001b7c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001b46:	68fa      	ldr	r2, [r7, #12]
 8001b48:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001b4c:	4013      	ands	r3, r2
 8001b4e:	687a      	ldr	r2, [r7, #4]
 8001b50:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001b52:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001b54:	4293      	cmp	r3, r2
 8001b56:	d111      	bne.n	8001b7c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b62:	085b      	lsrs	r3, r3, #1
 8001b64:	3b01      	subs	r3, #1
 8001b66:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001b68:	429a      	cmp	r2, r3
 8001b6a:	d107      	bne.n	8001b7c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b76:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001b78:	429a      	cmp	r2, r3
 8001b7a:	d001      	beq.n	8001b80 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001b7c:	2301      	movs	r3, #1
 8001b7e:	e000      	b.n	8001b82 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001b80:	2300      	movs	r3, #0
}
 8001b82:	4618      	mov	r0, r3
 8001b84:	3718      	adds	r7, #24
 8001b86:	46bd      	mov	sp, r7
 8001b88:	bd80      	pop	{r7, pc}
 8001b8a:	bf00      	nop
 8001b8c:	40023800 	.word	0x40023800

08001b90 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b084      	sub	sp, #16
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
 8001b98:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d101      	bne.n	8001ba4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ba0:	2301      	movs	r3, #1
 8001ba2:	e0cc      	b.n	8001d3e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001ba4:	4b68      	ldr	r3, [pc, #416]	; (8001d48 <HAL_RCC_ClockConfig+0x1b8>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f003 0307 	and.w	r3, r3, #7
 8001bac:	683a      	ldr	r2, [r7, #0]
 8001bae:	429a      	cmp	r2, r3
 8001bb0:	d90c      	bls.n	8001bcc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bb2:	4b65      	ldr	r3, [pc, #404]	; (8001d48 <HAL_RCC_ClockConfig+0x1b8>)
 8001bb4:	683a      	ldr	r2, [r7, #0]
 8001bb6:	b2d2      	uxtb	r2, r2
 8001bb8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bba:	4b63      	ldr	r3, [pc, #396]	; (8001d48 <HAL_RCC_ClockConfig+0x1b8>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f003 0307 	and.w	r3, r3, #7
 8001bc2:	683a      	ldr	r2, [r7, #0]
 8001bc4:	429a      	cmp	r2, r3
 8001bc6:	d001      	beq.n	8001bcc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001bc8:	2301      	movs	r3, #1
 8001bca:	e0b8      	b.n	8001d3e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f003 0302 	and.w	r3, r3, #2
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d020      	beq.n	8001c1a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	f003 0304 	and.w	r3, r3, #4
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d005      	beq.n	8001bf0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001be4:	4b59      	ldr	r3, [pc, #356]	; (8001d4c <HAL_RCC_ClockConfig+0x1bc>)
 8001be6:	689b      	ldr	r3, [r3, #8]
 8001be8:	4a58      	ldr	r2, [pc, #352]	; (8001d4c <HAL_RCC_ClockConfig+0x1bc>)
 8001bea:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001bee:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f003 0308 	and.w	r3, r3, #8
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d005      	beq.n	8001c08 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001bfc:	4b53      	ldr	r3, [pc, #332]	; (8001d4c <HAL_RCC_ClockConfig+0x1bc>)
 8001bfe:	689b      	ldr	r3, [r3, #8]
 8001c00:	4a52      	ldr	r2, [pc, #328]	; (8001d4c <HAL_RCC_ClockConfig+0x1bc>)
 8001c02:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001c06:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c08:	4b50      	ldr	r3, [pc, #320]	; (8001d4c <HAL_RCC_ClockConfig+0x1bc>)
 8001c0a:	689b      	ldr	r3, [r3, #8]
 8001c0c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	689b      	ldr	r3, [r3, #8]
 8001c14:	494d      	ldr	r1, [pc, #308]	; (8001d4c <HAL_RCC_ClockConfig+0x1bc>)
 8001c16:	4313      	orrs	r3, r2
 8001c18:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f003 0301 	and.w	r3, r3, #1
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d044      	beq.n	8001cb0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	685b      	ldr	r3, [r3, #4]
 8001c2a:	2b01      	cmp	r3, #1
 8001c2c:	d107      	bne.n	8001c3e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c2e:	4b47      	ldr	r3, [pc, #284]	; (8001d4c <HAL_RCC_ClockConfig+0x1bc>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d119      	bne.n	8001c6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c3a:	2301      	movs	r3, #1
 8001c3c:	e07f      	b.n	8001d3e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	685b      	ldr	r3, [r3, #4]
 8001c42:	2b02      	cmp	r3, #2
 8001c44:	d003      	beq.n	8001c4e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001c4a:	2b03      	cmp	r3, #3
 8001c4c:	d107      	bne.n	8001c5e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c4e:	4b3f      	ldr	r3, [pc, #252]	; (8001d4c <HAL_RCC_ClockConfig+0x1bc>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d109      	bne.n	8001c6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c5a:	2301      	movs	r3, #1
 8001c5c:	e06f      	b.n	8001d3e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c5e:	4b3b      	ldr	r3, [pc, #236]	; (8001d4c <HAL_RCC_ClockConfig+0x1bc>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f003 0302 	and.w	r3, r3, #2
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d101      	bne.n	8001c6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c6a:	2301      	movs	r3, #1
 8001c6c:	e067      	b.n	8001d3e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001c6e:	4b37      	ldr	r3, [pc, #220]	; (8001d4c <HAL_RCC_ClockConfig+0x1bc>)
 8001c70:	689b      	ldr	r3, [r3, #8]
 8001c72:	f023 0203 	bic.w	r2, r3, #3
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	685b      	ldr	r3, [r3, #4]
 8001c7a:	4934      	ldr	r1, [pc, #208]	; (8001d4c <HAL_RCC_ClockConfig+0x1bc>)
 8001c7c:	4313      	orrs	r3, r2
 8001c7e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001c80:	f7ff f83e 	bl	8000d00 <HAL_GetTick>
 8001c84:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c86:	e00a      	b.n	8001c9e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c88:	f7ff f83a 	bl	8000d00 <HAL_GetTick>
 8001c8c:	4602      	mov	r2, r0
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	1ad3      	subs	r3, r2, r3
 8001c92:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c96:	4293      	cmp	r3, r2
 8001c98:	d901      	bls.n	8001c9e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001c9a:	2303      	movs	r3, #3
 8001c9c:	e04f      	b.n	8001d3e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c9e:	4b2b      	ldr	r3, [pc, #172]	; (8001d4c <HAL_RCC_ClockConfig+0x1bc>)
 8001ca0:	689b      	ldr	r3, [r3, #8]
 8001ca2:	f003 020c 	and.w	r2, r3, #12
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	685b      	ldr	r3, [r3, #4]
 8001caa:	009b      	lsls	r3, r3, #2
 8001cac:	429a      	cmp	r2, r3
 8001cae:	d1eb      	bne.n	8001c88 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001cb0:	4b25      	ldr	r3, [pc, #148]	; (8001d48 <HAL_RCC_ClockConfig+0x1b8>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f003 0307 	and.w	r3, r3, #7
 8001cb8:	683a      	ldr	r2, [r7, #0]
 8001cba:	429a      	cmp	r2, r3
 8001cbc:	d20c      	bcs.n	8001cd8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cbe:	4b22      	ldr	r3, [pc, #136]	; (8001d48 <HAL_RCC_ClockConfig+0x1b8>)
 8001cc0:	683a      	ldr	r2, [r7, #0]
 8001cc2:	b2d2      	uxtb	r2, r2
 8001cc4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cc6:	4b20      	ldr	r3, [pc, #128]	; (8001d48 <HAL_RCC_ClockConfig+0x1b8>)
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f003 0307 	and.w	r3, r3, #7
 8001cce:	683a      	ldr	r2, [r7, #0]
 8001cd0:	429a      	cmp	r2, r3
 8001cd2:	d001      	beq.n	8001cd8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001cd4:	2301      	movs	r3, #1
 8001cd6:	e032      	b.n	8001d3e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f003 0304 	and.w	r3, r3, #4
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d008      	beq.n	8001cf6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ce4:	4b19      	ldr	r3, [pc, #100]	; (8001d4c <HAL_RCC_ClockConfig+0x1bc>)
 8001ce6:	689b      	ldr	r3, [r3, #8]
 8001ce8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	68db      	ldr	r3, [r3, #12]
 8001cf0:	4916      	ldr	r1, [pc, #88]	; (8001d4c <HAL_RCC_ClockConfig+0x1bc>)
 8001cf2:	4313      	orrs	r3, r2
 8001cf4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f003 0308 	and.w	r3, r3, #8
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d009      	beq.n	8001d16 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001d02:	4b12      	ldr	r3, [pc, #72]	; (8001d4c <HAL_RCC_ClockConfig+0x1bc>)
 8001d04:	689b      	ldr	r3, [r3, #8]
 8001d06:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	691b      	ldr	r3, [r3, #16]
 8001d0e:	00db      	lsls	r3, r3, #3
 8001d10:	490e      	ldr	r1, [pc, #56]	; (8001d4c <HAL_RCC_ClockConfig+0x1bc>)
 8001d12:	4313      	orrs	r3, r2
 8001d14:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001d16:	f000 f821 	bl	8001d5c <HAL_RCC_GetSysClockFreq>
 8001d1a:	4602      	mov	r2, r0
 8001d1c:	4b0b      	ldr	r3, [pc, #44]	; (8001d4c <HAL_RCC_ClockConfig+0x1bc>)
 8001d1e:	689b      	ldr	r3, [r3, #8]
 8001d20:	091b      	lsrs	r3, r3, #4
 8001d22:	f003 030f 	and.w	r3, r3, #15
 8001d26:	490a      	ldr	r1, [pc, #40]	; (8001d50 <HAL_RCC_ClockConfig+0x1c0>)
 8001d28:	5ccb      	ldrb	r3, [r1, r3]
 8001d2a:	fa22 f303 	lsr.w	r3, r2, r3
 8001d2e:	4a09      	ldr	r2, [pc, #36]	; (8001d54 <HAL_RCC_ClockConfig+0x1c4>)
 8001d30:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001d32:	4b09      	ldr	r3, [pc, #36]	; (8001d58 <HAL_RCC_ClockConfig+0x1c8>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	4618      	mov	r0, r3
 8001d38:	f7fe ff9e 	bl	8000c78 <HAL_InitTick>

  return HAL_OK;
 8001d3c:	2300      	movs	r3, #0
}
 8001d3e:	4618      	mov	r0, r3
 8001d40:	3710      	adds	r7, #16
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bd80      	pop	{r7, pc}
 8001d46:	bf00      	nop
 8001d48:	40023c00 	.word	0x40023c00
 8001d4c:	40023800 	.word	0x40023800
 8001d50:	08003394 	.word	0x08003394
 8001d54:	20000000 	.word	0x20000000
 8001d58:	20000004 	.word	0x20000004

08001d5c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d5c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001d60:	b090      	sub	sp, #64	; 0x40
 8001d62:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001d64:	2300      	movs	r3, #0
 8001d66:	637b      	str	r3, [r7, #52]	; 0x34
 8001d68:	2300      	movs	r3, #0
 8001d6a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8001d70:	2300      	movs	r3, #0
 8001d72:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001d74:	4b59      	ldr	r3, [pc, #356]	; (8001edc <HAL_RCC_GetSysClockFreq+0x180>)
 8001d76:	689b      	ldr	r3, [r3, #8]
 8001d78:	f003 030c 	and.w	r3, r3, #12
 8001d7c:	2b08      	cmp	r3, #8
 8001d7e:	d00d      	beq.n	8001d9c <HAL_RCC_GetSysClockFreq+0x40>
 8001d80:	2b08      	cmp	r3, #8
 8001d82:	f200 80a1 	bhi.w	8001ec8 <HAL_RCC_GetSysClockFreq+0x16c>
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d002      	beq.n	8001d90 <HAL_RCC_GetSysClockFreq+0x34>
 8001d8a:	2b04      	cmp	r3, #4
 8001d8c:	d003      	beq.n	8001d96 <HAL_RCC_GetSysClockFreq+0x3a>
 8001d8e:	e09b      	b.n	8001ec8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001d90:	4b53      	ldr	r3, [pc, #332]	; (8001ee0 <HAL_RCC_GetSysClockFreq+0x184>)
 8001d92:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8001d94:	e09b      	b.n	8001ece <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001d96:	4b53      	ldr	r3, [pc, #332]	; (8001ee4 <HAL_RCC_GetSysClockFreq+0x188>)
 8001d98:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001d9a:	e098      	b.n	8001ece <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001d9c:	4b4f      	ldr	r3, [pc, #316]	; (8001edc <HAL_RCC_GetSysClockFreq+0x180>)
 8001d9e:	685b      	ldr	r3, [r3, #4]
 8001da0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001da4:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001da6:	4b4d      	ldr	r3, [pc, #308]	; (8001edc <HAL_RCC_GetSysClockFreq+0x180>)
 8001da8:	685b      	ldr	r3, [r3, #4]
 8001daa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d028      	beq.n	8001e04 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001db2:	4b4a      	ldr	r3, [pc, #296]	; (8001edc <HAL_RCC_GetSysClockFreq+0x180>)
 8001db4:	685b      	ldr	r3, [r3, #4]
 8001db6:	099b      	lsrs	r3, r3, #6
 8001db8:	2200      	movs	r2, #0
 8001dba:	623b      	str	r3, [r7, #32]
 8001dbc:	627a      	str	r2, [r7, #36]	; 0x24
 8001dbe:	6a3b      	ldr	r3, [r7, #32]
 8001dc0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001dc4:	2100      	movs	r1, #0
 8001dc6:	4b47      	ldr	r3, [pc, #284]	; (8001ee4 <HAL_RCC_GetSysClockFreq+0x188>)
 8001dc8:	fb03 f201 	mul.w	r2, r3, r1
 8001dcc:	2300      	movs	r3, #0
 8001dce:	fb00 f303 	mul.w	r3, r0, r3
 8001dd2:	4413      	add	r3, r2
 8001dd4:	4a43      	ldr	r2, [pc, #268]	; (8001ee4 <HAL_RCC_GetSysClockFreq+0x188>)
 8001dd6:	fba0 1202 	umull	r1, r2, r0, r2
 8001dda:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001ddc:	460a      	mov	r2, r1
 8001dde:	62ba      	str	r2, [r7, #40]	; 0x28
 8001de0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001de2:	4413      	add	r3, r2
 8001de4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001de6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001de8:	2200      	movs	r2, #0
 8001dea:	61bb      	str	r3, [r7, #24]
 8001dec:	61fa      	str	r2, [r7, #28]
 8001dee:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001df2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001df6:	f7fe f9ef 	bl	80001d8 <__aeabi_uldivmod>
 8001dfa:	4602      	mov	r2, r0
 8001dfc:	460b      	mov	r3, r1
 8001dfe:	4613      	mov	r3, r2
 8001e00:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001e02:	e053      	b.n	8001eac <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e04:	4b35      	ldr	r3, [pc, #212]	; (8001edc <HAL_RCC_GetSysClockFreq+0x180>)
 8001e06:	685b      	ldr	r3, [r3, #4]
 8001e08:	099b      	lsrs	r3, r3, #6
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	613b      	str	r3, [r7, #16]
 8001e0e:	617a      	str	r2, [r7, #20]
 8001e10:	693b      	ldr	r3, [r7, #16]
 8001e12:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001e16:	f04f 0b00 	mov.w	fp, #0
 8001e1a:	4652      	mov	r2, sl
 8001e1c:	465b      	mov	r3, fp
 8001e1e:	f04f 0000 	mov.w	r0, #0
 8001e22:	f04f 0100 	mov.w	r1, #0
 8001e26:	0159      	lsls	r1, r3, #5
 8001e28:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001e2c:	0150      	lsls	r0, r2, #5
 8001e2e:	4602      	mov	r2, r0
 8001e30:	460b      	mov	r3, r1
 8001e32:	ebb2 080a 	subs.w	r8, r2, sl
 8001e36:	eb63 090b 	sbc.w	r9, r3, fp
 8001e3a:	f04f 0200 	mov.w	r2, #0
 8001e3e:	f04f 0300 	mov.w	r3, #0
 8001e42:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001e46:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001e4a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001e4e:	ebb2 0408 	subs.w	r4, r2, r8
 8001e52:	eb63 0509 	sbc.w	r5, r3, r9
 8001e56:	f04f 0200 	mov.w	r2, #0
 8001e5a:	f04f 0300 	mov.w	r3, #0
 8001e5e:	00eb      	lsls	r3, r5, #3
 8001e60:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001e64:	00e2      	lsls	r2, r4, #3
 8001e66:	4614      	mov	r4, r2
 8001e68:	461d      	mov	r5, r3
 8001e6a:	eb14 030a 	adds.w	r3, r4, sl
 8001e6e:	603b      	str	r3, [r7, #0]
 8001e70:	eb45 030b 	adc.w	r3, r5, fp
 8001e74:	607b      	str	r3, [r7, #4]
 8001e76:	f04f 0200 	mov.w	r2, #0
 8001e7a:	f04f 0300 	mov.w	r3, #0
 8001e7e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001e82:	4629      	mov	r1, r5
 8001e84:	028b      	lsls	r3, r1, #10
 8001e86:	4621      	mov	r1, r4
 8001e88:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001e8c:	4621      	mov	r1, r4
 8001e8e:	028a      	lsls	r2, r1, #10
 8001e90:	4610      	mov	r0, r2
 8001e92:	4619      	mov	r1, r3
 8001e94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e96:	2200      	movs	r2, #0
 8001e98:	60bb      	str	r3, [r7, #8]
 8001e9a:	60fa      	str	r2, [r7, #12]
 8001e9c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001ea0:	f7fe f99a 	bl	80001d8 <__aeabi_uldivmod>
 8001ea4:	4602      	mov	r2, r0
 8001ea6:	460b      	mov	r3, r1
 8001ea8:	4613      	mov	r3, r2
 8001eaa:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001eac:	4b0b      	ldr	r3, [pc, #44]	; (8001edc <HAL_RCC_GetSysClockFreq+0x180>)
 8001eae:	685b      	ldr	r3, [r3, #4]
 8001eb0:	0c1b      	lsrs	r3, r3, #16
 8001eb2:	f003 0303 	and.w	r3, r3, #3
 8001eb6:	3301      	adds	r3, #1
 8001eb8:	005b      	lsls	r3, r3, #1
 8001eba:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8001ebc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001ebe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ec0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ec4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001ec6:	e002      	b.n	8001ece <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001ec8:	4b05      	ldr	r3, [pc, #20]	; (8001ee0 <HAL_RCC_GetSysClockFreq+0x184>)
 8001eca:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001ecc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001ece:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	3740      	adds	r7, #64	; 0x40
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001eda:	bf00      	nop
 8001edc:	40023800 	.word	0x40023800
 8001ee0:	00f42400 	.word	0x00f42400
 8001ee4:	017d7840 	.word	0x017d7840

08001ee8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ee8:	b480      	push	{r7}
 8001eea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001eec:	4b03      	ldr	r3, [pc, #12]	; (8001efc <HAL_RCC_GetHCLKFreq+0x14>)
 8001eee:	681b      	ldr	r3, [r3, #0]
}
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef8:	4770      	bx	lr
 8001efa:	bf00      	nop
 8001efc:	20000000 	.word	0x20000000

08001f00 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001f04:	f7ff fff0 	bl	8001ee8 <HAL_RCC_GetHCLKFreq>
 8001f08:	4602      	mov	r2, r0
 8001f0a:	4b05      	ldr	r3, [pc, #20]	; (8001f20 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001f0c:	689b      	ldr	r3, [r3, #8]
 8001f0e:	0a9b      	lsrs	r3, r3, #10
 8001f10:	f003 0307 	and.w	r3, r3, #7
 8001f14:	4903      	ldr	r1, [pc, #12]	; (8001f24 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001f16:	5ccb      	ldrb	r3, [r1, r3]
 8001f18:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	bd80      	pop	{r7, pc}
 8001f20:	40023800 	.word	0x40023800
 8001f24:	080033a4 	.word	0x080033a4

08001f28 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001f2c:	f7ff ffdc 	bl	8001ee8 <HAL_RCC_GetHCLKFreq>
 8001f30:	4602      	mov	r2, r0
 8001f32:	4b05      	ldr	r3, [pc, #20]	; (8001f48 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001f34:	689b      	ldr	r3, [r3, #8]
 8001f36:	0b5b      	lsrs	r3, r3, #13
 8001f38:	f003 0307 	and.w	r3, r3, #7
 8001f3c:	4903      	ldr	r1, [pc, #12]	; (8001f4c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001f3e:	5ccb      	ldrb	r3, [r1, r3]
 8001f40:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f44:	4618      	mov	r0, r3
 8001f46:	bd80      	pop	{r7, pc}
 8001f48:	40023800 	.word	0x40023800
 8001f4c:	080033a4 	.word	0x080033a4

08001f50 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b086      	sub	sp, #24
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001f58:	2300      	movs	r3, #0
 8001f5a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f003 0301 	and.w	r3, r3, #1
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d105      	bne.n	8001f78 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d038      	beq.n	8001fea <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8001f78:	4b68      	ldr	r3, [pc, #416]	; (800211c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001f7e:	f7fe febf 	bl	8000d00 <HAL_GetTick>
 8001f82:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001f84:	e008      	b.n	8001f98 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8001f86:	f7fe febb 	bl	8000d00 <HAL_GetTick>
 8001f8a:	4602      	mov	r2, r0
 8001f8c:	697b      	ldr	r3, [r7, #20]
 8001f8e:	1ad3      	subs	r3, r2, r3
 8001f90:	2b02      	cmp	r3, #2
 8001f92:	d901      	bls.n	8001f98 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001f94:	2303      	movs	r3, #3
 8001f96:	e0bd      	b.n	8002114 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001f98:	4b61      	ldr	r3, [pc, #388]	; (8002120 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d1f0      	bne.n	8001f86 <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	685a      	ldr	r2, [r3, #4]
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	689b      	ldr	r3, [r3, #8]
 8001fac:	019b      	lsls	r3, r3, #6
 8001fae:	431a      	orrs	r2, r3
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	68db      	ldr	r3, [r3, #12]
 8001fb4:	071b      	lsls	r3, r3, #28
 8001fb6:	495a      	ldr	r1, [pc, #360]	; (8002120 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001fb8:	4313      	orrs	r3, r2
 8001fba:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8001fbe:	4b57      	ldr	r3, [pc, #348]	; (800211c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8001fc0:	2201      	movs	r2, #1
 8001fc2:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001fc4:	f7fe fe9c 	bl	8000d00 <HAL_GetTick>
 8001fc8:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001fca:	e008      	b.n	8001fde <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8001fcc:	f7fe fe98 	bl	8000d00 <HAL_GetTick>
 8001fd0:	4602      	mov	r2, r0
 8001fd2:	697b      	ldr	r3, [r7, #20]
 8001fd4:	1ad3      	subs	r3, r2, r3
 8001fd6:	2b02      	cmp	r3, #2
 8001fd8:	d901      	bls.n	8001fde <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001fda:	2303      	movs	r3, #3
 8001fdc:	e09a      	b.n	8002114 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001fde:	4b50      	ldr	r3, [pc, #320]	; (8002120 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d0f0      	beq.n	8001fcc <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f003 0302 	and.w	r3, r3, #2
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	f000 8083 	beq.w	80020fe <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	60fb      	str	r3, [r7, #12]
 8001ffc:	4b48      	ldr	r3, [pc, #288]	; (8002120 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001ffe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002000:	4a47      	ldr	r2, [pc, #284]	; (8002120 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002002:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002006:	6413      	str	r3, [r2, #64]	; 0x40
 8002008:	4b45      	ldr	r3, [pc, #276]	; (8002120 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800200a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800200c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002010:	60fb      	str	r3, [r7, #12]
 8002012:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8002014:	4b43      	ldr	r3, [pc, #268]	; (8002124 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	4a42      	ldr	r2, [pc, #264]	; (8002124 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800201a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800201e:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002020:	f7fe fe6e 	bl	8000d00 <HAL_GetTick>
 8002024:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002026:	e008      	b.n	800203a <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002028:	f7fe fe6a 	bl	8000d00 <HAL_GetTick>
 800202c:	4602      	mov	r2, r0
 800202e:	697b      	ldr	r3, [r7, #20]
 8002030:	1ad3      	subs	r3, r2, r3
 8002032:	2b02      	cmp	r3, #2
 8002034:	d901      	bls.n	800203a <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 8002036:	2303      	movs	r3, #3
 8002038:	e06c      	b.n	8002114 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800203a:	4b3a      	ldr	r3, [pc, #232]	; (8002124 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002042:	2b00      	cmp	r3, #0
 8002044:	d0f0      	beq.n	8002028 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002046:	4b36      	ldr	r3, [pc, #216]	; (8002120 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002048:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800204a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800204e:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002050:	693b      	ldr	r3, [r7, #16]
 8002052:	2b00      	cmp	r3, #0
 8002054:	d02f      	beq.n	80020b6 <HAL_RCCEx_PeriphCLKConfig+0x166>
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	691b      	ldr	r3, [r3, #16]
 800205a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800205e:	693a      	ldr	r2, [r7, #16]
 8002060:	429a      	cmp	r2, r3
 8002062:	d028      	beq.n	80020b6 <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002064:	4b2e      	ldr	r3, [pc, #184]	; (8002120 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002066:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002068:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800206c:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800206e:	4b2e      	ldr	r3, [pc, #184]	; (8002128 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002070:	2201      	movs	r2, #1
 8002072:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002074:	4b2c      	ldr	r3, [pc, #176]	; (8002128 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002076:	2200      	movs	r2, #0
 8002078:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800207a:	4a29      	ldr	r2, [pc, #164]	; (8002120 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800207c:	693b      	ldr	r3, [r7, #16]
 800207e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002080:	4b27      	ldr	r3, [pc, #156]	; (8002120 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002082:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002084:	f003 0301 	and.w	r3, r3, #1
 8002088:	2b01      	cmp	r3, #1
 800208a:	d114      	bne.n	80020b6 <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800208c:	f7fe fe38 	bl	8000d00 <HAL_GetTick>
 8002090:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002092:	e00a      	b.n	80020aa <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002094:	f7fe fe34 	bl	8000d00 <HAL_GetTick>
 8002098:	4602      	mov	r2, r0
 800209a:	697b      	ldr	r3, [r7, #20]
 800209c:	1ad3      	subs	r3, r2, r3
 800209e:	f241 3288 	movw	r2, #5000	; 0x1388
 80020a2:	4293      	cmp	r3, r2
 80020a4:	d901      	bls.n	80020aa <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 80020a6:	2303      	movs	r3, #3
 80020a8:	e034      	b.n	8002114 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020aa:	4b1d      	ldr	r3, [pc, #116]	; (8002120 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80020ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020ae:	f003 0302 	and.w	r3, r3, #2
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d0ee      	beq.n	8002094 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	691b      	ldr	r3, [r3, #16]
 80020ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80020be:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80020c2:	d10d      	bne.n	80020e0 <HAL_RCCEx_PeriphCLKConfig+0x190>
 80020c4:	4b16      	ldr	r3, [pc, #88]	; (8002120 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80020c6:	689b      	ldr	r3, [r3, #8]
 80020c8:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	691b      	ldr	r3, [r3, #16]
 80020d0:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80020d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80020d8:	4911      	ldr	r1, [pc, #68]	; (8002120 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80020da:	4313      	orrs	r3, r2
 80020dc:	608b      	str	r3, [r1, #8]
 80020de:	e005      	b.n	80020ec <HAL_RCCEx_PeriphCLKConfig+0x19c>
 80020e0:	4b0f      	ldr	r3, [pc, #60]	; (8002120 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80020e2:	689b      	ldr	r3, [r3, #8]
 80020e4:	4a0e      	ldr	r2, [pc, #56]	; (8002120 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80020e6:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80020ea:	6093      	str	r3, [r2, #8]
 80020ec:	4b0c      	ldr	r3, [pc, #48]	; (8002120 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80020ee:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	691b      	ldr	r3, [r3, #16]
 80020f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80020f8:	4909      	ldr	r1, [pc, #36]	; (8002120 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80020fa:	4313      	orrs	r3, r2
 80020fc:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f003 0308 	and.w	r3, r3, #8
 8002106:	2b00      	cmp	r3, #0
 8002108:	d003      	beq.n	8002112 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	7d1a      	ldrb	r2, [r3, #20]
 800210e:	4b07      	ldr	r3, [pc, #28]	; (800212c <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8002110:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8002112:	2300      	movs	r3, #0
}
 8002114:	4618      	mov	r0, r3
 8002116:	3718      	adds	r7, #24
 8002118:	46bd      	mov	sp, r7
 800211a:	bd80      	pop	{r7, pc}
 800211c:	42470068 	.word	0x42470068
 8002120:	40023800 	.word	0x40023800
 8002124:	40007000 	.word	0x40007000
 8002128:	42470e40 	.word	0x42470e40
 800212c:	424711e0 	.word	0x424711e0

08002130 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b084      	sub	sp, #16
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002138:	2301      	movs	r3, #1
 800213a:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	2b00      	cmp	r3, #0
 8002140:	d101      	bne.n	8002146 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8002142:	2301      	movs	r3, #1
 8002144:	e066      	b.n	8002214 <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	7f5b      	ldrb	r3, [r3, #29]
 800214a:	b2db      	uxtb	r3, r3
 800214c:	2b00      	cmp	r3, #0
 800214e:	d105      	bne.n	800215c <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	2200      	movs	r2, #0
 8002154:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8002156:	6878      	ldr	r0, [r7, #4]
 8002158:	f7fe fb88 	bl	800086c <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	2202      	movs	r2, #2
 8002160:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	22ca      	movs	r2, #202	; 0xca
 8002168:	625a      	str	r2, [r3, #36]	; 0x24
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	2253      	movs	r2, #83	; 0x53
 8002170:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8002172:	6878      	ldr	r0, [r7, #4]
 8002174:	f000 f87a 	bl	800226c <RTC_EnterInitMode>
 8002178:	4603      	mov	r3, r0
 800217a:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 800217c:	7bfb      	ldrb	r3, [r7, #15]
 800217e:	2b00      	cmp	r3, #0
 8002180:	d12c      	bne.n	80021dc <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	689b      	ldr	r3, [r3, #8]
 8002188:	687a      	ldr	r2, [r7, #4]
 800218a:	6812      	ldr	r2, [r2, #0]
 800218c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8002190:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002194:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	6899      	ldr	r1, [r3, #8]
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	685a      	ldr	r2, [r3, #4]
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	691b      	ldr	r3, [r3, #16]
 80021a4:	431a      	orrs	r2, r3
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	695b      	ldr	r3, [r3, #20]
 80021aa:	431a      	orrs	r2, r3
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	430a      	orrs	r2, r1
 80021b2:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	687a      	ldr	r2, [r7, #4]
 80021ba:	68d2      	ldr	r2, [r2, #12]
 80021bc:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	6919      	ldr	r1, [r3, #16]
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	689b      	ldr	r3, [r3, #8]
 80021c8:	041a      	lsls	r2, r3, #16
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	430a      	orrs	r2, r1
 80021d0:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80021d2:	6878      	ldr	r0, [r7, #4]
 80021d4:	f000 f881 	bl	80022da <RTC_ExitInitMode>
 80021d8:	4603      	mov	r3, r0
 80021da:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 80021dc:	7bfb      	ldrb	r3, [r7, #15]
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d113      	bne.n	800220a <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80021f0:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	699a      	ldr	r2, [r3, #24]
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	430a      	orrs	r2, r1
 8002202:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	2201      	movs	r2, #1
 8002208:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	22ff      	movs	r2, #255	; 0xff
 8002210:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 8002212:	7bfb      	ldrb	r3, [r7, #15]
}
 8002214:	4618      	mov	r0, r3
 8002216:	3710      	adds	r7, #16
 8002218:	46bd      	mov	sp, r7
 800221a:	bd80      	pop	{r7, pc}

0800221c <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	b084      	sub	sp, #16
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002224:	2300      	movs	r3, #0
 8002226:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	68da      	ldr	r2, [r3, #12]
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002236:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002238:	f7fe fd62 	bl	8000d00 <HAL_GetTick>
 800223c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800223e:	e009      	b.n	8002254 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002240:	f7fe fd5e 	bl	8000d00 <HAL_GetTick>
 8002244:	4602      	mov	r2, r0
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	1ad3      	subs	r3, r2, r3
 800224a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800224e:	d901      	bls.n	8002254 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8002250:	2303      	movs	r3, #3
 8002252:	e007      	b.n	8002264 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	68db      	ldr	r3, [r3, #12]
 800225a:	f003 0320 	and.w	r3, r3, #32
 800225e:	2b00      	cmp	r3, #0
 8002260:	d0ee      	beq.n	8002240 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8002262:	2300      	movs	r3, #0
}
 8002264:	4618      	mov	r0, r3
 8002266:	3710      	adds	r7, #16
 8002268:	46bd      	mov	sp, r7
 800226a:	bd80      	pop	{r7, pc}

0800226c <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b084      	sub	sp, #16
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002274:	2300      	movs	r3, #0
 8002276:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8002278:	2300      	movs	r3, #0
 800227a:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	68db      	ldr	r3, [r3, #12]
 8002282:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002286:	2b00      	cmp	r3, #0
 8002288:	d122      	bne.n	80022d0 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	68da      	ldr	r2, [r3, #12]
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002298:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800229a:	f7fe fd31 	bl	8000d00 <HAL_GetTick>
 800229e:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80022a0:	e00c      	b.n	80022bc <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80022a2:	f7fe fd2d 	bl	8000d00 <HAL_GetTick>
 80022a6:	4602      	mov	r2, r0
 80022a8:	68bb      	ldr	r3, [r7, #8]
 80022aa:	1ad3      	subs	r3, r2, r3
 80022ac:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80022b0:	d904      	bls.n	80022bc <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	2204      	movs	r2, #4
 80022b6:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 80022b8:	2301      	movs	r3, #1
 80022ba:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	68db      	ldr	r3, [r3, #12]
 80022c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d102      	bne.n	80022d0 <RTC_EnterInitMode+0x64>
 80022ca:	7bfb      	ldrb	r3, [r7, #15]
 80022cc:	2b01      	cmp	r3, #1
 80022ce:	d1e8      	bne.n	80022a2 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 80022d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80022d2:	4618      	mov	r0, r3
 80022d4:	3710      	adds	r7, #16
 80022d6:	46bd      	mov	sp, r7
 80022d8:	bd80      	pop	{r7, pc}

080022da <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80022da:	b580      	push	{r7, lr}
 80022dc:	b084      	sub	sp, #16
 80022de:	af00      	add	r7, sp, #0
 80022e0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80022e2:	2300      	movs	r3, #0
 80022e4:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	68da      	ldr	r2, [r3, #12]
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80022f4:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	689b      	ldr	r3, [r3, #8]
 80022fc:	f003 0320 	and.w	r3, r3, #32
 8002300:	2b00      	cmp	r3, #0
 8002302:	d10a      	bne.n	800231a <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002304:	6878      	ldr	r0, [r7, #4]
 8002306:	f7ff ff89 	bl	800221c <HAL_RTC_WaitForSynchro>
 800230a:	4603      	mov	r3, r0
 800230c:	2b00      	cmp	r3, #0
 800230e:	d004      	beq.n	800231a <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	2204      	movs	r2, #4
 8002314:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8002316:	2301      	movs	r3, #1
 8002318:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800231a:	7bfb      	ldrb	r3, [r7, #15]
}
 800231c:	4618      	mov	r0, r3
 800231e:	3710      	adds	r7, #16
 8002320:	46bd      	mov	sp, r7
 8002322:	bd80      	pop	{r7, pc}

08002324 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	b082      	sub	sp, #8
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	2b00      	cmp	r3, #0
 8002330:	d101      	bne.n	8002336 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002332:	2301      	movs	r3, #1
 8002334:	e07b      	b.n	800242e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800233a:	2b00      	cmp	r3, #0
 800233c:	d108      	bne.n	8002350 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	685b      	ldr	r3, [r3, #4]
 8002342:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002346:	d009      	beq.n	800235c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	2200      	movs	r2, #0
 800234c:	61da      	str	r2, [r3, #28]
 800234e:	e005      	b.n	800235c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	2200      	movs	r2, #0
 8002354:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	2200      	movs	r2, #0
 800235a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	2200      	movs	r2, #0
 8002360:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002368:	b2db      	uxtb	r3, r3
 800236a:	2b00      	cmp	r3, #0
 800236c:	d106      	bne.n	800237c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	2200      	movs	r2, #0
 8002372:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002376:	6878      	ldr	r0, [r7, #4]
 8002378:	f7fe fada 	bl	8000930 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	2202      	movs	r2, #2
 8002380:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	681a      	ldr	r2, [r3, #0]
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002392:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	685b      	ldr	r3, [r3, #4]
 8002398:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	689b      	ldr	r3, [r3, #8]
 80023a0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80023a4:	431a      	orrs	r2, r3
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	68db      	ldr	r3, [r3, #12]
 80023aa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80023ae:	431a      	orrs	r2, r3
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	691b      	ldr	r3, [r3, #16]
 80023b4:	f003 0302 	and.w	r3, r3, #2
 80023b8:	431a      	orrs	r2, r3
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	695b      	ldr	r3, [r3, #20]
 80023be:	f003 0301 	and.w	r3, r3, #1
 80023c2:	431a      	orrs	r2, r3
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	699b      	ldr	r3, [r3, #24]
 80023c8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80023cc:	431a      	orrs	r2, r3
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	69db      	ldr	r3, [r3, #28]
 80023d2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80023d6:	431a      	orrs	r2, r3
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	6a1b      	ldr	r3, [r3, #32]
 80023dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023e0:	ea42 0103 	orr.w	r1, r2, r3
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023e8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	430a      	orrs	r2, r1
 80023f2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	699b      	ldr	r3, [r3, #24]
 80023f8:	0c1b      	lsrs	r3, r3, #16
 80023fa:	f003 0104 	and.w	r1, r3, #4
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002402:	f003 0210 	and.w	r2, r3, #16
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	430a      	orrs	r2, r1
 800240c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	69da      	ldr	r2, [r3, #28]
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800241c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	2200      	movs	r2, #0
 8002422:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	2201      	movs	r2, #1
 8002428:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800242c:	2300      	movs	r3, #0
}
 800242e:	4618      	mov	r0, r3
 8002430:	3708      	adds	r7, #8
 8002432:	46bd      	mov	sp, r7
 8002434:	bd80      	pop	{r7, pc}

08002436 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002436:	b580      	push	{r7, lr}
 8002438:	b082      	sub	sp, #8
 800243a:	af00      	add	r7, sp, #0
 800243c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	2b00      	cmp	r3, #0
 8002442:	d101      	bne.n	8002448 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002444:	2301      	movs	r3, #1
 8002446:	e03f      	b.n	80024c8 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800244e:	b2db      	uxtb	r3, r3
 8002450:	2b00      	cmp	r3, #0
 8002452:	d106      	bne.n	8002462 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	2200      	movs	r2, #0
 8002458:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800245c:	6878      	ldr	r0, [r7, #4]
 800245e:	f7fe fb6f 	bl	8000b40 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	2224      	movs	r2, #36	; 0x24
 8002466:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	68da      	ldr	r2, [r3, #12]
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002478:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800247a:	6878      	ldr	r0, [r7, #4]
 800247c:	f000 fcde 	bl	8002e3c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	691a      	ldr	r2, [r3, #16]
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800248e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	695a      	ldr	r2, [r3, #20]
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800249e:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	68da      	ldr	r2, [r3, #12]
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80024ae:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	2200      	movs	r2, #0
 80024b4:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	2220      	movs	r2, #32
 80024ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	2220      	movs	r2, #32
 80024c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80024c6:	2300      	movs	r3, #0
}
 80024c8:	4618      	mov	r0, r3
 80024ca:	3708      	adds	r7, #8
 80024cc:	46bd      	mov	sp, r7
 80024ce:	bd80      	pop	{r7, pc}

080024d0 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b084      	sub	sp, #16
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	60f8      	str	r0, [r7, #12]
 80024d8:	60b9      	str	r1, [r7, #8]
 80024da:	4613      	mov	r3, r2
 80024dc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80024e4:	b2db      	uxtb	r3, r3
 80024e6:	2b20      	cmp	r3, #32
 80024e8:	d11d      	bne.n	8002526 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80024ea:	68bb      	ldr	r3, [r7, #8]
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d002      	beq.n	80024f6 <HAL_UART_Receive_IT+0x26>
 80024f0:	88fb      	ldrh	r3, [r7, #6]
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d101      	bne.n	80024fa <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80024f6:	2301      	movs	r3, #1
 80024f8:	e016      	b.n	8002528 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002500:	2b01      	cmp	r3, #1
 8002502:	d101      	bne.n	8002508 <HAL_UART_Receive_IT+0x38>
 8002504:	2302      	movs	r3, #2
 8002506:	e00f      	b.n	8002528 <HAL_UART_Receive_IT+0x58>
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	2201      	movs	r2, #1
 800250c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	2200      	movs	r2, #0
 8002514:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002516:	88fb      	ldrh	r3, [r7, #6]
 8002518:	461a      	mov	r2, r3
 800251a:	68b9      	ldr	r1, [r7, #8]
 800251c:	68f8      	ldr	r0, [r7, #12]
 800251e:	f000 fab5 	bl	8002a8c <UART_Start_Receive_IT>
 8002522:	4603      	mov	r3, r0
 8002524:	e000      	b.n	8002528 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8002526:	2302      	movs	r3, #2
  }
}
 8002528:	4618      	mov	r0, r3
 800252a:	3710      	adds	r7, #16
 800252c:	46bd      	mov	sp, r7
 800252e:	bd80      	pop	{r7, pc}

08002530 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	b0ba      	sub	sp, #232	; 0xe8
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	68db      	ldr	r3, [r3, #12]
 8002548:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	695b      	ldr	r3, [r3, #20]
 8002552:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8002556:	2300      	movs	r3, #0
 8002558:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800255c:	2300      	movs	r3, #0
 800255e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002562:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002566:	f003 030f 	and.w	r3, r3, #15
 800256a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800256e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002572:	2b00      	cmp	r3, #0
 8002574:	d10f      	bne.n	8002596 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002576:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800257a:	f003 0320 	and.w	r3, r3, #32
 800257e:	2b00      	cmp	r3, #0
 8002580:	d009      	beq.n	8002596 <HAL_UART_IRQHandler+0x66>
 8002582:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002586:	f003 0320 	and.w	r3, r3, #32
 800258a:	2b00      	cmp	r3, #0
 800258c:	d003      	beq.n	8002596 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800258e:	6878      	ldr	r0, [r7, #4]
 8002590:	f000 fb99 	bl	8002cc6 <UART_Receive_IT>
      return;
 8002594:	e256      	b.n	8002a44 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002596:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800259a:	2b00      	cmp	r3, #0
 800259c:	f000 80de 	beq.w	800275c <HAL_UART_IRQHandler+0x22c>
 80025a0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80025a4:	f003 0301 	and.w	r3, r3, #1
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d106      	bne.n	80025ba <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80025ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80025b0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	f000 80d1 	beq.w	800275c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80025ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80025be:	f003 0301 	and.w	r3, r3, #1
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d00b      	beq.n	80025de <HAL_UART_IRQHandler+0xae>
 80025c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80025ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d005      	beq.n	80025de <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025d6:	f043 0201 	orr.w	r2, r3, #1
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80025de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80025e2:	f003 0304 	and.w	r3, r3, #4
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d00b      	beq.n	8002602 <HAL_UART_IRQHandler+0xd2>
 80025ea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80025ee:	f003 0301 	and.w	r3, r3, #1
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d005      	beq.n	8002602 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025fa:	f043 0202 	orr.w	r2, r3, #2
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002602:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002606:	f003 0302 	and.w	r3, r3, #2
 800260a:	2b00      	cmp	r3, #0
 800260c:	d00b      	beq.n	8002626 <HAL_UART_IRQHandler+0xf6>
 800260e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002612:	f003 0301 	and.w	r3, r3, #1
 8002616:	2b00      	cmp	r3, #0
 8002618:	d005      	beq.n	8002626 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800261e:	f043 0204 	orr.w	r2, r3, #4
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002626:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800262a:	f003 0308 	and.w	r3, r3, #8
 800262e:	2b00      	cmp	r3, #0
 8002630:	d011      	beq.n	8002656 <HAL_UART_IRQHandler+0x126>
 8002632:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002636:	f003 0320 	and.w	r3, r3, #32
 800263a:	2b00      	cmp	r3, #0
 800263c:	d105      	bne.n	800264a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800263e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002642:	f003 0301 	and.w	r3, r3, #1
 8002646:	2b00      	cmp	r3, #0
 8002648:	d005      	beq.n	8002656 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800264e:	f043 0208 	orr.w	r2, r3, #8
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800265a:	2b00      	cmp	r3, #0
 800265c:	f000 81ed 	beq.w	8002a3a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002660:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002664:	f003 0320 	and.w	r3, r3, #32
 8002668:	2b00      	cmp	r3, #0
 800266a:	d008      	beq.n	800267e <HAL_UART_IRQHandler+0x14e>
 800266c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002670:	f003 0320 	and.w	r3, r3, #32
 8002674:	2b00      	cmp	r3, #0
 8002676:	d002      	beq.n	800267e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002678:	6878      	ldr	r0, [r7, #4]
 800267a:	f000 fb24 	bl	8002cc6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	695b      	ldr	r3, [r3, #20]
 8002684:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002688:	2b40      	cmp	r3, #64	; 0x40
 800268a:	bf0c      	ite	eq
 800268c:	2301      	moveq	r3, #1
 800268e:	2300      	movne	r3, #0
 8002690:	b2db      	uxtb	r3, r3
 8002692:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800269a:	f003 0308 	and.w	r3, r3, #8
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d103      	bne.n	80026aa <HAL_UART_IRQHandler+0x17a>
 80026a2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d04f      	beq.n	800274a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80026aa:	6878      	ldr	r0, [r7, #4]
 80026ac:	f000 fa2c 	bl	8002b08 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	695b      	ldr	r3, [r3, #20]
 80026b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026ba:	2b40      	cmp	r3, #64	; 0x40
 80026bc:	d141      	bne.n	8002742 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	3314      	adds	r3, #20
 80026c4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80026c8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80026cc:	e853 3f00 	ldrex	r3, [r3]
 80026d0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80026d4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80026d8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80026dc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	3314      	adds	r3, #20
 80026e6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80026ea:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80026ee:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80026f2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80026f6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80026fa:	e841 2300 	strex	r3, r2, [r1]
 80026fe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002702:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002706:	2b00      	cmp	r3, #0
 8002708:	d1d9      	bne.n	80026be <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800270e:	2b00      	cmp	r3, #0
 8002710:	d013      	beq.n	800273a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002716:	4a7d      	ldr	r2, [pc, #500]	; (800290c <HAL_UART_IRQHandler+0x3dc>)
 8002718:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800271e:	4618      	mov	r0, r3
 8002720:	f7fe fc9f 	bl	8001062 <HAL_DMA_Abort_IT>
 8002724:	4603      	mov	r3, r0
 8002726:	2b00      	cmp	r3, #0
 8002728:	d016      	beq.n	8002758 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800272e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002730:	687a      	ldr	r2, [r7, #4]
 8002732:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002734:	4610      	mov	r0, r2
 8002736:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002738:	e00e      	b.n	8002758 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800273a:	6878      	ldr	r0, [r7, #4]
 800273c:	f000 f990 	bl	8002a60 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002740:	e00a      	b.n	8002758 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002742:	6878      	ldr	r0, [r7, #4]
 8002744:	f000 f98c 	bl	8002a60 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002748:	e006      	b.n	8002758 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800274a:	6878      	ldr	r0, [r7, #4]
 800274c:	f000 f988 	bl	8002a60 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	2200      	movs	r2, #0
 8002754:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8002756:	e170      	b.n	8002a3a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002758:	bf00      	nop
    return;
 800275a:	e16e      	b.n	8002a3a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002760:	2b01      	cmp	r3, #1
 8002762:	f040 814a 	bne.w	80029fa <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002766:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800276a:	f003 0310 	and.w	r3, r3, #16
 800276e:	2b00      	cmp	r3, #0
 8002770:	f000 8143 	beq.w	80029fa <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002774:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002778:	f003 0310 	and.w	r3, r3, #16
 800277c:	2b00      	cmp	r3, #0
 800277e:	f000 813c 	beq.w	80029fa <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002782:	2300      	movs	r3, #0
 8002784:	60bb      	str	r3, [r7, #8]
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	60bb      	str	r3, [r7, #8]
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	685b      	ldr	r3, [r3, #4]
 8002794:	60bb      	str	r3, [r7, #8]
 8002796:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	695b      	ldr	r3, [r3, #20]
 800279e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027a2:	2b40      	cmp	r3, #64	; 0x40
 80027a4:	f040 80b4 	bne.w	8002910 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	685b      	ldr	r3, [r3, #4]
 80027b0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80027b4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	f000 8140 	beq.w	8002a3e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80027c2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80027c6:	429a      	cmp	r2, r3
 80027c8:	f080 8139 	bcs.w	8002a3e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80027d2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027d8:	69db      	ldr	r3, [r3, #28]
 80027da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80027de:	f000 8088 	beq.w	80028f2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	330c      	adds	r3, #12
 80027e8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80027ec:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80027f0:	e853 3f00 	ldrex	r3, [r3]
 80027f4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80027f8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80027fc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002800:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	330c      	adds	r3, #12
 800280a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800280e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002812:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002816:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800281a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800281e:	e841 2300 	strex	r3, r2, [r1]
 8002822:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002826:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800282a:	2b00      	cmp	r3, #0
 800282c:	d1d9      	bne.n	80027e2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	3314      	adds	r3, #20
 8002834:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002836:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002838:	e853 3f00 	ldrex	r3, [r3]
 800283c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800283e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002840:	f023 0301 	bic.w	r3, r3, #1
 8002844:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	3314      	adds	r3, #20
 800284e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002852:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002856:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002858:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800285a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800285e:	e841 2300 	strex	r3, r2, [r1]
 8002862:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002864:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002866:	2b00      	cmp	r3, #0
 8002868:	d1e1      	bne.n	800282e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	3314      	adds	r3, #20
 8002870:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002872:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002874:	e853 3f00 	ldrex	r3, [r3]
 8002878:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800287a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800287c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002880:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	3314      	adds	r3, #20
 800288a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800288e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002890:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002892:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002894:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002896:	e841 2300 	strex	r3, r2, [r1]
 800289a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800289c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d1e3      	bne.n	800286a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	2220      	movs	r2, #32
 80028a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	2200      	movs	r2, #0
 80028ae:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	330c      	adds	r3, #12
 80028b6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80028ba:	e853 3f00 	ldrex	r3, [r3]
 80028be:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80028c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80028c2:	f023 0310 	bic.w	r3, r3, #16
 80028c6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	330c      	adds	r3, #12
 80028d0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80028d4:	65ba      	str	r2, [r7, #88]	; 0x58
 80028d6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028d8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80028da:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80028dc:	e841 2300 	strex	r3, r2, [r1]
 80028e0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80028e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d1e3      	bne.n	80028b0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028ec:	4618      	mov	r0, r3
 80028ee:	f7fe fb48 	bl	8000f82 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80028fa:	b29b      	uxth	r3, r3
 80028fc:	1ad3      	subs	r3, r2, r3
 80028fe:	b29b      	uxth	r3, r3
 8002900:	4619      	mov	r1, r3
 8002902:	6878      	ldr	r0, [r7, #4]
 8002904:	f000 f8b6 	bl	8002a74 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002908:	e099      	b.n	8002a3e <HAL_UART_IRQHandler+0x50e>
 800290a:	bf00      	nop
 800290c:	08002bcf 	.word	0x08002bcf
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002918:	b29b      	uxth	r3, r3
 800291a:	1ad3      	subs	r3, r2, r3
 800291c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002924:	b29b      	uxth	r3, r3
 8002926:	2b00      	cmp	r3, #0
 8002928:	f000 808b 	beq.w	8002a42 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800292c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002930:	2b00      	cmp	r3, #0
 8002932:	f000 8086 	beq.w	8002a42 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	330c      	adds	r3, #12
 800293c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800293e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002940:	e853 3f00 	ldrex	r3, [r3]
 8002944:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002946:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002948:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800294c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	330c      	adds	r3, #12
 8002956:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800295a:	647a      	str	r2, [r7, #68]	; 0x44
 800295c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800295e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002960:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002962:	e841 2300 	strex	r3, r2, [r1]
 8002966:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002968:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800296a:	2b00      	cmp	r3, #0
 800296c:	d1e3      	bne.n	8002936 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	3314      	adds	r3, #20
 8002974:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002978:	e853 3f00 	ldrex	r3, [r3]
 800297c:	623b      	str	r3, [r7, #32]
   return(result);
 800297e:	6a3b      	ldr	r3, [r7, #32]
 8002980:	f023 0301 	bic.w	r3, r3, #1
 8002984:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	3314      	adds	r3, #20
 800298e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002992:	633a      	str	r2, [r7, #48]	; 0x30
 8002994:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002996:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002998:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800299a:	e841 2300 	strex	r3, r2, [r1]
 800299e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80029a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d1e3      	bne.n	800296e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	2220      	movs	r2, #32
 80029aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	2200      	movs	r2, #0
 80029b2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	330c      	adds	r3, #12
 80029ba:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029bc:	693b      	ldr	r3, [r7, #16]
 80029be:	e853 3f00 	ldrex	r3, [r3]
 80029c2:	60fb      	str	r3, [r7, #12]
   return(result);
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	f023 0310 	bic.w	r3, r3, #16
 80029ca:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	330c      	adds	r3, #12
 80029d4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80029d8:	61fa      	str	r2, [r7, #28]
 80029da:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029dc:	69b9      	ldr	r1, [r7, #24]
 80029de:	69fa      	ldr	r2, [r7, #28]
 80029e0:	e841 2300 	strex	r3, r2, [r1]
 80029e4:	617b      	str	r3, [r7, #20]
   return(result);
 80029e6:	697b      	ldr	r3, [r7, #20]
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d1e3      	bne.n	80029b4 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80029ec:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80029f0:	4619      	mov	r1, r3
 80029f2:	6878      	ldr	r0, [r7, #4]
 80029f4:	f000 f83e 	bl	8002a74 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80029f8:	e023      	b.n	8002a42 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80029fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80029fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d009      	beq.n	8002a1a <HAL_UART_IRQHandler+0x4ea>
 8002a06:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002a0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d003      	beq.n	8002a1a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8002a12:	6878      	ldr	r0, [r7, #4]
 8002a14:	f000 f8ef 	bl	8002bf6 <UART_Transmit_IT>
    return;
 8002a18:	e014      	b.n	8002a44 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002a1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d00e      	beq.n	8002a44 <HAL_UART_IRQHandler+0x514>
 8002a26:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002a2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d008      	beq.n	8002a44 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8002a32:	6878      	ldr	r0, [r7, #4]
 8002a34:	f000 f92f 	bl	8002c96 <UART_EndTransmit_IT>
    return;
 8002a38:	e004      	b.n	8002a44 <HAL_UART_IRQHandler+0x514>
    return;
 8002a3a:	bf00      	nop
 8002a3c:	e002      	b.n	8002a44 <HAL_UART_IRQHandler+0x514>
      return;
 8002a3e:	bf00      	nop
 8002a40:	e000      	b.n	8002a44 <HAL_UART_IRQHandler+0x514>
      return;
 8002a42:	bf00      	nop
  }
}
 8002a44:	37e8      	adds	r7, #232	; 0xe8
 8002a46:	46bd      	mov	sp, r7
 8002a48:	bd80      	pop	{r7, pc}
 8002a4a:	bf00      	nop

08002a4c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002a4c:	b480      	push	{r7}
 8002a4e:	b083      	sub	sp, #12
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002a54:	bf00      	nop
 8002a56:	370c      	adds	r7, #12
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5e:	4770      	bx	lr

08002a60 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002a60:	b480      	push	{r7}
 8002a62:	b083      	sub	sp, #12
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002a68:	bf00      	nop
 8002a6a:	370c      	adds	r7, #12
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a72:	4770      	bx	lr

08002a74 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002a74:	b480      	push	{r7}
 8002a76:	b083      	sub	sp, #12
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
 8002a7c:	460b      	mov	r3, r1
 8002a7e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002a80:	bf00      	nop
 8002a82:	370c      	adds	r7, #12
 8002a84:	46bd      	mov	sp, r7
 8002a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8a:	4770      	bx	lr

08002a8c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002a8c:	b480      	push	{r7}
 8002a8e:	b085      	sub	sp, #20
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	60f8      	str	r0, [r7, #12]
 8002a94:	60b9      	str	r1, [r7, #8]
 8002a96:	4613      	mov	r3, r2
 8002a98:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	68ba      	ldr	r2, [r7, #8]
 8002a9e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	88fa      	ldrh	r2, [r7, #6]
 8002aa4:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	88fa      	ldrh	r2, [r7, #6]
 8002aaa:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	2200      	movs	r2, #0
 8002ab0:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	2222      	movs	r2, #34	; 0x22
 8002ab6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	2200      	movs	r2, #0
 8002abe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	691b      	ldr	r3, [r3, #16]
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d007      	beq.n	8002ada <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	68da      	ldr	r2, [r3, #12]
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002ad8:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	695a      	ldr	r2, [r3, #20]
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f042 0201 	orr.w	r2, r2, #1
 8002ae8:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	68da      	ldr	r2, [r3, #12]
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f042 0220 	orr.w	r2, r2, #32
 8002af8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8002afa:	2300      	movs	r3, #0
}
 8002afc:	4618      	mov	r0, r3
 8002afe:	3714      	adds	r7, #20
 8002b00:	46bd      	mov	sp, r7
 8002b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b06:	4770      	bx	lr

08002b08 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002b08:	b480      	push	{r7}
 8002b0a:	b095      	sub	sp, #84	; 0x54
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	330c      	adds	r3, #12
 8002b16:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b1a:	e853 3f00 	ldrex	r3, [r3]
 8002b1e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002b20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b22:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002b26:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	330c      	adds	r3, #12
 8002b2e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002b30:	643a      	str	r2, [r7, #64]	; 0x40
 8002b32:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b34:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002b36:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002b38:	e841 2300 	strex	r3, r2, [r1]
 8002b3c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002b3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d1e5      	bne.n	8002b10 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	3314      	adds	r3, #20
 8002b4a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b4c:	6a3b      	ldr	r3, [r7, #32]
 8002b4e:	e853 3f00 	ldrex	r3, [r3]
 8002b52:	61fb      	str	r3, [r7, #28]
   return(result);
 8002b54:	69fb      	ldr	r3, [r7, #28]
 8002b56:	f023 0301 	bic.w	r3, r3, #1
 8002b5a:	64bb      	str	r3, [r7, #72]	; 0x48
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	3314      	adds	r3, #20
 8002b62:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002b64:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002b66:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b68:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002b6a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002b6c:	e841 2300 	strex	r3, r2, [r1]
 8002b70:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002b72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d1e5      	bne.n	8002b44 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b7c:	2b01      	cmp	r3, #1
 8002b7e:	d119      	bne.n	8002bb4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	330c      	adds	r3, #12
 8002b86:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	e853 3f00 	ldrex	r3, [r3]
 8002b8e:	60bb      	str	r3, [r7, #8]
   return(result);
 8002b90:	68bb      	ldr	r3, [r7, #8]
 8002b92:	f023 0310 	bic.w	r3, r3, #16
 8002b96:	647b      	str	r3, [r7, #68]	; 0x44
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	330c      	adds	r3, #12
 8002b9e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002ba0:	61ba      	str	r2, [r7, #24]
 8002ba2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ba4:	6979      	ldr	r1, [r7, #20]
 8002ba6:	69ba      	ldr	r2, [r7, #24]
 8002ba8:	e841 2300 	strex	r3, r2, [r1]
 8002bac:	613b      	str	r3, [r7, #16]
   return(result);
 8002bae:	693b      	ldr	r3, [r7, #16]
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d1e5      	bne.n	8002b80 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	2220      	movs	r2, #32
 8002bb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002bc2:	bf00      	nop
 8002bc4:	3754      	adds	r7, #84	; 0x54
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bcc:	4770      	bx	lr

08002bce <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002bce:	b580      	push	{r7, lr}
 8002bd0:	b084      	sub	sp, #16
 8002bd2:	af00      	add	r7, sp, #0
 8002bd4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bda:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	2200      	movs	r2, #0
 8002be0:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	2200      	movs	r2, #0
 8002be6:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002be8:	68f8      	ldr	r0, [r7, #12]
 8002bea:	f7ff ff39 	bl	8002a60 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002bee:	bf00      	nop
 8002bf0:	3710      	adds	r7, #16
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	bd80      	pop	{r7, pc}

08002bf6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002bf6:	b480      	push	{r7}
 8002bf8:	b085      	sub	sp, #20
 8002bfa:	af00      	add	r7, sp, #0
 8002bfc:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c04:	b2db      	uxtb	r3, r3
 8002c06:	2b21      	cmp	r3, #33	; 0x21
 8002c08:	d13e      	bne.n	8002c88 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	689b      	ldr	r3, [r3, #8]
 8002c0e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c12:	d114      	bne.n	8002c3e <UART_Transmit_IT+0x48>
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	691b      	ldr	r3, [r3, #16]
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d110      	bne.n	8002c3e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	6a1b      	ldr	r3, [r3, #32]
 8002c20:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	881b      	ldrh	r3, [r3, #0]
 8002c26:	461a      	mov	r2, r3
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002c30:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	6a1b      	ldr	r3, [r3, #32]
 8002c36:	1c9a      	adds	r2, r3, #2
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	621a      	str	r2, [r3, #32]
 8002c3c:	e008      	b.n	8002c50 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6a1b      	ldr	r3, [r3, #32]
 8002c42:	1c59      	adds	r1, r3, #1
 8002c44:	687a      	ldr	r2, [r7, #4]
 8002c46:	6211      	str	r1, [r2, #32]
 8002c48:	781a      	ldrb	r2, [r3, #0]
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002c54:	b29b      	uxth	r3, r3
 8002c56:	3b01      	subs	r3, #1
 8002c58:	b29b      	uxth	r3, r3
 8002c5a:	687a      	ldr	r2, [r7, #4]
 8002c5c:	4619      	mov	r1, r3
 8002c5e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d10f      	bne.n	8002c84 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	68da      	ldr	r2, [r3, #12]
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002c72:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	68da      	ldr	r2, [r3, #12]
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002c82:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002c84:	2300      	movs	r3, #0
 8002c86:	e000      	b.n	8002c8a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002c88:	2302      	movs	r3, #2
  }
}
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	3714      	adds	r7, #20
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c94:	4770      	bx	lr

08002c96 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002c96:	b580      	push	{r7, lr}
 8002c98:	b082      	sub	sp, #8
 8002c9a:	af00      	add	r7, sp, #0
 8002c9c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	68da      	ldr	r2, [r3, #12]
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002cac:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	2220      	movs	r2, #32
 8002cb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002cb6:	6878      	ldr	r0, [r7, #4]
 8002cb8:	f7ff fec8 	bl	8002a4c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002cbc:	2300      	movs	r3, #0
}
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	3708      	adds	r7, #8
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	bd80      	pop	{r7, pc}

08002cc6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002cc6:	b580      	push	{r7, lr}
 8002cc8:	b08c      	sub	sp, #48	; 0x30
 8002cca:	af00      	add	r7, sp, #0
 8002ccc:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002cd4:	b2db      	uxtb	r3, r3
 8002cd6:	2b22      	cmp	r3, #34	; 0x22
 8002cd8:	f040 80ab 	bne.w	8002e32 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	689b      	ldr	r3, [r3, #8]
 8002ce0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ce4:	d117      	bne.n	8002d16 <UART_Receive_IT+0x50>
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	691b      	ldr	r3, [r3, #16]
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d113      	bne.n	8002d16 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002cee:	2300      	movs	r3, #0
 8002cf0:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cf6:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	685b      	ldr	r3, [r3, #4]
 8002cfe:	b29b      	uxth	r3, r3
 8002d00:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002d04:	b29a      	uxth	r2, r3
 8002d06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d08:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d0e:	1c9a      	adds	r2, r3, #2
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	629a      	str	r2, [r3, #40]	; 0x28
 8002d14:	e026      	b.n	8002d64 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d1a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	689b      	ldr	r3, [r3, #8]
 8002d24:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d28:	d007      	beq.n	8002d3a <UART_Receive_IT+0x74>
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	689b      	ldr	r3, [r3, #8]
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d10a      	bne.n	8002d48 <UART_Receive_IT+0x82>
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	691b      	ldr	r3, [r3, #16]
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d106      	bne.n	8002d48 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	685b      	ldr	r3, [r3, #4]
 8002d40:	b2da      	uxtb	r2, r3
 8002d42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d44:	701a      	strb	r2, [r3, #0]
 8002d46:	e008      	b.n	8002d5a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	685b      	ldr	r3, [r3, #4]
 8002d4e:	b2db      	uxtb	r3, r3
 8002d50:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002d54:	b2da      	uxtb	r2, r3
 8002d56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d58:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d5e:	1c5a      	adds	r2, r3, #1
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002d68:	b29b      	uxth	r3, r3
 8002d6a:	3b01      	subs	r3, #1
 8002d6c:	b29b      	uxth	r3, r3
 8002d6e:	687a      	ldr	r2, [r7, #4]
 8002d70:	4619      	mov	r1, r3
 8002d72:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d15a      	bne.n	8002e2e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	68da      	ldr	r2, [r3, #12]
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f022 0220 	bic.w	r2, r2, #32
 8002d86:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	68da      	ldr	r2, [r3, #12]
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002d96:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	695a      	ldr	r2, [r3, #20]
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f022 0201 	bic.w	r2, r2, #1
 8002da6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2220      	movs	r2, #32
 8002dac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002db4:	2b01      	cmp	r3, #1
 8002db6:	d135      	bne.n	8002e24 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	2200      	movs	r2, #0
 8002dbc:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	330c      	adds	r3, #12
 8002dc4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002dc6:	697b      	ldr	r3, [r7, #20]
 8002dc8:	e853 3f00 	ldrex	r3, [r3]
 8002dcc:	613b      	str	r3, [r7, #16]
   return(result);
 8002dce:	693b      	ldr	r3, [r7, #16]
 8002dd0:	f023 0310 	bic.w	r3, r3, #16
 8002dd4:	627b      	str	r3, [r7, #36]	; 0x24
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	330c      	adds	r3, #12
 8002ddc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002dde:	623a      	str	r2, [r7, #32]
 8002de0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002de2:	69f9      	ldr	r1, [r7, #28]
 8002de4:	6a3a      	ldr	r2, [r7, #32]
 8002de6:	e841 2300 	strex	r3, r2, [r1]
 8002dea:	61bb      	str	r3, [r7, #24]
   return(result);
 8002dec:	69bb      	ldr	r3, [r7, #24]
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d1e5      	bne.n	8002dbe <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f003 0310 	and.w	r3, r3, #16
 8002dfc:	2b10      	cmp	r3, #16
 8002dfe:	d10a      	bne.n	8002e16 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002e00:	2300      	movs	r3, #0
 8002e02:	60fb      	str	r3, [r7, #12]
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	60fb      	str	r3, [r7, #12]
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	685b      	ldr	r3, [r3, #4]
 8002e12:	60fb      	str	r3, [r7, #12]
 8002e14:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002e1a:	4619      	mov	r1, r3
 8002e1c:	6878      	ldr	r0, [r7, #4]
 8002e1e:	f7ff fe29 	bl	8002a74 <HAL_UARTEx_RxEventCallback>
 8002e22:	e002      	b.n	8002e2a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8002e24:	6878      	ldr	r0, [r7, #4]
 8002e26:	f7fd fc51 	bl	80006cc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	e002      	b.n	8002e34 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8002e2e:	2300      	movs	r3, #0
 8002e30:	e000      	b.n	8002e34 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8002e32:	2302      	movs	r3, #2
  }
}
 8002e34:	4618      	mov	r0, r3
 8002e36:	3730      	adds	r7, #48	; 0x30
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	bd80      	pop	{r7, pc}

08002e3c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002e3c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002e40:	b0c0      	sub	sp, #256	; 0x100
 8002e42:	af00      	add	r7, sp, #0
 8002e44:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002e48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	691b      	ldr	r3, [r3, #16]
 8002e50:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002e54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e58:	68d9      	ldr	r1, [r3, #12]
 8002e5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e5e:	681a      	ldr	r2, [r3, #0]
 8002e60:	ea40 0301 	orr.w	r3, r0, r1
 8002e64:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002e66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e6a:	689a      	ldr	r2, [r3, #8]
 8002e6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e70:	691b      	ldr	r3, [r3, #16]
 8002e72:	431a      	orrs	r2, r3
 8002e74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e78:	695b      	ldr	r3, [r3, #20]
 8002e7a:	431a      	orrs	r2, r3
 8002e7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e80:	69db      	ldr	r3, [r3, #28]
 8002e82:	4313      	orrs	r3, r2
 8002e84:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002e88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	68db      	ldr	r3, [r3, #12]
 8002e90:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002e94:	f021 010c 	bic.w	r1, r1, #12
 8002e98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e9c:	681a      	ldr	r2, [r3, #0]
 8002e9e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002ea2:	430b      	orrs	r3, r1
 8002ea4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002ea6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	695b      	ldr	r3, [r3, #20]
 8002eae:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002eb2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002eb6:	6999      	ldr	r1, [r3, #24]
 8002eb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ebc:	681a      	ldr	r2, [r3, #0]
 8002ebe:	ea40 0301 	orr.w	r3, r0, r1
 8002ec2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002ec4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ec8:	681a      	ldr	r2, [r3, #0]
 8002eca:	4b8f      	ldr	r3, [pc, #572]	; (8003108 <UART_SetConfig+0x2cc>)
 8002ecc:	429a      	cmp	r2, r3
 8002ece:	d005      	beq.n	8002edc <UART_SetConfig+0xa0>
 8002ed0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ed4:	681a      	ldr	r2, [r3, #0]
 8002ed6:	4b8d      	ldr	r3, [pc, #564]	; (800310c <UART_SetConfig+0x2d0>)
 8002ed8:	429a      	cmp	r2, r3
 8002eda:	d104      	bne.n	8002ee6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002edc:	f7ff f824 	bl	8001f28 <HAL_RCC_GetPCLK2Freq>
 8002ee0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002ee4:	e003      	b.n	8002eee <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002ee6:	f7ff f80b 	bl	8001f00 <HAL_RCC_GetPCLK1Freq>
 8002eea:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002eee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ef2:	69db      	ldr	r3, [r3, #28]
 8002ef4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002ef8:	f040 810c 	bne.w	8003114 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002efc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002f00:	2200      	movs	r2, #0
 8002f02:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002f06:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002f0a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002f0e:	4622      	mov	r2, r4
 8002f10:	462b      	mov	r3, r5
 8002f12:	1891      	adds	r1, r2, r2
 8002f14:	65b9      	str	r1, [r7, #88]	; 0x58
 8002f16:	415b      	adcs	r3, r3
 8002f18:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002f1a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002f1e:	4621      	mov	r1, r4
 8002f20:	eb12 0801 	adds.w	r8, r2, r1
 8002f24:	4629      	mov	r1, r5
 8002f26:	eb43 0901 	adc.w	r9, r3, r1
 8002f2a:	f04f 0200 	mov.w	r2, #0
 8002f2e:	f04f 0300 	mov.w	r3, #0
 8002f32:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002f36:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002f3a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002f3e:	4690      	mov	r8, r2
 8002f40:	4699      	mov	r9, r3
 8002f42:	4623      	mov	r3, r4
 8002f44:	eb18 0303 	adds.w	r3, r8, r3
 8002f48:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002f4c:	462b      	mov	r3, r5
 8002f4e:	eb49 0303 	adc.w	r3, r9, r3
 8002f52:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002f56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f5a:	685b      	ldr	r3, [r3, #4]
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002f62:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002f66:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002f6a:	460b      	mov	r3, r1
 8002f6c:	18db      	adds	r3, r3, r3
 8002f6e:	653b      	str	r3, [r7, #80]	; 0x50
 8002f70:	4613      	mov	r3, r2
 8002f72:	eb42 0303 	adc.w	r3, r2, r3
 8002f76:	657b      	str	r3, [r7, #84]	; 0x54
 8002f78:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002f7c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002f80:	f7fd f92a 	bl	80001d8 <__aeabi_uldivmod>
 8002f84:	4602      	mov	r2, r0
 8002f86:	460b      	mov	r3, r1
 8002f88:	4b61      	ldr	r3, [pc, #388]	; (8003110 <UART_SetConfig+0x2d4>)
 8002f8a:	fba3 2302 	umull	r2, r3, r3, r2
 8002f8e:	095b      	lsrs	r3, r3, #5
 8002f90:	011c      	lsls	r4, r3, #4
 8002f92:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002f96:	2200      	movs	r2, #0
 8002f98:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002f9c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002fa0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002fa4:	4642      	mov	r2, r8
 8002fa6:	464b      	mov	r3, r9
 8002fa8:	1891      	adds	r1, r2, r2
 8002faa:	64b9      	str	r1, [r7, #72]	; 0x48
 8002fac:	415b      	adcs	r3, r3
 8002fae:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002fb0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002fb4:	4641      	mov	r1, r8
 8002fb6:	eb12 0a01 	adds.w	sl, r2, r1
 8002fba:	4649      	mov	r1, r9
 8002fbc:	eb43 0b01 	adc.w	fp, r3, r1
 8002fc0:	f04f 0200 	mov.w	r2, #0
 8002fc4:	f04f 0300 	mov.w	r3, #0
 8002fc8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002fcc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002fd0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002fd4:	4692      	mov	sl, r2
 8002fd6:	469b      	mov	fp, r3
 8002fd8:	4643      	mov	r3, r8
 8002fda:	eb1a 0303 	adds.w	r3, sl, r3
 8002fde:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002fe2:	464b      	mov	r3, r9
 8002fe4:	eb4b 0303 	adc.w	r3, fp, r3
 8002fe8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002fec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ff0:	685b      	ldr	r3, [r3, #4]
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002ff8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002ffc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003000:	460b      	mov	r3, r1
 8003002:	18db      	adds	r3, r3, r3
 8003004:	643b      	str	r3, [r7, #64]	; 0x40
 8003006:	4613      	mov	r3, r2
 8003008:	eb42 0303 	adc.w	r3, r2, r3
 800300c:	647b      	str	r3, [r7, #68]	; 0x44
 800300e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003012:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003016:	f7fd f8df 	bl	80001d8 <__aeabi_uldivmod>
 800301a:	4602      	mov	r2, r0
 800301c:	460b      	mov	r3, r1
 800301e:	4611      	mov	r1, r2
 8003020:	4b3b      	ldr	r3, [pc, #236]	; (8003110 <UART_SetConfig+0x2d4>)
 8003022:	fba3 2301 	umull	r2, r3, r3, r1
 8003026:	095b      	lsrs	r3, r3, #5
 8003028:	2264      	movs	r2, #100	; 0x64
 800302a:	fb02 f303 	mul.w	r3, r2, r3
 800302e:	1acb      	subs	r3, r1, r3
 8003030:	00db      	lsls	r3, r3, #3
 8003032:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003036:	4b36      	ldr	r3, [pc, #216]	; (8003110 <UART_SetConfig+0x2d4>)
 8003038:	fba3 2302 	umull	r2, r3, r3, r2
 800303c:	095b      	lsrs	r3, r3, #5
 800303e:	005b      	lsls	r3, r3, #1
 8003040:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003044:	441c      	add	r4, r3
 8003046:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800304a:	2200      	movs	r2, #0
 800304c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003050:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003054:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003058:	4642      	mov	r2, r8
 800305a:	464b      	mov	r3, r9
 800305c:	1891      	adds	r1, r2, r2
 800305e:	63b9      	str	r1, [r7, #56]	; 0x38
 8003060:	415b      	adcs	r3, r3
 8003062:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003064:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003068:	4641      	mov	r1, r8
 800306a:	1851      	adds	r1, r2, r1
 800306c:	6339      	str	r1, [r7, #48]	; 0x30
 800306e:	4649      	mov	r1, r9
 8003070:	414b      	adcs	r3, r1
 8003072:	637b      	str	r3, [r7, #52]	; 0x34
 8003074:	f04f 0200 	mov.w	r2, #0
 8003078:	f04f 0300 	mov.w	r3, #0
 800307c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003080:	4659      	mov	r1, fp
 8003082:	00cb      	lsls	r3, r1, #3
 8003084:	4651      	mov	r1, sl
 8003086:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800308a:	4651      	mov	r1, sl
 800308c:	00ca      	lsls	r2, r1, #3
 800308e:	4610      	mov	r0, r2
 8003090:	4619      	mov	r1, r3
 8003092:	4603      	mov	r3, r0
 8003094:	4642      	mov	r2, r8
 8003096:	189b      	adds	r3, r3, r2
 8003098:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800309c:	464b      	mov	r3, r9
 800309e:	460a      	mov	r2, r1
 80030a0:	eb42 0303 	adc.w	r3, r2, r3
 80030a4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80030a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030ac:	685b      	ldr	r3, [r3, #4]
 80030ae:	2200      	movs	r2, #0
 80030b0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80030b4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80030b8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80030bc:	460b      	mov	r3, r1
 80030be:	18db      	adds	r3, r3, r3
 80030c0:	62bb      	str	r3, [r7, #40]	; 0x28
 80030c2:	4613      	mov	r3, r2
 80030c4:	eb42 0303 	adc.w	r3, r2, r3
 80030c8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80030ca:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80030ce:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80030d2:	f7fd f881 	bl	80001d8 <__aeabi_uldivmod>
 80030d6:	4602      	mov	r2, r0
 80030d8:	460b      	mov	r3, r1
 80030da:	4b0d      	ldr	r3, [pc, #52]	; (8003110 <UART_SetConfig+0x2d4>)
 80030dc:	fba3 1302 	umull	r1, r3, r3, r2
 80030e0:	095b      	lsrs	r3, r3, #5
 80030e2:	2164      	movs	r1, #100	; 0x64
 80030e4:	fb01 f303 	mul.w	r3, r1, r3
 80030e8:	1ad3      	subs	r3, r2, r3
 80030ea:	00db      	lsls	r3, r3, #3
 80030ec:	3332      	adds	r3, #50	; 0x32
 80030ee:	4a08      	ldr	r2, [pc, #32]	; (8003110 <UART_SetConfig+0x2d4>)
 80030f0:	fba2 2303 	umull	r2, r3, r2, r3
 80030f4:	095b      	lsrs	r3, r3, #5
 80030f6:	f003 0207 	and.w	r2, r3, #7
 80030fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	4422      	add	r2, r4
 8003102:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003104:	e105      	b.n	8003312 <UART_SetConfig+0x4d6>
 8003106:	bf00      	nop
 8003108:	40011000 	.word	0x40011000
 800310c:	40011400 	.word	0x40011400
 8003110:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003114:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003118:	2200      	movs	r2, #0
 800311a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800311e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003122:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003126:	4642      	mov	r2, r8
 8003128:	464b      	mov	r3, r9
 800312a:	1891      	adds	r1, r2, r2
 800312c:	6239      	str	r1, [r7, #32]
 800312e:	415b      	adcs	r3, r3
 8003130:	627b      	str	r3, [r7, #36]	; 0x24
 8003132:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003136:	4641      	mov	r1, r8
 8003138:	1854      	adds	r4, r2, r1
 800313a:	4649      	mov	r1, r9
 800313c:	eb43 0501 	adc.w	r5, r3, r1
 8003140:	f04f 0200 	mov.w	r2, #0
 8003144:	f04f 0300 	mov.w	r3, #0
 8003148:	00eb      	lsls	r3, r5, #3
 800314a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800314e:	00e2      	lsls	r2, r4, #3
 8003150:	4614      	mov	r4, r2
 8003152:	461d      	mov	r5, r3
 8003154:	4643      	mov	r3, r8
 8003156:	18e3      	adds	r3, r4, r3
 8003158:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800315c:	464b      	mov	r3, r9
 800315e:	eb45 0303 	adc.w	r3, r5, r3
 8003162:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003166:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800316a:	685b      	ldr	r3, [r3, #4]
 800316c:	2200      	movs	r2, #0
 800316e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003172:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003176:	f04f 0200 	mov.w	r2, #0
 800317a:	f04f 0300 	mov.w	r3, #0
 800317e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003182:	4629      	mov	r1, r5
 8003184:	008b      	lsls	r3, r1, #2
 8003186:	4621      	mov	r1, r4
 8003188:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800318c:	4621      	mov	r1, r4
 800318e:	008a      	lsls	r2, r1, #2
 8003190:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003194:	f7fd f820 	bl	80001d8 <__aeabi_uldivmod>
 8003198:	4602      	mov	r2, r0
 800319a:	460b      	mov	r3, r1
 800319c:	4b60      	ldr	r3, [pc, #384]	; (8003320 <UART_SetConfig+0x4e4>)
 800319e:	fba3 2302 	umull	r2, r3, r3, r2
 80031a2:	095b      	lsrs	r3, r3, #5
 80031a4:	011c      	lsls	r4, r3, #4
 80031a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80031aa:	2200      	movs	r2, #0
 80031ac:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80031b0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80031b4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80031b8:	4642      	mov	r2, r8
 80031ba:	464b      	mov	r3, r9
 80031bc:	1891      	adds	r1, r2, r2
 80031be:	61b9      	str	r1, [r7, #24]
 80031c0:	415b      	adcs	r3, r3
 80031c2:	61fb      	str	r3, [r7, #28]
 80031c4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80031c8:	4641      	mov	r1, r8
 80031ca:	1851      	adds	r1, r2, r1
 80031cc:	6139      	str	r1, [r7, #16]
 80031ce:	4649      	mov	r1, r9
 80031d0:	414b      	adcs	r3, r1
 80031d2:	617b      	str	r3, [r7, #20]
 80031d4:	f04f 0200 	mov.w	r2, #0
 80031d8:	f04f 0300 	mov.w	r3, #0
 80031dc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80031e0:	4659      	mov	r1, fp
 80031e2:	00cb      	lsls	r3, r1, #3
 80031e4:	4651      	mov	r1, sl
 80031e6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80031ea:	4651      	mov	r1, sl
 80031ec:	00ca      	lsls	r2, r1, #3
 80031ee:	4610      	mov	r0, r2
 80031f0:	4619      	mov	r1, r3
 80031f2:	4603      	mov	r3, r0
 80031f4:	4642      	mov	r2, r8
 80031f6:	189b      	adds	r3, r3, r2
 80031f8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80031fc:	464b      	mov	r3, r9
 80031fe:	460a      	mov	r2, r1
 8003200:	eb42 0303 	adc.w	r3, r2, r3
 8003204:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003208:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800320c:	685b      	ldr	r3, [r3, #4]
 800320e:	2200      	movs	r2, #0
 8003210:	67bb      	str	r3, [r7, #120]	; 0x78
 8003212:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003214:	f04f 0200 	mov.w	r2, #0
 8003218:	f04f 0300 	mov.w	r3, #0
 800321c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003220:	4649      	mov	r1, r9
 8003222:	008b      	lsls	r3, r1, #2
 8003224:	4641      	mov	r1, r8
 8003226:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800322a:	4641      	mov	r1, r8
 800322c:	008a      	lsls	r2, r1, #2
 800322e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003232:	f7fc ffd1 	bl	80001d8 <__aeabi_uldivmod>
 8003236:	4602      	mov	r2, r0
 8003238:	460b      	mov	r3, r1
 800323a:	4b39      	ldr	r3, [pc, #228]	; (8003320 <UART_SetConfig+0x4e4>)
 800323c:	fba3 1302 	umull	r1, r3, r3, r2
 8003240:	095b      	lsrs	r3, r3, #5
 8003242:	2164      	movs	r1, #100	; 0x64
 8003244:	fb01 f303 	mul.w	r3, r1, r3
 8003248:	1ad3      	subs	r3, r2, r3
 800324a:	011b      	lsls	r3, r3, #4
 800324c:	3332      	adds	r3, #50	; 0x32
 800324e:	4a34      	ldr	r2, [pc, #208]	; (8003320 <UART_SetConfig+0x4e4>)
 8003250:	fba2 2303 	umull	r2, r3, r2, r3
 8003254:	095b      	lsrs	r3, r3, #5
 8003256:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800325a:	441c      	add	r4, r3
 800325c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003260:	2200      	movs	r2, #0
 8003262:	673b      	str	r3, [r7, #112]	; 0x70
 8003264:	677a      	str	r2, [r7, #116]	; 0x74
 8003266:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800326a:	4642      	mov	r2, r8
 800326c:	464b      	mov	r3, r9
 800326e:	1891      	adds	r1, r2, r2
 8003270:	60b9      	str	r1, [r7, #8]
 8003272:	415b      	adcs	r3, r3
 8003274:	60fb      	str	r3, [r7, #12]
 8003276:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800327a:	4641      	mov	r1, r8
 800327c:	1851      	adds	r1, r2, r1
 800327e:	6039      	str	r1, [r7, #0]
 8003280:	4649      	mov	r1, r9
 8003282:	414b      	adcs	r3, r1
 8003284:	607b      	str	r3, [r7, #4]
 8003286:	f04f 0200 	mov.w	r2, #0
 800328a:	f04f 0300 	mov.w	r3, #0
 800328e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003292:	4659      	mov	r1, fp
 8003294:	00cb      	lsls	r3, r1, #3
 8003296:	4651      	mov	r1, sl
 8003298:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800329c:	4651      	mov	r1, sl
 800329e:	00ca      	lsls	r2, r1, #3
 80032a0:	4610      	mov	r0, r2
 80032a2:	4619      	mov	r1, r3
 80032a4:	4603      	mov	r3, r0
 80032a6:	4642      	mov	r2, r8
 80032a8:	189b      	adds	r3, r3, r2
 80032aa:	66bb      	str	r3, [r7, #104]	; 0x68
 80032ac:	464b      	mov	r3, r9
 80032ae:	460a      	mov	r2, r1
 80032b0:	eb42 0303 	adc.w	r3, r2, r3
 80032b4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80032b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032ba:	685b      	ldr	r3, [r3, #4]
 80032bc:	2200      	movs	r2, #0
 80032be:	663b      	str	r3, [r7, #96]	; 0x60
 80032c0:	667a      	str	r2, [r7, #100]	; 0x64
 80032c2:	f04f 0200 	mov.w	r2, #0
 80032c6:	f04f 0300 	mov.w	r3, #0
 80032ca:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80032ce:	4649      	mov	r1, r9
 80032d0:	008b      	lsls	r3, r1, #2
 80032d2:	4641      	mov	r1, r8
 80032d4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80032d8:	4641      	mov	r1, r8
 80032da:	008a      	lsls	r2, r1, #2
 80032dc:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80032e0:	f7fc ff7a 	bl	80001d8 <__aeabi_uldivmod>
 80032e4:	4602      	mov	r2, r0
 80032e6:	460b      	mov	r3, r1
 80032e8:	4b0d      	ldr	r3, [pc, #52]	; (8003320 <UART_SetConfig+0x4e4>)
 80032ea:	fba3 1302 	umull	r1, r3, r3, r2
 80032ee:	095b      	lsrs	r3, r3, #5
 80032f0:	2164      	movs	r1, #100	; 0x64
 80032f2:	fb01 f303 	mul.w	r3, r1, r3
 80032f6:	1ad3      	subs	r3, r2, r3
 80032f8:	011b      	lsls	r3, r3, #4
 80032fa:	3332      	adds	r3, #50	; 0x32
 80032fc:	4a08      	ldr	r2, [pc, #32]	; (8003320 <UART_SetConfig+0x4e4>)
 80032fe:	fba2 2303 	umull	r2, r3, r2, r3
 8003302:	095b      	lsrs	r3, r3, #5
 8003304:	f003 020f 	and.w	r2, r3, #15
 8003308:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	4422      	add	r2, r4
 8003310:	609a      	str	r2, [r3, #8]
}
 8003312:	bf00      	nop
 8003314:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003318:	46bd      	mov	sp, r7
 800331a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800331e:	bf00      	nop
 8003320:	51eb851f 	.word	0x51eb851f

08003324 <__libc_init_array>:
 8003324:	b570      	push	{r4, r5, r6, lr}
 8003326:	4d0d      	ldr	r5, [pc, #52]	; (800335c <__libc_init_array+0x38>)
 8003328:	4c0d      	ldr	r4, [pc, #52]	; (8003360 <__libc_init_array+0x3c>)
 800332a:	1b64      	subs	r4, r4, r5
 800332c:	10a4      	asrs	r4, r4, #2
 800332e:	2600      	movs	r6, #0
 8003330:	42a6      	cmp	r6, r4
 8003332:	d109      	bne.n	8003348 <__libc_init_array+0x24>
 8003334:	4d0b      	ldr	r5, [pc, #44]	; (8003364 <__libc_init_array+0x40>)
 8003336:	4c0c      	ldr	r4, [pc, #48]	; (8003368 <__libc_init_array+0x44>)
 8003338:	f000 f820 	bl	800337c <_init>
 800333c:	1b64      	subs	r4, r4, r5
 800333e:	10a4      	asrs	r4, r4, #2
 8003340:	2600      	movs	r6, #0
 8003342:	42a6      	cmp	r6, r4
 8003344:	d105      	bne.n	8003352 <__libc_init_array+0x2e>
 8003346:	bd70      	pop	{r4, r5, r6, pc}
 8003348:	f855 3b04 	ldr.w	r3, [r5], #4
 800334c:	4798      	blx	r3
 800334e:	3601      	adds	r6, #1
 8003350:	e7ee      	b.n	8003330 <__libc_init_array+0xc>
 8003352:	f855 3b04 	ldr.w	r3, [r5], #4
 8003356:	4798      	blx	r3
 8003358:	3601      	adds	r6, #1
 800335a:	e7f2      	b.n	8003342 <__libc_init_array+0x1e>
 800335c:	080033b4 	.word	0x080033b4
 8003360:	080033b4 	.word	0x080033b4
 8003364:	080033b4 	.word	0x080033b4
 8003368:	080033b8 	.word	0x080033b8

0800336c <memset>:
 800336c:	4402      	add	r2, r0
 800336e:	4603      	mov	r3, r0
 8003370:	4293      	cmp	r3, r2
 8003372:	d100      	bne.n	8003376 <memset+0xa>
 8003374:	4770      	bx	lr
 8003376:	f803 1b01 	strb.w	r1, [r3], #1
 800337a:	e7f9      	b.n	8003370 <memset+0x4>

0800337c <_init>:
 800337c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800337e:	bf00      	nop
 8003380:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003382:	bc08      	pop	{r3}
 8003384:	469e      	mov	lr, r3
 8003386:	4770      	bx	lr

08003388 <_fini>:
 8003388:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800338a:	bf00      	nop
 800338c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800338e:	bc08      	pop	{r3}
 8003390:	469e      	mov	lr, r3
 8003392:	4770      	bx	lr
