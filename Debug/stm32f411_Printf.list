
stm32f411_Printf.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003d88  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002acc  08003f20  08003f20  00013f20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080069ec  080069ec  00020080  2**0
                  CONTENTS
  4 .ARM          00000008  080069ec  080069ec  000169ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080069f4  080069f4  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080069f4  080069f4  000169f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080069f8  080069f8  000169f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  080069fc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000015c  20000080  08006a7c  00020080  2**2
                  ALLOC
 10 ._user_heap_stack 00000c04  200001dc  08006a7c  000201dc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010831  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002b43  00000000  00000000  000308e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e50  00000000  00000000  00033428  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000cf0  00000000  00000000  00034278  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017bcb  00000000  00000000  00034f68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014eb8  00000000  00000000  0004cb33  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00090126  00000000  00000000  000619eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f1b11  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003adc  00000000  00000000  000f1b64  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000080 	.word	0x20000080
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08003f08 	.word	0x08003f08

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000084 	.word	0x20000084
 80001d4:	08003f08 	.word	0x08003f08

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b974 	b.w	80004d8 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	468e      	mov	lr, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	d14d      	bne.n	80002b2 <__udivmoddi4+0xaa>
 8000216:	428a      	cmp	r2, r1
 8000218:	4694      	mov	ip, r2
 800021a:	d969      	bls.n	80002f0 <__udivmoddi4+0xe8>
 800021c:	fab2 f282 	clz	r2, r2
 8000220:	b152      	cbz	r2, 8000238 <__udivmoddi4+0x30>
 8000222:	fa01 f302 	lsl.w	r3, r1, r2
 8000226:	f1c2 0120 	rsb	r1, r2, #32
 800022a:	fa20 f101 	lsr.w	r1, r0, r1
 800022e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000232:	ea41 0e03 	orr.w	lr, r1, r3
 8000236:	4094      	lsls	r4, r2
 8000238:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800023c:	0c21      	lsrs	r1, r4, #16
 800023e:	fbbe f6f8 	udiv	r6, lr, r8
 8000242:	fa1f f78c 	uxth.w	r7, ip
 8000246:	fb08 e316 	mls	r3, r8, r6, lr
 800024a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800024e:	fb06 f107 	mul.w	r1, r6, r7
 8000252:	4299      	cmp	r1, r3
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x64>
 8000256:	eb1c 0303 	adds.w	r3, ip, r3
 800025a:	f106 30ff 	add.w	r0, r6, #4294967295
 800025e:	f080 811f 	bcs.w	80004a0 <__udivmoddi4+0x298>
 8000262:	4299      	cmp	r1, r3
 8000264:	f240 811c 	bls.w	80004a0 <__udivmoddi4+0x298>
 8000268:	3e02      	subs	r6, #2
 800026a:	4463      	add	r3, ip
 800026c:	1a5b      	subs	r3, r3, r1
 800026e:	b2a4      	uxth	r4, r4
 8000270:	fbb3 f0f8 	udiv	r0, r3, r8
 8000274:	fb08 3310 	mls	r3, r8, r0, r3
 8000278:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800027c:	fb00 f707 	mul.w	r7, r0, r7
 8000280:	42a7      	cmp	r7, r4
 8000282:	d90a      	bls.n	800029a <__udivmoddi4+0x92>
 8000284:	eb1c 0404 	adds.w	r4, ip, r4
 8000288:	f100 33ff 	add.w	r3, r0, #4294967295
 800028c:	f080 810a 	bcs.w	80004a4 <__udivmoddi4+0x29c>
 8000290:	42a7      	cmp	r7, r4
 8000292:	f240 8107 	bls.w	80004a4 <__udivmoddi4+0x29c>
 8000296:	4464      	add	r4, ip
 8000298:	3802      	subs	r0, #2
 800029a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800029e:	1be4      	subs	r4, r4, r7
 80002a0:	2600      	movs	r6, #0
 80002a2:	b11d      	cbz	r5, 80002ac <__udivmoddi4+0xa4>
 80002a4:	40d4      	lsrs	r4, r2
 80002a6:	2300      	movs	r3, #0
 80002a8:	e9c5 4300 	strd	r4, r3, [r5]
 80002ac:	4631      	mov	r1, r6
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d909      	bls.n	80002ca <__udivmoddi4+0xc2>
 80002b6:	2d00      	cmp	r5, #0
 80002b8:	f000 80ef 	beq.w	800049a <__udivmoddi4+0x292>
 80002bc:	2600      	movs	r6, #0
 80002be:	e9c5 0100 	strd	r0, r1, [r5]
 80002c2:	4630      	mov	r0, r6
 80002c4:	4631      	mov	r1, r6
 80002c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ca:	fab3 f683 	clz	r6, r3
 80002ce:	2e00      	cmp	r6, #0
 80002d0:	d14a      	bne.n	8000368 <__udivmoddi4+0x160>
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d302      	bcc.n	80002dc <__udivmoddi4+0xd4>
 80002d6:	4282      	cmp	r2, r0
 80002d8:	f200 80f9 	bhi.w	80004ce <__udivmoddi4+0x2c6>
 80002dc:	1a84      	subs	r4, r0, r2
 80002de:	eb61 0303 	sbc.w	r3, r1, r3
 80002e2:	2001      	movs	r0, #1
 80002e4:	469e      	mov	lr, r3
 80002e6:	2d00      	cmp	r5, #0
 80002e8:	d0e0      	beq.n	80002ac <__udivmoddi4+0xa4>
 80002ea:	e9c5 4e00 	strd	r4, lr, [r5]
 80002ee:	e7dd      	b.n	80002ac <__udivmoddi4+0xa4>
 80002f0:	b902      	cbnz	r2, 80002f4 <__udivmoddi4+0xec>
 80002f2:	deff      	udf	#255	; 0xff
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	2a00      	cmp	r2, #0
 80002fa:	f040 8092 	bne.w	8000422 <__udivmoddi4+0x21a>
 80002fe:	eba1 010c 	sub.w	r1, r1, ip
 8000302:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000306:	fa1f fe8c 	uxth.w	lr, ip
 800030a:	2601      	movs	r6, #1
 800030c:	0c20      	lsrs	r0, r4, #16
 800030e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000312:	fb07 1113 	mls	r1, r7, r3, r1
 8000316:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800031a:	fb0e f003 	mul.w	r0, lr, r3
 800031e:	4288      	cmp	r0, r1
 8000320:	d908      	bls.n	8000334 <__udivmoddi4+0x12c>
 8000322:	eb1c 0101 	adds.w	r1, ip, r1
 8000326:	f103 38ff 	add.w	r8, r3, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x12a>
 800032c:	4288      	cmp	r0, r1
 800032e:	f200 80cb 	bhi.w	80004c8 <__udivmoddi4+0x2c0>
 8000332:	4643      	mov	r3, r8
 8000334:	1a09      	subs	r1, r1, r0
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb1 f0f7 	udiv	r0, r1, r7
 800033c:	fb07 1110 	mls	r1, r7, r0, r1
 8000340:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000344:	fb0e fe00 	mul.w	lr, lr, r0
 8000348:	45a6      	cmp	lr, r4
 800034a:	d908      	bls.n	800035e <__udivmoddi4+0x156>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 31ff 	add.w	r1, r0, #4294967295
 8000354:	d202      	bcs.n	800035c <__udivmoddi4+0x154>
 8000356:	45a6      	cmp	lr, r4
 8000358:	f200 80bb 	bhi.w	80004d2 <__udivmoddi4+0x2ca>
 800035c:	4608      	mov	r0, r1
 800035e:	eba4 040e 	sub.w	r4, r4, lr
 8000362:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000366:	e79c      	b.n	80002a2 <__udivmoddi4+0x9a>
 8000368:	f1c6 0720 	rsb	r7, r6, #32
 800036c:	40b3      	lsls	r3, r6
 800036e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000372:	ea4c 0c03 	orr.w	ip, ip, r3
 8000376:	fa20 f407 	lsr.w	r4, r0, r7
 800037a:	fa01 f306 	lsl.w	r3, r1, r6
 800037e:	431c      	orrs	r4, r3
 8000380:	40f9      	lsrs	r1, r7
 8000382:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000386:	fa00 f306 	lsl.w	r3, r0, r6
 800038a:	fbb1 f8f9 	udiv	r8, r1, r9
 800038e:	0c20      	lsrs	r0, r4, #16
 8000390:	fa1f fe8c 	uxth.w	lr, ip
 8000394:	fb09 1118 	mls	r1, r9, r8, r1
 8000398:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800039c:	fb08 f00e 	mul.w	r0, r8, lr
 80003a0:	4288      	cmp	r0, r1
 80003a2:	fa02 f206 	lsl.w	r2, r2, r6
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b8>
 80003a8:	eb1c 0101 	adds.w	r1, ip, r1
 80003ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b0:	f080 8088 	bcs.w	80004c4 <__udivmoddi4+0x2bc>
 80003b4:	4288      	cmp	r0, r1
 80003b6:	f240 8085 	bls.w	80004c4 <__udivmoddi4+0x2bc>
 80003ba:	f1a8 0802 	sub.w	r8, r8, #2
 80003be:	4461      	add	r1, ip
 80003c0:	1a09      	subs	r1, r1, r0
 80003c2:	b2a4      	uxth	r4, r4
 80003c4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c8:	fb09 1110 	mls	r1, r9, r0, r1
 80003cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003d4:	458e      	cmp	lr, r1
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1e2>
 80003d8:	eb1c 0101 	adds.w	r1, ip, r1
 80003dc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003e0:	d26c      	bcs.n	80004bc <__udivmoddi4+0x2b4>
 80003e2:	458e      	cmp	lr, r1
 80003e4:	d96a      	bls.n	80004bc <__udivmoddi4+0x2b4>
 80003e6:	3802      	subs	r0, #2
 80003e8:	4461      	add	r1, ip
 80003ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003ee:	fba0 9402 	umull	r9, r4, r0, r2
 80003f2:	eba1 010e 	sub.w	r1, r1, lr
 80003f6:	42a1      	cmp	r1, r4
 80003f8:	46c8      	mov	r8, r9
 80003fa:	46a6      	mov	lr, r4
 80003fc:	d356      	bcc.n	80004ac <__udivmoddi4+0x2a4>
 80003fe:	d053      	beq.n	80004a8 <__udivmoddi4+0x2a0>
 8000400:	b15d      	cbz	r5, 800041a <__udivmoddi4+0x212>
 8000402:	ebb3 0208 	subs.w	r2, r3, r8
 8000406:	eb61 010e 	sbc.w	r1, r1, lr
 800040a:	fa01 f707 	lsl.w	r7, r1, r7
 800040e:	fa22 f306 	lsr.w	r3, r2, r6
 8000412:	40f1      	lsrs	r1, r6
 8000414:	431f      	orrs	r7, r3
 8000416:	e9c5 7100 	strd	r7, r1, [r5]
 800041a:	2600      	movs	r6, #0
 800041c:	4631      	mov	r1, r6
 800041e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000422:	f1c2 0320 	rsb	r3, r2, #32
 8000426:	40d8      	lsrs	r0, r3
 8000428:	fa0c fc02 	lsl.w	ip, ip, r2
 800042c:	fa21 f303 	lsr.w	r3, r1, r3
 8000430:	4091      	lsls	r1, r2
 8000432:	4301      	orrs	r1, r0
 8000434:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000440:	fb07 3610 	mls	r6, r7, r0, r3
 8000444:	0c0b      	lsrs	r3, r1, #16
 8000446:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800044a:	fb00 f60e 	mul.w	r6, r0, lr
 800044e:	429e      	cmp	r6, r3
 8000450:	fa04 f402 	lsl.w	r4, r4, r2
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x260>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 38ff 	add.w	r8, r0, #4294967295
 800045e:	d22f      	bcs.n	80004c0 <__udivmoddi4+0x2b8>
 8000460:	429e      	cmp	r6, r3
 8000462:	d92d      	bls.n	80004c0 <__udivmoddi4+0x2b8>
 8000464:	3802      	subs	r0, #2
 8000466:	4463      	add	r3, ip
 8000468:	1b9b      	subs	r3, r3, r6
 800046a:	b289      	uxth	r1, r1
 800046c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000470:	fb07 3316 	mls	r3, r7, r6, r3
 8000474:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000478:	fb06 f30e 	mul.w	r3, r6, lr
 800047c:	428b      	cmp	r3, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x28a>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f106 38ff 	add.w	r8, r6, #4294967295
 8000488:	d216      	bcs.n	80004b8 <__udivmoddi4+0x2b0>
 800048a:	428b      	cmp	r3, r1
 800048c:	d914      	bls.n	80004b8 <__udivmoddi4+0x2b0>
 800048e:	3e02      	subs	r6, #2
 8000490:	4461      	add	r1, ip
 8000492:	1ac9      	subs	r1, r1, r3
 8000494:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000498:	e738      	b.n	800030c <__udivmoddi4+0x104>
 800049a:	462e      	mov	r6, r5
 800049c:	4628      	mov	r0, r5
 800049e:	e705      	b.n	80002ac <__udivmoddi4+0xa4>
 80004a0:	4606      	mov	r6, r0
 80004a2:	e6e3      	b.n	800026c <__udivmoddi4+0x64>
 80004a4:	4618      	mov	r0, r3
 80004a6:	e6f8      	b.n	800029a <__udivmoddi4+0x92>
 80004a8:	454b      	cmp	r3, r9
 80004aa:	d2a9      	bcs.n	8000400 <__udivmoddi4+0x1f8>
 80004ac:	ebb9 0802 	subs.w	r8, r9, r2
 80004b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004b4:	3801      	subs	r0, #1
 80004b6:	e7a3      	b.n	8000400 <__udivmoddi4+0x1f8>
 80004b8:	4646      	mov	r6, r8
 80004ba:	e7ea      	b.n	8000492 <__udivmoddi4+0x28a>
 80004bc:	4620      	mov	r0, r4
 80004be:	e794      	b.n	80003ea <__udivmoddi4+0x1e2>
 80004c0:	4640      	mov	r0, r8
 80004c2:	e7d1      	b.n	8000468 <__udivmoddi4+0x260>
 80004c4:	46d0      	mov	r8, sl
 80004c6:	e77b      	b.n	80003c0 <__udivmoddi4+0x1b8>
 80004c8:	3b02      	subs	r3, #2
 80004ca:	4461      	add	r1, ip
 80004cc:	e732      	b.n	8000334 <__udivmoddi4+0x12c>
 80004ce:	4630      	mov	r0, r6
 80004d0:	e709      	b.n	80002e6 <__udivmoddi4+0xde>
 80004d2:	4464      	add	r4, ip
 80004d4:	3802      	subs	r0, #2
 80004d6:	e742      	b.n	800035e <__udivmoddi4+0x156>

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <DEV_SPI_WriteByte>:
#include "DEV_Config.h"
#include "stm32f4xx_hal_spi.h"

extern SPI_HandleTypeDef hspi1;
void DEV_SPI_WriteByte(uint8_t value)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	b082      	sub	sp, #8
 80004e0:	af00      	add	r7, sp, #0
 80004e2:	4603      	mov	r3, r0
 80004e4:	71fb      	strb	r3, [r7, #7]
    HAL_SPI_Transmit(&hspi1, &value, 1, 1000);
 80004e6:	1df9      	adds	r1, r7, #7
 80004e8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80004ec:	2201      	movs	r2, #1
 80004ee:	4803      	ldr	r0, [pc, #12]	; (80004fc <DEV_SPI_WriteByte+0x20>)
 80004f0:	f002 ff01 	bl	80032f6 <HAL_SPI_Transmit>
}
 80004f4:	bf00      	nop
 80004f6:	3708      	adds	r7, #8
 80004f8:	46bd      	mov	sp, r7
 80004fa:	bd80      	pop	{r7, pc}
 80004fc:	20000128 	.word	0x20000128

08000500 <DEV_Module_Init>:

int DEV_Module_Init(void)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	af00      	add	r7, sp, #0
    DEV_Digital_Write(EPD_DC_PIN, 0);
 8000504:	2200      	movs	r2, #0
 8000506:	2104      	movs	r1, #4
 8000508:	4807      	ldr	r0, [pc, #28]	; (8000528 <DEV_Module_Init+0x28>)
 800050a:	f001 fecb 	bl	80022a4 <HAL_GPIO_WritePin>
    DEV_Digital_Write(EPD_CS_PIN, 0);
 800050e:	2200      	movs	r2, #0
 8000510:	2110      	movs	r1, #16
 8000512:	4805      	ldr	r0, [pc, #20]	; (8000528 <DEV_Module_Init+0x28>)
 8000514:	f001 fec6 	bl	80022a4 <HAL_GPIO_WritePin>
    DEV_Digital_Write(EPD_RST_PIN, 1);
 8000518:	2201      	movs	r2, #1
 800051a:	2102      	movs	r1, #2
 800051c:	4802      	ldr	r0, [pc, #8]	; (8000528 <DEV_Module_Init+0x28>)
 800051e:	f001 fec1 	bl	80022a4 <HAL_GPIO_WritePin>
		return 0;
 8000522:	2300      	movs	r3, #0
}
 8000524:	4618      	mov	r0, r3
 8000526:	bd80      	pop	{r7, pc}
 8000528:	40020000 	.word	0x40020000

0800052c <DEV_Module_Exit>:

void DEV_Module_Exit(void)
{
 800052c:	b580      	push	{r7, lr}
 800052e:	af00      	add	r7, sp, #0
    DEV_Digital_Write(EPD_DC_PIN, 0);
 8000530:	2200      	movs	r2, #0
 8000532:	2104      	movs	r1, #4
 8000534:	4807      	ldr	r0, [pc, #28]	; (8000554 <DEV_Module_Exit+0x28>)
 8000536:	f001 feb5 	bl	80022a4 <HAL_GPIO_WritePin>
    DEV_Digital_Write(EPD_CS_PIN, 0);
 800053a:	2200      	movs	r2, #0
 800053c:	2110      	movs	r1, #16
 800053e:	4805      	ldr	r0, [pc, #20]	; (8000554 <DEV_Module_Exit+0x28>)
 8000540:	f001 feb0 	bl	80022a4 <HAL_GPIO_WritePin>

    //close 5V
    DEV_Digital_Write(EPD_RST_PIN, 0);
 8000544:	2200      	movs	r2, #0
 8000546:	2102      	movs	r1, #2
 8000548:	4802      	ldr	r0, [pc, #8]	; (8000554 <DEV_Module_Exit+0x28>)
 800054a:	f001 feab 	bl	80022a4 <HAL_GPIO_WritePin>
}
 800054e:	bf00      	nop
 8000550:	bd80      	pop	{r7, pc}
 8000552:	bf00      	nop
 8000554:	40020000 	.word	0x40020000

08000558 <EPD_4IN2_Reset>:
/******************************************************************************
function :	Software reset
parameter:
******************************************************************************/
static void EPD_4IN2_Reset(void)
{
 8000558:	b580      	push	{r7, lr}
 800055a:	af00      	add	r7, sp, #0
    DEV_Digital_Write(EPD_RST_PIN, 1);
 800055c:	2201      	movs	r2, #1
 800055e:	2102      	movs	r1, #2
 8000560:	480b      	ldr	r0, [pc, #44]	; (8000590 <EPD_4IN2_Reset+0x38>)
 8000562:	f001 fe9f 	bl	80022a4 <HAL_GPIO_WritePin>
    DEV_Delay_ms(200);
 8000566:	20c8      	movs	r0, #200	; 0xc8
 8000568:	f001 fbf6 	bl	8001d58 <HAL_Delay>
    DEV_Digital_Write(EPD_RST_PIN, 0);
 800056c:	2200      	movs	r2, #0
 800056e:	2102      	movs	r1, #2
 8000570:	4807      	ldr	r0, [pc, #28]	; (8000590 <EPD_4IN2_Reset+0x38>)
 8000572:	f001 fe97 	bl	80022a4 <HAL_GPIO_WritePin>
    DEV_Delay_ms(200);
 8000576:	20c8      	movs	r0, #200	; 0xc8
 8000578:	f001 fbee 	bl	8001d58 <HAL_Delay>
    DEV_Digital_Write(EPD_RST_PIN, 1);
 800057c:	2201      	movs	r2, #1
 800057e:	2102      	movs	r1, #2
 8000580:	4803      	ldr	r0, [pc, #12]	; (8000590 <EPD_4IN2_Reset+0x38>)
 8000582:	f001 fe8f 	bl	80022a4 <HAL_GPIO_WritePin>
    DEV_Delay_ms(200);
 8000586:	20c8      	movs	r0, #200	; 0xc8
 8000588:	f001 fbe6 	bl	8001d58 <HAL_Delay>
}
 800058c:	bf00      	nop
 800058e:	bd80      	pop	{r7, pc}
 8000590:	40020000 	.word	0x40020000

08000594 <EPD_4IN2_SendCommand>:
function :	send command
parameter:
     Reg : Command register
******************************************************************************/
static void EPD_4IN2_SendCommand(uint8_t Reg)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b082      	sub	sp, #8
 8000598:	af00      	add	r7, sp, #0
 800059a:	4603      	mov	r3, r0
 800059c:	71fb      	strb	r3, [r7, #7]
    DEV_Digital_Write(EPD_DC_PIN, 0);
 800059e:	2200      	movs	r2, #0
 80005a0:	2104      	movs	r1, #4
 80005a2:	480a      	ldr	r0, [pc, #40]	; (80005cc <EPD_4IN2_SendCommand+0x38>)
 80005a4:	f001 fe7e 	bl	80022a4 <HAL_GPIO_WritePin>
    DEV_Digital_Write(EPD_CS_PIN, 0);
 80005a8:	2200      	movs	r2, #0
 80005aa:	2110      	movs	r1, #16
 80005ac:	4807      	ldr	r0, [pc, #28]	; (80005cc <EPD_4IN2_SendCommand+0x38>)
 80005ae:	f001 fe79 	bl	80022a4 <HAL_GPIO_WritePin>
    DEV_SPI_WriteByte(Reg);
 80005b2:	79fb      	ldrb	r3, [r7, #7]
 80005b4:	4618      	mov	r0, r3
 80005b6:	f7ff ff91 	bl	80004dc <DEV_SPI_WriteByte>
    DEV_Digital_Write(EPD_CS_PIN, 1);
 80005ba:	2201      	movs	r2, #1
 80005bc:	2110      	movs	r1, #16
 80005be:	4803      	ldr	r0, [pc, #12]	; (80005cc <EPD_4IN2_SendCommand+0x38>)
 80005c0:	f001 fe70 	bl	80022a4 <HAL_GPIO_WritePin>
}
 80005c4:	bf00      	nop
 80005c6:	3708      	adds	r7, #8
 80005c8:	46bd      	mov	sp, r7
 80005ca:	bd80      	pop	{r7, pc}
 80005cc:	40020000 	.word	0x40020000

080005d0 <EPD_4IN2_SendData>:
function :	send data
parameter:
    Data : Write data
******************************************************************************/
static void EPD_4IN2_SendData(uint8_t Data)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b082      	sub	sp, #8
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	4603      	mov	r3, r0
 80005d8:	71fb      	strb	r3, [r7, #7]
    DEV_Digital_Write(EPD_DC_PIN, 1);
 80005da:	2201      	movs	r2, #1
 80005dc:	2104      	movs	r1, #4
 80005de:	480a      	ldr	r0, [pc, #40]	; (8000608 <EPD_4IN2_SendData+0x38>)
 80005e0:	f001 fe60 	bl	80022a4 <HAL_GPIO_WritePin>
    DEV_Digital_Write(EPD_CS_PIN, 0);
 80005e4:	2200      	movs	r2, #0
 80005e6:	2110      	movs	r1, #16
 80005e8:	4807      	ldr	r0, [pc, #28]	; (8000608 <EPD_4IN2_SendData+0x38>)
 80005ea:	f001 fe5b 	bl	80022a4 <HAL_GPIO_WritePin>
    DEV_SPI_WriteByte(Data);
 80005ee:	79fb      	ldrb	r3, [r7, #7]
 80005f0:	4618      	mov	r0, r3
 80005f2:	f7ff ff73 	bl	80004dc <DEV_SPI_WriteByte>
    DEV_Digital_Write(EPD_CS_PIN, 1);
 80005f6:	2201      	movs	r2, #1
 80005f8:	2110      	movs	r1, #16
 80005fa:	4803      	ldr	r0, [pc, #12]	; (8000608 <EPD_4IN2_SendData+0x38>)
 80005fc:	f001 fe52 	bl	80022a4 <HAL_GPIO_WritePin>
}
 8000600:	bf00      	nop
 8000602:	3708      	adds	r7, #8
 8000604:	46bd      	mov	sp, r7
 8000606:	bd80      	pop	{r7, pc}
 8000608:	40020000 	.word	0x40020000

0800060c <EPD_4IN2_ReadBusy>:
/******************************************************************************
function :	Wait until the busy_pin goes LOW
parameter:
******************************************************************************/
void EPD_4IN2_ReadBusy(void)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	af00      	add	r7, sp, #0
    //Debug("e-Paper busy\r\n");
    EPD_4IN2_SendCommand(0x71);
 8000610:	2071      	movs	r0, #113	; 0x71
 8000612:	f7ff ffbf 	bl	8000594 <EPD_4IN2_SendCommand>
    while(DEV_Digital_Read(EPD_BUSY_PIN) == 0) {      //LOW: idle, HIGH: busy
 8000616:	e005      	b.n	8000624 <EPD_4IN2_ReadBusy+0x18>
        EPD_4IN2_SendCommand(0x71);
 8000618:	2071      	movs	r0, #113	; 0x71
 800061a:	f7ff ffbb 	bl	8000594 <EPD_4IN2_SendCommand>
        DEV_Delay_ms(100);
 800061e:	2064      	movs	r0, #100	; 0x64
 8000620:	f001 fb9a 	bl	8001d58 <HAL_Delay>
    while(DEV_Digital_Read(EPD_BUSY_PIN) == 0) {      //LOW: idle, HIGH: busy
 8000624:	2108      	movs	r1, #8
 8000626:	4804      	ldr	r0, [pc, #16]	; (8000638 <EPD_4IN2_ReadBusy+0x2c>)
 8000628:	f001 fe24 	bl	8002274 <HAL_GPIO_ReadPin>
 800062c:	4603      	mov	r3, r0
 800062e:	2b00      	cmp	r3, #0
 8000630:	d0f2      	beq.n	8000618 <EPD_4IN2_ReadBusy+0xc>
    }
    //Debug("e-Paper busy release\r\n");
}
 8000632:	bf00      	nop
 8000634:	bf00      	nop
 8000636:	bd80      	pop	{r7, pc}
 8000638:	40020000 	.word	0x40020000

0800063c <EPD_4IN2_TurnOnDisplay>:
/******************************************************************************
function :	Turn On Display
parameter:
******************************************************************************/
static void EPD_4IN2_TurnOnDisplay(void)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	af00      	add	r7, sp, #0
    EPD_4IN2_SendCommand(0x12);
 8000640:	2012      	movs	r0, #18
 8000642:	f7ff ffa7 	bl	8000594 <EPD_4IN2_SendCommand>
    DEV_Delay_ms(100);
 8000646:	2064      	movs	r0, #100	; 0x64
 8000648:	f001 fb86 	bl	8001d58 <HAL_Delay>
    EPD_4IN2_ReadBusy();
 800064c:	f7ff ffde 	bl	800060c <EPD_4IN2_ReadBusy>
}
 8000650:	bf00      	nop
 8000652:	bd80      	pop	{r7, pc}

08000654 <EPD_4IN2_SetLut>:
/******************************************************************************
function :	set the look-up tables
parameter:
******************************************************************************/
static void EPD_4IN2_SetLut(void)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b082      	sub	sp, #8
 8000658:	af00      	add	r7, sp, #0
    uint16_t count;
    EPD_4IN2_SendCommand(0x20);         //g vcom
 800065a:	2020      	movs	r0, #32
 800065c:	f7ff ff9a 	bl	8000594 <EPD_4IN2_SendCommand>
    for(count=0; count<44; count++) {
 8000660:	2300      	movs	r3, #0
 8000662:	80fb      	strh	r3, [r7, #6]
 8000664:	e008      	b.n	8000678 <EPD_4IN2_SetLut+0x24>
        EPD_4IN2_SendData(EPD_4IN2_lut_vcom0[count]);
 8000666:	88fb      	ldrh	r3, [r7, #6]
 8000668:	4a2b      	ldr	r2, [pc, #172]	; (8000718 <EPD_4IN2_SetLut+0xc4>)
 800066a:	5cd3      	ldrb	r3, [r2, r3]
 800066c:	4618      	mov	r0, r3
 800066e:	f7ff ffaf 	bl	80005d0 <EPD_4IN2_SendData>
    for(count=0; count<44; count++) {
 8000672:	88fb      	ldrh	r3, [r7, #6]
 8000674:	3301      	adds	r3, #1
 8000676:	80fb      	strh	r3, [r7, #6]
 8000678:	88fb      	ldrh	r3, [r7, #6]
 800067a:	2b2b      	cmp	r3, #43	; 0x2b
 800067c:	d9f3      	bls.n	8000666 <EPD_4IN2_SetLut+0x12>
    }

    EPD_4IN2_SendCommand(0x21);
 800067e:	2021      	movs	r0, #33	; 0x21
 8000680:	f7ff ff88 	bl	8000594 <EPD_4IN2_SendCommand>
    for(count=0; count<42; count++) {
 8000684:	2300      	movs	r3, #0
 8000686:	80fb      	strh	r3, [r7, #6]
 8000688:	e008      	b.n	800069c <EPD_4IN2_SetLut+0x48>
        EPD_4IN2_SendData(EPD_4IN2_lut_ww[count]);
 800068a:	88fb      	ldrh	r3, [r7, #6]
 800068c:	4a23      	ldr	r2, [pc, #140]	; (800071c <EPD_4IN2_SetLut+0xc8>)
 800068e:	5cd3      	ldrb	r3, [r2, r3]
 8000690:	4618      	mov	r0, r3
 8000692:	f7ff ff9d 	bl	80005d0 <EPD_4IN2_SendData>
    for(count=0; count<42; count++) {
 8000696:	88fb      	ldrh	r3, [r7, #6]
 8000698:	3301      	adds	r3, #1
 800069a:	80fb      	strh	r3, [r7, #6]
 800069c:	88fb      	ldrh	r3, [r7, #6]
 800069e:	2b29      	cmp	r3, #41	; 0x29
 80006a0:	d9f3      	bls.n	800068a <EPD_4IN2_SetLut+0x36>
    }

    EPD_4IN2_SendCommand(0x22);
 80006a2:	2022      	movs	r0, #34	; 0x22
 80006a4:	f7ff ff76 	bl	8000594 <EPD_4IN2_SendCommand>
    for(count=0; count<42; count++) {
 80006a8:	2300      	movs	r3, #0
 80006aa:	80fb      	strh	r3, [r7, #6]
 80006ac:	e008      	b.n	80006c0 <EPD_4IN2_SetLut+0x6c>
        EPD_4IN2_SendData(EPD_4IN2_lut_bw[count]);
 80006ae:	88fb      	ldrh	r3, [r7, #6]
 80006b0:	4a1b      	ldr	r2, [pc, #108]	; (8000720 <EPD_4IN2_SetLut+0xcc>)
 80006b2:	5cd3      	ldrb	r3, [r2, r3]
 80006b4:	4618      	mov	r0, r3
 80006b6:	f7ff ff8b 	bl	80005d0 <EPD_4IN2_SendData>
    for(count=0; count<42; count++) {
 80006ba:	88fb      	ldrh	r3, [r7, #6]
 80006bc:	3301      	adds	r3, #1
 80006be:	80fb      	strh	r3, [r7, #6]
 80006c0:	88fb      	ldrh	r3, [r7, #6]
 80006c2:	2b29      	cmp	r3, #41	; 0x29
 80006c4:	d9f3      	bls.n	80006ae <EPD_4IN2_SetLut+0x5a>
    }

    EPD_4IN2_SendCommand(0x23);
 80006c6:	2023      	movs	r0, #35	; 0x23
 80006c8:	f7ff ff64 	bl	8000594 <EPD_4IN2_SendCommand>
    for(count=0; count<42; count++) {
 80006cc:	2300      	movs	r3, #0
 80006ce:	80fb      	strh	r3, [r7, #6]
 80006d0:	e008      	b.n	80006e4 <EPD_4IN2_SetLut+0x90>
        EPD_4IN2_SendData(EPD_4IN2_lut_wb[count]);
 80006d2:	88fb      	ldrh	r3, [r7, #6]
 80006d4:	4a13      	ldr	r2, [pc, #76]	; (8000724 <EPD_4IN2_SetLut+0xd0>)
 80006d6:	5cd3      	ldrb	r3, [r2, r3]
 80006d8:	4618      	mov	r0, r3
 80006da:	f7ff ff79 	bl	80005d0 <EPD_4IN2_SendData>
    for(count=0; count<42; count++) {
 80006de:	88fb      	ldrh	r3, [r7, #6]
 80006e0:	3301      	adds	r3, #1
 80006e2:	80fb      	strh	r3, [r7, #6]
 80006e4:	88fb      	ldrh	r3, [r7, #6]
 80006e6:	2b29      	cmp	r3, #41	; 0x29
 80006e8:	d9f3      	bls.n	80006d2 <EPD_4IN2_SetLut+0x7e>
    }

    EPD_4IN2_SendCommand(0x24);
 80006ea:	2024      	movs	r0, #36	; 0x24
 80006ec:	f7ff ff52 	bl	8000594 <EPD_4IN2_SendCommand>
    for(count=0; count<42; count++) {
 80006f0:	2300      	movs	r3, #0
 80006f2:	80fb      	strh	r3, [r7, #6]
 80006f4:	e008      	b.n	8000708 <EPD_4IN2_SetLut+0xb4>
        EPD_4IN2_SendData(EPD_4IN2_lut_bb[count]);
 80006f6:	88fb      	ldrh	r3, [r7, #6]
 80006f8:	4a0b      	ldr	r2, [pc, #44]	; (8000728 <EPD_4IN2_SetLut+0xd4>)
 80006fa:	5cd3      	ldrb	r3, [r2, r3]
 80006fc:	4618      	mov	r0, r3
 80006fe:	f7ff ff67 	bl	80005d0 <EPD_4IN2_SendData>
    for(count=0; count<42; count++) {
 8000702:	88fb      	ldrh	r3, [r7, #6]
 8000704:	3301      	adds	r3, #1
 8000706:	80fb      	strh	r3, [r7, #6]
 8000708:	88fb      	ldrh	r3, [r7, #6]
 800070a:	2b29      	cmp	r3, #41	; 0x29
 800070c:	d9f3      	bls.n	80006f6 <EPD_4IN2_SetLut+0xa2>
    }
}
 800070e:	bf00      	nop
 8000710:	bf00      	nop
 8000712:	3708      	adds	r7, #8
 8000714:	46bd      	mov	sp, r7
 8000716:	bd80      	pop	{r7, pc}
 8000718:	08003f68 	.word	0x08003f68
 800071c:	08003f94 	.word	0x08003f94
 8000720:	08003fc0 	.word	0x08003fc0
 8000724:	08003fec 	.word	0x08003fec
 8000728:	08004018 	.word	0x08004018

0800072c <EPD_4IN2_Init>:
/******************************************************************************
function :	Initialize the e-Paper register
parameter:
******************************************************************************/
void EPD_4IN2_Init(void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	af00      	add	r7, sp, #0
    EPD_4IN2_Reset();
 8000730:	f7ff ff12 	bl	8000558 <EPD_4IN2_Reset>

    EPD_4IN2_SendCommand(0x01); // POWER SETTING
 8000734:	2001      	movs	r0, #1
 8000736:	f7ff ff2d 	bl	8000594 <EPD_4IN2_SendCommand>
    EPD_4IN2_SendData(0x03);
 800073a:	2003      	movs	r0, #3
 800073c:	f7ff ff48 	bl	80005d0 <EPD_4IN2_SendData>
    EPD_4IN2_SendData(0x00);
 8000740:	2000      	movs	r0, #0
 8000742:	f7ff ff45 	bl	80005d0 <EPD_4IN2_SendData>
    EPD_4IN2_SendData(0x2b);
 8000746:	202b      	movs	r0, #43	; 0x2b
 8000748:	f7ff ff42 	bl	80005d0 <EPD_4IN2_SendData>
    EPD_4IN2_SendData(0x2b);
 800074c:	202b      	movs	r0, #43	; 0x2b
 800074e:	f7ff ff3f 	bl	80005d0 <EPD_4IN2_SendData>

    EPD_4IN2_SendCommand(0x06); // boost soft start
 8000752:	2006      	movs	r0, #6
 8000754:	f7ff ff1e 	bl	8000594 <EPD_4IN2_SendCommand>
    EPD_4IN2_SendData(0x17);		//A
 8000758:	2017      	movs	r0, #23
 800075a:	f7ff ff39 	bl	80005d0 <EPD_4IN2_SendData>
    EPD_4IN2_SendData(0x17);		//B
 800075e:	2017      	movs	r0, #23
 8000760:	f7ff ff36 	bl	80005d0 <EPD_4IN2_SendData>
    EPD_4IN2_SendData(0x17);		//C
 8000764:	2017      	movs	r0, #23
 8000766:	f7ff ff33 	bl	80005d0 <EPD_4IN2_SendData>

    EPD_4IN2_SendCommand(0x04); // POWER_ON
 800076a:	2004      	movs	r0, #4
 800076c:	f7ff ff12 	bl	8000594 <EPD_4IN2_SendCommand>
    EPD_4IN2_ReadBusy();
 8000770:	f7ff ff4c 	bl	800060c <EPD_4IN2_ReadBusy>

    EPD_4IN2_SendCommand(0x00); // panel setting
 8000774:	2000      	movs	r0, #0
 8000776:	f7ff ff0d 	bl	8000594 <EPD_4IN2_SendCommand>
    EPD_4IN2_SendData(0xbf); // KW-BF   KWR-AF	BWROTP 0f	BWOTP 1f
 800077a:	20bf      	movs	r0, #191	; 0xbf
 800077c:	f7ff ff28 	bl	80005d0 <EPD_4IN2_SendData>
    EPD_4IN2_SendData(0x0d);
 8000780:	200d      	movs	r0, #13
 8000782:	f7ff ff25 	bl	80005d0 <EPD_4IN2_SendData>

    EPD_4IN2_SendCommand(0x30); // PLL setting
 8000786:	2030      	movs	r0, #48	; 0x30
 8000788:	f7ff ff04 	bl	8000594 <EPD_4IN2_SendCommand>
    EPD_4IN2_SendData(0x3C); // 3A 100HZ   29 150Hz 39 200HZ	31 171HZ
 800078c:	203c      	movs	r0, #60	; 0x3c
 800078e:	f7ff ff1f 	bl	80005d0 <EPD_4IN2_SendData>

    EPD_4IN2_SendCommand(0x61); // resolution setting
 8000792:	2061      	movs	r0, #97	; 0x61
 8000794:	f7ff fefe 	bl	8000594 <EPD_4IN2_SendCommand>
    EPD_4IN2_SendData(0x01);
 8000798:	2001      	movs	r0, #1
 800079a:	f7ff ff19 	bl	80005d0 <EPD_4IN2_SendData>
    EPD_4IN2_SendData(0x90); //128
 800079e:	2090      	movs	r0, #144	; 0x90
 80007a0:	f7ff ff16 	bl	80005d0 <EPD_4IN2_SendData>
    EPD_4IN2_SendData(0x01); //
 80007a4:	2001      	movs	r0, #1
 80007a6:	f7ff ff13 	bl	80005d0 <EPD_4IN2_SendData>
    EPD_4IN2_SendData(0x2c);
 80007aa:	202c      	movs	r0, #44	; 0x2c
 80007ac:	f7ff ff10 	bl	80005d0 <EPD_4IN2_SendData>

    EPD_4IN2_SendCommand(0x82); // vcom_DC setting
 80007b0:	2082      	movs	r0, #130	; 0x82
 80007b2:	f7ff feef 	bl	8000594 <EPD_4IN2_SendCommand>
    EPD_4IN2_SendData(0x28);
 80007b6:	2028      	movs	r0, #40	; 0x28
 80007b8:	f7ff ff0a 	bl	80005d0 <EPD_4IN2_SendData>

    EPD_4IN2_SendCommand(0X50); // VCOM AND DATA INTERVAL SETTING
 80007bc:	2050      	movs	r0, #80	; 0x50
 80007be:	f7ff fee9 	bl	8000594 <EPD_4IN2_SendCommand>
    EPD_4IN2_SendData(0x97); // 97white border 77black border		VBDF 17|D7 VBDW 97 VBDB 57		VBDF F7 VBDW 77 VBDB 37  VBDR B7
 80007c2:	2097      	movs	r0, #151	; 0x97
 80007c4:	f7ff ff04 	bl	80005d0 <EPD_4IN2_SendData>

    EPD_4IN2_SetLut();
 80007c8:	f7ff ff44 	bl	8000654 <EPD_4IN2_SetLut>
}
 80007cc:	bf00      	nop
 80007ce:	bd80      	pop	{r7, pc}

080007d0 <EPD_4IN2_Clear>:
/******************************************************************************
function :	Clear screen
parameter:
******************************************************************************/
void EPD_4IN2_Clear(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b084      	sub	sp, #16
 80007d4:	af00      	add	r7, sp, #0
    uint16_t Width, Height;
    Width = (EPD_4IN2_WIDTH % 8 == 0)? (EPD_4IN2_WIDTH / 8 ): (EPD_4IN2_WIDTH / 8 + 1);
 80007d6:	2332      	movs	r3, #50	; 0x32
 80007d8:	80fb      	strh	r3, [r7, #6]
    Height = EPD_4IN2_HEIGHT;
 80007da:	f44f 7396 	mov.w	r3, #300	; 0x12c
 80007de:	80bb      	strh	r3, [r7, #4]

    EPD_4IN2_SendCommand(0x10);
 80007e0:	2010      	movs	r0, #16
 80007e2:	f7ff fed7 	bl	8000594 <EPD_4IN2_SendCommand>
    for (uint16_t j = 0; j < Height; j++) {
 80007e6:	2300      	movs	r3, #0
 80007e8:	81fb      	strh	r3, [r7, #14]
 80007ea:	e00f      	b.n	800080c <EPD_4IN2_Clear+0x3c>
        for (uint16_t i = 0; i < Width; i++) {
 80007ec:	2300      	movs	r3, #0
 80007ee:	81bb      	strh	r3, [r7, #12]
 80007f0:	e005      	b.n	80007fe <EPD_4IN2_Clear+0x2e>
            EPD_4IN2_SendData(0xFF);
 80007f2:	20ff      	movs	r0, #255	; 0xff
 80007f4:	f7ff feec 	bl	80005d0 <EPD_4IN2_SendData>
        for (uint16_t i = 0; i < Width; i++) {
 80007f8:	89bb      	ldrh	r3, [r7, #12]
 80007fa:	3301      	adds	r3, #1
 80007fc:	81bb      	strh	r3, [r7, #12]
 80007fe:	89ba      	ldrh	r2, [r7, #12]
 8000800:	88fb      	ldrh	r3, [r7, #6]
 8000802:	429a      	cmp	r2, r3
 8000804:	d3f5      	bcc.n	80007f2 <EPD_4IN2_Clear+0x22>
    for (uint16_t j = 0; j < Height; j++) {
 8000806:	89fb      	ldrh	r3, [r7, #14]
 8000808:	3301      	adds	r3, #1
 800080a:	81fb      	strh	r3, [r7, #14]
 800080c:	89fa      	ldrh	r2, [r7, #14]
 800080e:	88bb      	ldrh	r3, [r7, #4]
 8000810:	429a      	cmp	r2, r3
 8000812:	d3eb      	bcc.n	80007ec <EPD_4IN2_Clear+0x1c>
        }
    }

    EPD_4IN2_SendCommand(0x13);
 8000814:	2013      	movs	r0, #19
 8000816:	f7ff febd 	bl	8000594 <EPD_4IN2_SendCommand>
    for (uint16_t j = 0; j < Height; j++) {
 800081a:	2300      	movs	r3, #0
 800081c:	817b      	strh	r3, [r7, #10]
 800081e:	e00f      	b.n	8000840 <EPD_4IN2_Clear+0x70>
        for (uint16_t i = 0; i < Width; i++) {
 8000820:	2300      	movs	r3, #0
 8000822:	813b      	strh	r3, [r7, #8]
 8000824:	e005      	b.n	8000832 <EPD_4IN2_Clear+0x62>
            EPD_4IN2_SendData(0xFF);
 8000826:	20ff      	movs	r0, #255	; 0xff
 8000828:	f7ff fed2 	bl	80005d0 <EPD_4IN2_SendData>
        for (uint16_t i = 0; i < Width; i++) {
 800082c:	893b      	ldrh	r3, [r7, #8]
 800082e:	3301      	adds	r3, #1
 8000830:	813b      	strh	r3, [r7, #8]
 8000832:	893a      	ldrh	r2, [r7, #8]
 8000834:	88fb      	ldrh	r3, [r7, #6]
 8000836:	429a      	cmp	r2, r3
 8000838:	d3f5      	bcc.n	8000826 <EPD_4IN2_Clear+0x56>
    for (uint16_t j = 0; j < Height; j++) {
 800083a:	897b      	ldrh	r3, [r7, #10]
 800083c:	3301      	adds	r3, #1
 800083e:	817b      	strh	r3, [r7, #10]
 8000840:	897a      	ldrh	r2, [r7, #10]
 8000842:	88bb      	ldrh	r3, [r7, #4]
 8000844:	429a      	cmp	r2, r3
 8000846:	d3eb      	bcc.n	8000820 <EPD_4IN2_Clear+0x50>
        }
    }
    EPD_4IN2_SendCommand(0x12);		 //DISPLAY REFRESH
 8000848:	2012      	movs	r0, #18
 800084a:	f7ff fea3 	bl	8000594 <EPD_4IN2_SendCommand>
    DEV_Delay_ms(10);
 800084e:	200a      	movs	r0, #10
 8000850:	f001 fa82 	bl	8001d58 <HAL_Delay>
    EPD_4IN2_TurnOnDisplay();
 8000854:	f7ff fef2 	bl	800063c <EPD_4IN2_TurnOnDisplay>
}
 8000858:	bf00      	nop
 800085a:	3710      	adds	r7, #16
 800085c:	46bd      	mov	sp, r7
 800085e:	bd80      	pop	{r7, pc}

08000860 <EPD_4IN2_Display>:
/******************************************************************************
function :	Sends the image buffer in RAM to e-Paper and displays
parameter:
******************************************************************************/
void EPD_4IN2_Display(uint8_t *Image)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b084      	sub	sp, #16
 8000864:	af00      	add	r7, sp, #0
 8000866:	6078      	str	r0, [r7, #4]
    uint16_t Width, Height;
    Width = (EPD_4IN2_WIDTH % 8 == 0)? (EPD_4IN2_WIDTH / 8 ): (EPD_4IN2_WIDTH / 8 + 1);
 8000868:	2332      	movs	r3, #50	; 0x32
 800086a:	817b      	strh	r3, [r7, #10]
    Height = EPD_4IN2_HEIGHT;
 800086c:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8000870:	813b      	strh	r3, [r7, #8]

    EPD_4IN2_SendCommand(0x13);
 8000872:	2013      	movs	r0, #19
 8000874:	f7ff fe8e 	bl	8000594 <EPD_4IN2_SendCommand>
    for (uint16_t j = 0; j < Height; j++) {
 8000878:	2300      	movs	r3, #0
 800087a:	81fb      	strh	r3, [r7, #14]
 800087c:	e019      	b.n	80008b2 <EPD_4IN2_Display+0x52>
        for (uint16_t i = 0; i < Width; i++) {
 800087e:	2300      	movs	r3, #0
 8000880:	81bb      	strh	r3, [r7, #12]
 8000882:	e00f      	b.n	80008a4 <EPD_4IN2_Display+0x44>
            EPD_4IN2_SendData(Image[i + j * Width]);
 8000884:	89ba      	ldrh	r2, [r7, #12]
 8000886:	89fb      	ldrh	r3, [r7, #14]
 8000888:	8979      	ldrh	r1, [r7, #10]
 800088a:	fb01 f303 	mul.w	r3, r1, r3
 800088e:	4413      	add	r3, r2
 8000890:	461a      	mov	r2, r3
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	4413      	add	r3, r2
 8000896:	781b      	ldrb	r3, [r3, #0]
 8000898:	4618      	mov	r0, r3
 800089a:	f7ff fe99 	bl	80005d0 <EPD_4IN2_SendData>
        for (uint16_t i = 0; i < Width; i++) {
 800089e:	89bb      	ldrh	r3, [r7, #12]
 80008a0:	3301      	adds	r3, #1
 80008a2:	81bb      	strh	r3, [r7, #12]
 80008a4:	89ba      	ldrh	r2, [r7, #12]
 80008a6:	897b      	ldrh	r3, [r7, #10]
 80008a8:	429a      	cmp	r2, r3
 80008aa:	d3eb      	bcc.n	8000884 <EPD_4IN2_Display+0x24>
    for (uint16_t j = 0; j < Height; j++) {
 80008ac:	89fb      	ldrh	r3, [r7, #14]
 80008ae:	3301      	adds	r3, #1
 80008b0:	81fb      	strh	r3, [r7, #14]
 80008b2:	89fa      	ldrh	r2, [r7, #14]
 80008b4:	893b      	ldrh	r3, [r7, #8]
 80008b6:	429a      	cmp	r2, r3
 80008b8:	d3e1      	bcc.n	800087e <EPD_4IN2_Display+0x1e>
        }
    }

    EPD_4IN2_TurnOnDisplay();
 80008ba:	f7ff febf 	bl	800063c <EPD_4IN2_TurnOnDisplay>
}
 80008be:	bf00      	nop
 80008c0:	3710      	adds	r7, #16
 80008c2:	46bd      	mov	sp, r7
 80008c4:	bd80      	pop	{r7, pc}

080008c6 <EPD_4IN2_Sleep>:
/******************************************************************************
function :	Enter sleep mode
parameter:
******************************************************************************/
void EPD_4IN2_Sleep(void)
{
 80008c6:	b580      	push	{r7, lr}
 80008c8:	af00      	add	r7, sp, #0
    EPD_4IN2_SendCommand(0x02); // POWER_OFF
 80008ca:	2002      	movs	r0, #2
 80008cc:	f7ff fe62 	bl	8000594 <EPD_4IN2_SendCommand>
    EPD_4IN2_ReadBusy();
 80008d0:	f7ff fe9c 	bl	800060c <EPD_4IN2_ReadBusy>
    EPD_4IN2_SendCommand(0x07); // DEEP_SLEEP
 80008d4:	2007      	movs	r0, #7
 80008d6:	f7ff fe5d 	bl	8000594 <EPD_4IN2_SendCommand>
    EPD_4IN2_SendData(0XA5);
 80008da:	20a5      	movs	r0, #165	; 0xa5
 80008dc:	f7ff fe78 	bl	80005d0 <EPD_4IN2_SendData>
}
 80008e0:	bf00      	nop
 80008e2:	bd80      	pop	{r7, pc}

080008e4 <love>:
#include "EpaperDisplay.h"
#include "EPD_4in2.h"
#include <string.h>

void love(void){
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b086      	sub	sp, #24
 80008e8:	af04      	add	r7, sp, #16
    if(DEV_Module_Init()!=0){ // JD - Setting certain pins high or low
 80008ea:	f7ff fe09 	bl	8000500 <DEV_Module_Init>

    }

    EPD_4IN2_Init(); // JD - Sending commands to setup display
 80008ee:	f7ff ff1d 	bl	800072c <EPD_4IN2_Init>
    EPD_4IN2_Clear(); // JD - Sending commands to clear the display
 80008f2:	f7ff ff6d 	bl	80007d0 <EPD_4IN2_Clear>
    DEV_Delay_ms(2000);
 80008f6:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80008fa:	f001 fa2d 	bl	8001d58 <HAL_Delay>

	//Create a new image cache
    uint8_t *BlackImage;
	//you have to edit the startup_stm32fxxx.s file and set a big enough heap size
	uint16_t Imagesize = ((EPD_4IN2_WIDTH % 8 == 0)? (EPD_4IN2_WIDTH / 8 ): (EPD_4IN2_WIDTH / 8 + 1)) * EPD_4IN2_HEIGHT;
 80008fe:	f643 2398 	movw	r3, #15000	; 0x3a98
 8000902:	80fb      	strh	r3, [r7, #6]
	if((BlackImage = (uint8_t *)malloc(Imagesize)) == NULL) {
 8000904:	88fb      	ldrh	r3, [r7, #6]
 8000906:	4618      	mov	r0, r3
 8000908:	f003 f9e8 	bl	8003cdc <malloc>
 800090c:	4603      	mov	r3, r0
 800090e:	603b      	str	r3, [r7, #0]
		//printf("Failed to apply for black memory...\r\n");

	}
	//printf("Paint_NewImage\r\n");
	Paint_NewImage(BlackImage, EPD_4IN2_WIDTH, EPD_4IN2_HEIGHT, ROTATE_270, WHITE);
 8000910:	23ff      	movs	r3, #255	; 0xff
 8000912:	9300      	str	r3, [sp, #0]
 8000914:	f44f 7387 	mov.w	r3, #270	; 0x10e
 8000918:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800091c:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8000920:	6838      	ldr	r0, [r7, #0]
 8000922:	f000 f99f 	bl	8000c64 <Paint_NewImage>

	// show image for array
	//printf("show image for array\r\n");
	Paint_SelectImage(BlackImage);
 8000926:	6838      	ldr	r0, [r7, #0]
 8000928:	f000 f9f2 	bl	8000d10 <Paint_SelectImage>
	Paint_Clear(WHITE);
 800092c:	20ff      	movs	r0, #255	; 0xff
 800092e:	f000 fb4b 	bl	8000fc8 <Paint_Clear>





	Paint_DrawString_EN(0, 0, "Temperature", &Font20, WHITE, BLACK);
 8000932:	2300      	movs	r3, #0
 8000934:	9301      	str	r3, [sp, #4]
 8000936:	23ff      	movs	r3, #255	; 0xff
 8000938:	9300      	str	r3, [sp, #0]
 800093a:	4bbf      	ldr	r3, [pc, #764]	; (8000c38 <love+0x354>)
 800093c:	4abf      	ldr	r2, [pc, #764]	; (8000c3c <love+0x358>)
 800093e:	2100      	movs	r1, #0
 8000940:	2000      	movs	r0, #0
 8000942:	f000 fd93 	bl	800146c <Paint_DrawString_EN>
	Paint_DrawString_EN(150, 0, ":", &Font20,  WHITE, BLACK);
 8000946:	2300      	movs	r3, #0
 8000948:	9301      	str	r3, [sp, #4]
 800094a:	23ff      	movs	r3, #255	; 0xff
 800094c:	9300      	str	r3, [sp, #0]
 800094e:	4bba      	ldr	r3, [pc, #744]	; (8000c38 <love+0x354>)
 8000950:	4abb      	ldr	r2, [pc, #748]	; (8000c40 <love+0x35c>)
 8000952:	2100      	movs	r1, #0
 8000954:	2096      	movs	r0, #150	; 0x96
 8000956:	f000 fd89 	bl	800146c <Paint_DrawString_EN>
	Paint_DrawString_EN(162, 0, "70F", &Font20,  WHITE, BLACK);
 800095a:	2300      	movs	r3, #0
 800095c:	9301      	str	r3, [sp, #4]
 800095e:	23ff      	movs	r3, #255	; 0xff
 8000960:	9300      	str	r3, [sp, #0]
 8000962:	4bb5      	ldr	r3, [pc, #724]	; (8000c38 <love+0x354>)
 8000964:	4ab7      	ldr	r2, [pc, #732]	; (8000c44 <love+0x360>)
 8000966:	2100      	movs	r1, #0
 8000968:	20a2      	movs	r0, #162	; 0xa2
 800096a:	f000 fd7f 	bl	800146c <Paint_DrawString_EN>

	Paint_DrawString_EN(42, 30, "Humidity", &Font20, WHITE, BLACK);
 800096e:	2300      	movs	r3, #0
 8000970:	9301      	str	r3, [sp, #4]
 8000972:	23ff      	movs	r3, #255	; 0xff
 8000974:	9300      	str	r3, [sp, #0]
 8000976:	4bb0      	ldr	r3, [pc, #704]	; (8000c38 <love+0x354>)
 8000978:	4ab3      	ldr	r2, [pc, #716]	; (8000c48 <love+0x364>)
 800097a:	211e      	movs	r1, #30
 800097c:	202a      	movs	r0, #42	; 0x2a
 800097e:	f000 fd75 	bl	800146c <Paint_DrawString_EN>
	Paint_DrawString_EN(150, 30, ":", &Font20,  WHITE, BLACK);
 8000982:	2300      	movs	r3, #0
 8000984:	9301      	str	r3, [sp, #4]
 8000986:	23ff      	movs	r3, #255	; 0xff
 8000988:	9300      	str	r3, [sp, #0]
 800098a:	4bab      	ldr	r3, [pc, #684]	; (8000c38 <love+0x354>)
 800098c:	4aac      	ldr	r2, [pc, #688]	; (8000c40 <love+0x35c>)
 800098e:	211e      	movs	r1, #30
 8000990:	2096      	movs	r0, #150	; 0x96
 8000992:	f000 fd6b 	bl	800146c <Paint_DrawString_EN>
	Paint_DrawString_EN(162, 30, "80%", &Font20,  WHITE, BLACK);
 8000996:	2300      	movs	r3, #0
 8000998:	9301      	str	r3, [sp, #4]
 800099a:	23ff      	movs	r3, #255	; 0xff
 800099c:	9300      	str	r3, [sp, #0]
 800099e:	4ba6      	ldr	r3, [pc, #664]	; (8000c38 <love+0x354>)
 80009a0:	4aaa      	ldr	r2, [pc, #680]	; (8000c4c <love+0x368>)
 80009a2:	211e      	movs	r1, #30
 80009a4:	20a2      	movs	r0, #162	; 0xa2
 80009a6:	f000 fd61 	bl	800146c <Paint_DrawString_EN>

	Paint_DrawString_EN(42, 60, "Pressure", &Font20, WHITE, BLACK);
 80009aa:	2300      	movs	r3, #0
 80009ac:	9301      	str	r3, [sp, #4]
 80009ae:	23ff      	movs	r3, #255	; 0xff
 80009b0:	9300      	str	r3, [sp, #0]
 80009b2:	4ba1      	ldr	r3, [pc, #644]	; (8000c38 <love+0x354>)
 80009b4:	4aa6      	ldr	r2, [pc, #664]	; (8000c50 <love+0x36c>)
 80009b6:	213c      	movs	r1, #60	; 0x3c
 80009b8:	202a      	movs	r0, #42	; 0x2a
 80009ba:	f000 fd57 	bl	800146c <Paint_DrawString_EN>
	Paint_DrawString_EN(150, 60, ":", &Font20,  WHITE, BLACK);
 80009be:	2300      	movs	r3, #0
 80009c0:	9301      	str	r3, [sp, #4]
 80009c2:	23ff      	movs	r3, #255	; 0xff
 80009c4:	9300      	str	r3, [sp, #0]
 80009c6:	4b9c      	ldr	r3, [pc, #624]	; (8000c38 <love+0x354>)
 80009c8:	4a9d      	ldr	r2, [pc, #628]	; (8000c40 <love+0x35c>)
 80009ca:	213c      	movs	r1, #60	; 0x3c
 80009cc:	2096      	movs	r0, #150	; 0x96
 80009ce:	f000 fd4d 	bl	800146c <Paint_DrawString_EN>
	Paint_DrawString_EN(162, 60, "1000 hPa", &Font20,  WHITE, BLACK);
 80009d2:	2300      	movs	r3, #0
 80009d4:	9301      	str	r3, [sp, #4]
 80009d6:	23ff      	movs	r3, #255	; 0xff
 80009d8:	9300      	str	r3, [sp, #0]
 80009da:	4b97      	ldr	r3, [pc, #604]	; (8000c38 <love+0x354>)
 80009dc:	4a9d      	ldr	r2, [pc, #628]	; (8000c54 <love+0x370>)
 80009de:	213c      	movs	r1, #60	; 0x3c
 80009e0:	20a2      	movs	r0, #162	; 0xa2
 80009e2:	f000 fd43 	bl	800146c <Paint_DrawString_EN>

	Paint_DrawString_EN(113, 90, "Co2", &Font20,  WHITE, BLACK);
 80009e6:	2300      	movs	r3, #0
 80009e8:	9301      	str	r3, [sp, #4]
 80009ea:	23ff      	movs	r3, #255	; 0xff
 80009ec:	9300      	str	r3, [sp, #0]
 80009ee:	4b92      	ldr	r3, [pc, #584]	; (8000c38 <love+0x354>)
 80009f0:	4a99      	ldr	r2, [pc, #612]	; (8000c58 <love+0x374>)
 80009f2:	215a      	movs	r1, #90	; 0x5a
 80009f4:	2071      	movs	r0, #113	; 0x71
 80009f6:	f000 fd39 	bl	800146c <Paint_DrawString_EN>
	Paint_DrawString_EN(150, 90, ":", &Font20,  WHITE, BLACK);
 80009fa:	2300      	movs	r3, #0
 80009fc:	9301      	str	r3, [sp, #4]
 80009fe:	23ff      	movs	r3, #255	; 0xff
 8000a00:	9300      	str	r3, [sp, #0]
 8000a02:	4b8d      	ldr	r3, [pc, #564]	; (8000c38 <love+0x354>)
 8000a04:	4a8e      	ldr	r2, [pc, #568]	; (8000c40 <love+0x35c>)
 8000a06:	215a      	movs	r1, #90	; 0x5a
 8000a08:	2096      	movs	r0, #150	; 0x96
 8000a0a:	f000 fd2f 	bl	800146c <Paint_DrawString_EN>
	Paint_DrawString_EN(162, 90, "680 ppm", &Font20,  WHITE, BLACK);
 8000a0e:	2300      	movs	r3, #0
 8000a10:	9301      	str	r3, [sp, #4]
 8000a12:	23ff      	movs	r3, #255	; 0xff
 8000a14:	9300      	str	r3, [sp, #0]
 8000a16:	4b88      	ldr	r3, [pc, #544]	; (8000c38 <love+0x354>)
 8000a18:	4a90      	ldr	r2, [pc, #576]	; (8000c5c <love+0x378>)
 8000a1a:	215a      	movs	r1, #90	; 0x5a
 8000a1c:	20a2      	movs	r0, #162	; 0xa2
 8000a1e:	f000 fd25 	bl	800146c <Paint_DrawString_EN>




	// JD - X Axis lines
	Paint_DrawLine(30, 200, 35, 200, BLACK, DOT_PIXEL_2X2, LINE_STYLE_SOLID);
 8000a22:	2300      	movs	r3, #0
 8000a24:	9302      	str	r3, [sp, #8]
 8000a26:	2302      	movs	r3, #2
 8000a28:	9301      	str	r3, [sp, #4]
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	9300      	str	r3, [sp, #0]
 8000a2e:	23c8      	movs	r3, #200	; 0xc8
 8000a30:	2223      	movs	r2, #35	; 0x23
 8000a32:	21c8      	movs	r1, #200	; 0xc8
 8000a34:	201e      	movs	r0, #30
 8000a36:	f000 fbc9 	bl	80011cc <Paint_DrawLine>
	Paint_DrawLine(30, 230, 35, 230, BLACK, DOT_PIXEL_2X2, LINE_STYLE_SOLID);
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	9302      	str	r3, [sp, #8]
 8000a3e:	2302      	movs	r3, #2
 8000a40:	9301      	str	r3, [sp, #4]
 8000a42:	2300      	movs	r3, #0
 8000a44:	9300      	str	r3, [sp, #0]
 8000a46:	23e6      	movs	r3, #230	; 0xe6
 8000a48:	2223      	movs	r2, #35	; 0x23
 8000a4a:	21e6      	movs	r1, #230	; 0xe6
 8000a4c:	201e      	movs	r0, #30
 8000a4e:	f000 fbbd 	bl	80011cc <Paint_DrawLine>
	Paint_DrawLine(30, 260, 35, 260, BLACK, DOT_PIXEL_2X2, LINE_STYLE_SOLID);
 8000a52:	2300      	movs	r3, #0
 8000a54:	9302      	str	r3, [sp, #8]
 8000a56:	2302      	movs	r3, #2
 8000a58:	9301      	str	r3, [sp, #4]
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	9300      	str	r3, [sp, #0]
 8000a5e:	f44f 7382 	mov.w	r3, #260	; 0x104
 8000a62:	2223      	movs	r2, #35	; 0x23
 8000a64:	f44f 7182 	mov.w	r1, #260	; 0x104
 8000a68:	201e      	movs	r0, #30
 8000a6a:	f000 fbaf 	bl	80011cc <Paint_DrawLine>
	Paint_DrawLine(30, 290, 35, 290, BLACK, DOT_PIXEL_2X2, LINE_STYLE_SOLID);
 8000a6e:	2300      	movs	r3, #0
 8000a70:	9302      	str	r3, [sp, #8]
 8000a72:	2302      	movs	r3, #2
 8000a74:	9301      	str	r3, [sp, #4]
 8000a76:	2300      	movs	r3, #0
 8000a78:	9300      	str	r3, [sp, #0]
 8000a7a:	f44f 7391 	mov.w	r3, #290	; 0x122
 8000a7e:	2223      	movs	r2, #35	; 0x23
 8000a80:	f44f 7191 	mov.w	r1, #290	; 0x122
 8000a84:	201e      	movs	r0, #30
 8000a86:	f000 fba1 	bl	80011cc <Paint_DrawLine>
	Paint_DrawLine(30, 320, 35, 320, BLACK, DOT_PIXEL_2X2, LINE_STYLE_SOLID);
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	9302      	str	r3, [sp, #8]
 8000a8e:	2302      	movs	r3, #2
 8000a90:	9301      	str	r3, [sp, #4]
 8000a92:	2300      	movs	r3, #0
 8000a94:	9300      	str	r3, [sp, #0]
 8000a96:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8000a9a:	2223      	movs	r2, #35	; 0x23
 8000a9c:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8000aa0:	201e      	movs	r0, #30
 8000aa2:	f000 fb93 	bl	80011cc <Paint_DrawLine>
	Paint_DrawLine(30, 350, 35, 350, BLACK, DOT_PIXEL_2X2, LINE_STYLE_SOLID);
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	9302      	str	r3, [sp, #8]
 8000aaa:	2302      	movs	r3, #2
 8000aac:	9301      	str	r3, [sp, #4]
 8000aae:	2300      	movs	r3, #0
 8000ab0:	9300      	str	r3, [sp, #0]
 8000ab2:	f44f 73af 	mov.w	r3, #350	; 0x15e
 8000ab6:	2223      	movs	r2, #35	; 0x23
 8000ab8:	f44f 71af 	mov.w	r1, #350	; 0x15e
 8000abc:	201e      	movs	r0, #30
 8000abe:	f000 fb85 	bl	80011cc <Paint_DrawLine>




	// JD - Y Axis lines
	Paint_DrawLine(50, 370, 50, 365, BLACK, DOT_PIXEL_2X2, LINE_STYLE_SOLID);
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	9302      	str	r3, [sp, #8]
 8000ac6:	2302      	movs	r3, #2
 8000ac8:	9301      	str	r3, [sp, #4]
 8000aca:	2300      	movs	r3, #0
 8000acc:	9300      	str	r3, [sp, #0]
 8000ace:	f240 136d 	movw	r3, #365	; 0x16d
 8000ad2:	2232      	movs	r2, #50	; 0x32
 8000ad4:	f44f 71b9 	mov.w	r1, #370	; 0x172
 8000ad8:	2032      	movs	r0, #50	; 0x32
 8000ada:	f000 fb77 	bl	80011cc <Paint_DrawLine>
	Paint_DrawLine(80, 370, 80, 365, BLACK, DOT_PIXEL_2X2, LINE_STYLE_SOLID);
 8000ade:	2300      	movs	r3, #0
 8000ae0:	9302      	str	r3, [sp, #8]
 8000ae2:	2302      	movs	r3, #2
 8000ae4:	9301      	str	r3, [sp, #4]
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	9300      	str	r3, [sp, #0]
 8000aea:	f240 136d 	movw	r3, #365	; 0x16d
 8000aee:	2250      	movs	r2, #80	; 0x50
 8000af0:	f44f 71b9 	mov.w	r1, #370	; 0x172
 8000af4:	2050      	movs	r0, #80	; 0x50
 8000af6:	f000 fb69 	bl	80011cc <Paint_DrawLine>
	Paint_DrawLine(110, 370, 110, 365, BLACK, DOT_PIXEL_2X2, LINE_STYLE_SOLID);
 8000afa:	2300      	movs	r3, #0
 8000afc:	9302      	str	r3, [sp, #8]
 8000afe:	2302      	movs	r3, #2
 8000b00:	9301      	str	r3, [sp, #4]
 8000b02:	2300      	movs	r3, #0
 8000b04:	9300      	str	r3, [sp, #0]
 8000b06:	f240 136d 	movw	r3, #365	; 0x16d
 8000b0a:	226e      	movs	r2, #110	; 0x6e
 8000b0c:	f44f 71b9 	mov.w	r1, #370	; 0x172
 8000b10:	206e      	movs	r0, #110	; 0x6e
 8000b12:	f000 fb5b 	bl	80011cc <Paint_DrawLine>
	Paint_DrawLine(140, 370, 140, 365, BLACK, DOT_PIXEL_2X2, LINE_STYLE_SOLID);
 8000b16:	2300      	movs	r3, #0
 8000b18:	9302      	str	r3, [sp, #8]
 8000b1a:	2302      	movs	r3, #2
 8000b1c:	9301      	str	r3, [sp, #4]
 8000b1e:	2300      	movs	r3, #0
 8000b20:	9300      	str	r3, [sp, #0]
 8000b22:	f240 136d 	movw	r3, #365	; 0x16d
 8000b26:	228c      	movs	r2, #140	; 0x8c
 8000b28:	f44f 71b9 	mov.w	r1, #370	; 0x172
 8000b2c:	208c      	movs	r0, #140	; 0x8c
 8000b2e:	f000 fb4d 	bl	80011cc <Paint_DrawLine>
	Paint_DrawLine(170, 370, 170, 365, BLACK, DOT_PIXEL_2X2, LINE_STYLE_SOLID);
 8000b32:	2300      	movs	r3, #0
 8000b34:	9302      	str	r3, [sp, #8]
 8000b36:	2302      	movs	r3, #2
 8000b38:	9301      	str	r3, [sp, #4]
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	9300      	str	r3, [sp, #0]
 8000b3e:	f240 136d 	movw	r3, #365	; 0x16d
 8000b42:	22aa      	movs	r2, #170	; 0xaa
 8000b44:	f44f 71b9 	mov.w	r1, #370	; 0x172
 8000b48:	20aa      	movs	r0, #170	; 0xaa
 8000b4a:	f000 fb3f 	bl	80011cc <Paint_DrawLine>
	Paint_DrawLine(200, 370, 200, 365, BLACK, DOT_PIXEL_2X2, LINE_STYLE_SOLID);
 8000b4e:	2300      	movs	r3, #0
 8000b50:	9302      	str	r3, [sp, #8]
 8000b52:	2302      	movs	r3, #2
 8000b54:	9301      	str	r3, [sp, #4]
 8000b56:	2300      	movs	r3, #0
 8000b58:	9300      	str	r3, [sp, #0]
 8000b5a:	f240 136d 	movw	r3, #365	; 0x16d
 8000b5e:	22c8      	movs	r2, #200	; 0xc8
 8000b60:	f44f 71b9 	mov.w	r1, #370	; 0x172
 8000b64:	20c8      	movs	r0, #200	; 0xc8
 8000b66:	f000 fb31 	bl	80011cc <Paint_DrawLine>
	Paint_DrawLine(230, 370, 230, 365, BLACK, DOT_PIXEL_2X2, LINE_STYLE_SOLID);
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	9302      	str	r3, [sp, #8]
 8000b6e:	2302      	movs	r3, #2
 8000b70:	9301      	str	r3, [sp, #4]
 8000b72:	2300      	movs	r3, #0
 8000b74:	9300      	str	r3, [sp, #0]
 8000b76:	f240 136d 	movw	r3, #365	; 0x16d
 8000b7a:	22e6      	movs	r2, #230	; 0xe6
 8000b7c:	f44f 71b9 	mov.w	r1, #370	; 0x172
 8000b80:	20e6      	movs	r0, #230	; 0xe6
 8000b82:	f000 fb23 	bl	80011cc <Paint_DrawLine>
	Paint_DrawLine(260, 370, 260, 365, BLACK, DOT_PIXEL_2X2, LINE_STYLE_SOLID);
 8000b86:	2300      	movs	r3, #0
 8000b88:	9302      	str	r3, [sp, #8]
 8000b8a:	2302      	movs	r3, #2
 8000b8c:	9301      	str	r3, [sp, #4]
 8000b8e:	2300      	movs	r3, #0
 8000b90:	9300      	str	r3, [sp, #0]
 8000b92:	f240 136d 	movw	r3, #365	; 0x16d
 8000b96:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000b9a:	f44f 71b9 	mov.w	r1, #370	; 0x172
 8000b9e:	f44f 7082 	mov.w	r0, #260	; 0x104
 8000ba2:	f000 fb13 	bl	80011cc <Paint_DrawLine>
	Paint_DrawLine(290, 370, 290, 365, BLACK, DOT_PIXEL_2X2, LINE_STYLE_SOLID);
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	9302      	str	r3, [sp, #8]
 8000baa:	2302      	movs	r3, #2
 8000bac:	9301      	str	r3, [sp, #4]
 8000bae:	2300      	movs	r3, #0
 8000bb0:	9300      	str	r3, [sp, #0]
 8000bb2:	f240 136d 	movw	r3, #365	; 0x16d
 8000bb6:	f44f 7291 	mov.w	r2, #290	; 0x122
 8000bba:	f44f 71b9 	mov.w	r1, #370	; 0x172
 8000bbe:	f44f 7091 	mov.w	r0, #290	; 0x122
 8000bc2:	f000 fb03 	bl	80011cc <Paint_DrawLine>
	// JD - Y Axis Values



	// JD - Graph Title
	Paint_DrawString_EN(130, 170, "Co2", &Font24,  BLACK, WHITE);
 8000bc6:	23ff      	movs	r3, #255	; 0xff
 8000bc8:	9301      	str	r3, [sp, #4]
 8000bca:	2300      	movs	r3, #0
 8000bcc:	9300      	str	r3, [sp, #0]
 8000bce:	4b24      	ldr	r3, [pc, #144]	; (8000c60 <love+0x37c>)
 8000bd0:	4a21      	ldr	r2, [pc, #132]	; (8000c58 <love+0x374>)
 8000bd2:	21aa      	movs	r1, #170	; 0xaa
 8000bd4:	2082      	movs	r0, #130	; 0x82
 8000bd6:	f000 fc49 	bl	800146c <Paint_DrawString_EN>

	// JD - Main Graph Lines
	Paint_DrawLine(30, 370, 30, 200, BLACK, DOT_PIXEL_2X2, LINE_STYLE_SOLID);// X
 8000bda:	2300      	movs	r3, #0
 8000bdc:	9302      	str	r3, [sp, #8]
 8000bde:	2302      	movs	r3, #2
 8000be0:	9301      	str	r3, [sp, #4]
 8000be2:	2300      	movs	r3, #0
 8000be4:	9300      	str	r3, [sp, #0]
 8000be6:	23c8      	movs	r3, #200	; 0xc8
 8000be8:	221e      	movs	r2, #30
 8000bea:	f44f 71b9 	mov.w	r1, #370	; 0x172
 8000bee:	201e      	movs	r0, #30
 8000bf0:	f000 faec 	bl	80011cc <Paint_DrawLine>
	Paint_DrawLine(30, 370, 290, 370, BLACK, DOT_PIXEL_2X2, LINE_STYLE_SOLID);// Y
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	9302      	str	r3, [sp, #8]
 8000bf8:	2302      	movs	r3, #2
 8000bfa:	9301      	str	r3, [sp, #4]
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	9300      	str	r3, [sp, #0]
 8000c00:	f44f 73b9 	mov.w	r3, #370	; 0x172
 8000c04:	f44f 7291 	mov.w	r2, #290	; 0x122
 8000c08:	f44f 71b9 	mov.w	r1, #370	; 0x172
 8000c0c:	201e      	movs	r0, #30
 8000c0e:	f000 fadd 	bl	80011cc <Paint_DrawLine>





	EPD_4IN2_Display(BlackImage); // JD - Sending the image and commands to display the image
 8000c12:	6838      	ldr	r0, [r7, #0]
 8000c14:	f7ff fe24 	bl	8000860 <EPD_4IN2_Display>
	DEV_Delay_ms(5000);
 8000c18:	f241 3088 	movw	r0, #5000	; 0x1388
 8000c1c:	f001 f89c 	bl	8001d58 <HAL_Delay>

	//EPD_4IN2_Clear(); // JD - Sending commands to clear the display
	free(BlackImage); // JD - "Freeing" the memory used for the image. Look into just keeping it in the heap
 8000c20:	6838      	ldr	r0, [r7, #0]
 8000c22:	f003 f863 	bl	8003cec <free>
	EPD_4IN2_Sleep(); // JD - Sending the commands to turn off the display
 8000c26:	f7ff fe4e 	bl	80008c6 <EPD_4IN2_Sleep>
	DEV_Module_Exit(); // JD - Setting the pin to low and shutting off 5v to the module
 8000c2a:	f7ff fc7f 	bl	800052c <DEV_Module_Exit>
}
 8000c2e:	bf00      	nop
 8000c30:	3708      	adds	r7, #8
 8000c32:	46bd      	mov	sp, r7
 8000c34:	bd80      	pop	{r7, pc}
 8000c36:	bf00      	nop
 8000c38:	20000000 	.word	0x20000000
 8000c3c:	08003f20 	.word	0x08003f20
 8000c40:	08003f2c 	.word	0x08003f2c
 8000c44:	08003f30 	.word	0x08003f30
 8000c48:	08003f34 	.word	0x08003f34
 8000c4c:	08003f40 	.word	0x08003f40
 8000c50:	08003f44 	.word	0x08003f44
 8000c54:	08003f50 	.word	0x08003f50
 8000c58:	08003f5c 	.word	0x08003f5c
 8000c5c:	08003f60 	.word	0x08003f60
 8000c60:	20000008 	.word	0x20000008

08000c64 <Paint_NewImage>:
    width   :   The width of the picture
    Height  :   The height of the picture
    Color   :   Whether the picture is inverted
******************************************************************************/
void Paint_NewImage(uint8_t *image, uint16_t Width, uint16_t Height, uint16_t Rotate, uint16_t Color)
{
 8000c64:	b480      	push	{r7}
 8000c66:	b085      	sub	sp, #20
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	60f8      	str	r0, [r7, #12]
 8000c6c:	4608      	mov	r0, r1
 8000c6e:	4611      	mov	r1, r2
 8000c70:	461a      	mov	r2, r3
 8000c72:	4603      	mov	r3, r0
 8000c74:	817b      	strh	r3, [r7, #10]
 8000c76:	460b      	mov	r3, r1
 8000c78:	813b      	strh	r3, [r7, #8]
 8000c7a:	4613      	mov	r3, r2
 8000c7c:	80fb      	strh	r3, [r7, #6]
    Paint.Image = NULL;
 8000c7e:	4b23      	ldr	r3, [pc, #140]	; (8000d0c <Paint_NewImage+0xa8>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	601a      	str	r2, [r3, #0]
    Paint.Image = image;
 8000c84:	4a21      	ldr	r2, [pc, #132]	; (8000d0c <Paint_NewImage+0xa8>)
 8000c86:	68fb      	ldr	r3, [r7, #12]
 8000c88:	6013      	str	r3, [r2, #0]

    Paint.WidthMemory = Width;
 8000c8a:	4a20      	ldr	r2, [pc, #128]	; (8000d0c <Paint_NewImage+0xa8>)
 8000c8c:	897b      	ldrh	r3, [r7, #10]
 8000c8e:	8113      	strh	r3, [r2, #8]
    Paint.HeightMemory = Height;
 8000c90:	4a1e      	ldr	r2, [pc, #120]	; (8000d0c <Paint_NewImage+0xa8>)
 8000c92:	893b      	ldrh	r3, [r7, #8]
 8000c94:	8153      	strh	r3, [r2, #10]
    Paint.Color = Color;    
 8000c96:	4a1d      	ldr	r2, [pc, #116]	; (8000d0c <Paint_NewImage+0xa8>)
 8000c98:	8b3b      	ldrh	r3, [r7, #24]
 8000c9a:	8193      	strh	r3, [r2, #12]
		Paint.Scale = 2;
 8000c9c:	4b1b      	ldr	r3, [pc, #108]	; (8000d0c <Paint_NewImage+0xa8>)
 8000c9e:	2202      	movs	r2, #2
 8000ca0:	82da      	strh	r2, [r3, #22]
		
    Paint.WidthByte = (Width % 8 == 0)? (Width / 8 ): (Width / 8 + 1);
 8000ca2:	897b      	ldrh	r3, [r7, #10]
 8000ca4:	f003 0307 	and.w	r3, r3, #7
 8000ca8:	b29b      	uxth	r3, r3
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d103      	bne.n	8000cb6 <Paint_NewImage+0x52>
 8000cae:	897b      	ldrh	r3, [r7, #10]
 8000cb0:	08db      	lsrs	r3, r3, #3
 8000cb2:	b29b      	uxth	r3, r3
 8000cb4:	e004      	b.n	8000cc0 <Paint_NewImage+0x5c>
 8000cb6:	897b      	ldrh	r3, [r7, #10]
 8000cb8:	08db      	lsrs	r3, r3, #3
 8000cba:	b29b      	uxth	r3, r3
 8000cbc:	3301      	adds	r3, #1
 8000cbe:	b29b      	uxth	r3, r3
 8000cc0:	4a12      	ldr	r2, [pc, #72]	; (8000d0c <Paint_NewImage+0xa8>)
 8000cc2:	8253      	strh	r3, [r2, #18]
    Paint.HeightByte = Height;    
 8000cc4:	4a11      	ldr	r2, [pc, #68]	; (8000d0c <Paint_NewImage+0xa8>)
 8000cc6:	893b      	ldrh	r3, [r7, #8]
 8000cc8:	8293      	strh	r3, [r2, #20]
//    printf("WidthByte = %d, HeightByte = %d\r\n", Paint.WidthByte, Paint.HeightByte);
//    printf(" EPD_WIDTH / 8 = %d\r\n",  122 / 8);
   
    Paint.Rotate = Rotate;
 8000cca:	4a10      	ldr	r2, [pc, #64]	; (8000d0c <Paint_NewImage+0xa8>)
 8000ccc:	88fb      	ldrh	r3, [r7, #6]
 8000cce:	81d3      	strh	r3, [r2, #14]
    Paint.Mirror = MIRROR_NONE;
 8000cd0:	4b0e      	ldr	r3, [pc, #56]	; (8000d0c <Paint_NewImage+0xa8>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	821a      	strh	r2, [r3, #16]
    
    if(Rotate == ROTATE_0 || Rotate == ROTATE_180) {
 8000cd6:	88fb      	ldrh	r3, [r7, #6]
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d002      	beq.n	8000ce2 <Paint_NewImage+0x7e>
 8000cdc:	88fb      	ldrh	r3, [r7, #6]
 8000cde:	2bb4      	cmp	r3, #180	; 0xb4
 8000ce0:	d106      	bne.n	8000cf0 <Paint_NewImage+0x8c>
        Paint.Width = Width;
 8000ce2:	4a0a      	ldr	r2, [pc, #40]	; (8000d0c <Paint_NewImage+0xa8>)
 8000ce4:	897b      	ldrh	r3, [r7, #10]
 8000ce6:	8093      	strh	r3, [r2, #4]
        Paint.Height = Height;
 8000ce8:	4a08      	ldr	r2, [pc, #32]	; (8000d0c <Paint_NewImage+0xa8>)
 8000cea:	893b      	ldrh	r3, [r7, #8]
 8000cec:	80d3      	strh	r3, [r2, #6]
 8000cee:	e006      	b.n	8000cfe <Paint_NewImage+0x9a>
    } else {
        Paint.Width = Height;
 8000cf0:	4a06      	ldr	r2, [pc, #24]	; (8000d0c <Paint_NewImage+0xa8>)
 8000cf2:	893b      	ldrh	r3, [r7, #8]
 8000cf4:	8093      	strh	r3, [r2, #4]
        Paint.Height = Width;
 8000cf6:	4a05      	ldr	r2, [pc, #20]	; (8000d0c <Paint_NewImage+0xa8>)
 8000cf8:	897b      	ldrh	r3, [r7, #10]
 8000cfa:	80d3      	strh	r3, [r2, #6]
    }
}
 8000cfc:	bf00      	nop
 8000cfe:	bf00      	nop
 8000d00:	3714      	adds	r7, #20
 8000d02:	46bd      	mov	sp, r7
 8000d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d08:	4770      	bx	lr
 8000d0a:	bf00      	nop
 8000d0c:	2000009c 	.word	0x2000009c

08000d10 <Paint_SelectImage>:
function: Select Image
parameter:
    image : Pointer to the image cache
******************************************************************************/
void Paint_SelectImage(uint8_t *image)
{
 8000d10:	b480      	push	{r7}
 8000d12:	b083      	sub	sp, #12
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
    Paint.Image = image;
 8000d18:	4a04      	ldr	r2, [pc, #16]	; (8000d2c <Paint_SelectImage+0x1c>)
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	6013      	str	r3, [r2, #0]
}
 8000d1e:	bf00      	nop
 8000d20:	370c      	adds	r7, #12
 8000d22:	46bd      	mov	sp, r7
 8000d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d28:	4770      	bx	lr
 8000d2a:	bf00      	nop
 8000d2c:	2000009c 	.word	0x2000009c

08000d30 <Paint_SetPixel>:
    Xpoint : At point X
    Ypoint : At point Y
    Color  : Painted colors
******************************************************************************/
void Paint_SetPixel(uint16_t Xpoint, uint16_t Ypoint, uint16_t Color)
{
 8000d30:	b480      	push	{r7}
 8000d32:	b08b      	sub	sp, #44	; 0x2c
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	4603      	mov	r3, r0
 8000d38:	80fb      	strh	r3, [r7, #6]
 8000d3a:	460b      	mov	r3, r1
 8000d3c:	80bb      	strh	r3, [r7, #4]
 8000d3e:	4613      	mov	r3, r2
 8000d40:	807b      	strh	r3, [r7, #2]
    if(Xpoint > Paint.Width || Ypoint > Paint.Height){
 8000d42:	4ba0      	ldr	r3, [pc, #640]	; (8000fc4 <Paint_SetPixel+0x294>)
 8000d44:	889b      	ldrh	r3, [r3, #4]
 8000d46:	88fa      	ldrh	r2, [r7, #6]
 8000d48:	429a      	cmp	r2, r3
 8000d4a:	f200 812f 	bhi.w	8000fac <Paint_SetPixel+0x27c>
 8000d4e:	4b9d      	ldr	r3, [pc, #628]	; (8000fc4 <Paint_SetPixel+0x294>)
 8000d50:	88db      	ldrh	r3, [r3, #6]
 8000d52:	88ba      	ldrh	r2, [r7, #4]
 8000d54:	429a      	cmp	r2, r3
 8000d56:	f200 8129 	bhi.w	8000fac <Paint_SetPixel+0x27c>
        //Debug("Exceeding display boundaries\r\n");
        return;
    }      
    uint16_t X, Y;

    switch(Paint.Rotate) {
 8000d5a:	4b9a      	ldr	r3, [pc, #616]	; (8000fc4 <Paint_SetPixel+0x294>)
 8000d5c:	89db      	ldrh	r3, [r3, #14]
 8000d5e:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8000d62:	d02b      	beq.n	8000dbc <Paint_SetPixel+0x8c>
 8000d64:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8000d68:	f300 8122 	bgt.w	8000fb0 <Paint_SetPixel+0x280>
 8000d6c:	2bb4      	cmp	r3, #180	; 0xb4
 8000d6e:	d016      	beq.n	8000d9e <Paint_SetPixel+0x6e>
 8000d70:	2bb4      	cmp	r3, #180	; 0xb4
 8000d72:	f300 811d 	bgt.w	8000fb0 <Paint_SetPixel+0x280>
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d002      	beq.n	8000d80 <Paint_SetPixel+0x50>
 8000d7a:	2b5a      	cmp	r3, #90	; 0x5a
 8000d7c:	d005      	beq.n	8000d8a <Paint_SetPixel+0x5a>
    case 270:
        X = Ypoint;
        Y = Paint.HeightMemory - Xpoint - 1;
        break;
    default:
        return;
 8000d7e:	e117      	b.n	8000fb0 <Paint_SetPixel+0x280>
        X = Xpoint;
 8000d80:	88fb      	ldrh	r3, [r7, #6]
 8000d82:	84fb      	strh	r3, [r7, #38]	; 0x26
        Y = Ypoint;  
 8000d84:	88bb      	ldrh	r3, [r7, #4]
 8000d86:	84bb      	strh	r3, [r7, #36]	; 0x24
        break;
 8000d88:	e022      	b.n	8000dd0 <Paint_SetPixel+0xa0>
        X = Paint.WidthMemory - Ypoint - 1;
 8000d8a:	4b8e      	ldr	r3, [pc, #568]	; (8000fc4 <Paint_SetPixel+0x294>)
 8000d8c:	891a      	ldrh	r2, [r3, #8]
 8000d8e:	88bb      	ldrh	r3, [r7, #4]
 8000d90:	1ad3      	subs	r3, r2, r3
 8000d92:	b29b      	uxth	r3, r3
 8000d94:	3b01      	subs	r3, #1
 8000d96:	84fb      	strh	r3, [r7, #38]	; 0x26
        Y = Xpoint;
 8000d98:	88fb      	ldrh	r3, [r7, #6]
 8000d9a:	84bb      	strh	r3, [r7, #36]	; 0x24
        break;
 8000d9c:	e018      	b.n	8000dd0 <Paint_SetPixel+0xa0>
        X = Paint.WidthMemory - Xpoint - 1;
 8000d9e:	4b89      	ldr	r3, [pc, #548]	; (8000fc4 <Paint_SetPixel+0x294>)
 8000da0:	891a      	ldrh	r2, [r3, #8]
 8000da2:	88fb      	ldrh	r3, [r7, #6]
 8000da4:	1ad3      	subs	r3, r2, r3
 8000da6:	b29b      	uxth	r3, r3
 8000da8:	3b01      	subs	r3, #1
 8000daa:	84fb      	strh	r3, [r7, #38]	; 0x26
        Y = Paint.HeightMemory - Ypoint - 1;
 8000dac:	4b85      	ldr	r3, [pc, #532]	; (8000fc4 <Paint_SetPixel+0x294>)
 8000dae:	895a      	ldrh	r2, [r3, #10]
 8000db0:	88bb      	ldrh	r3, [r7, #4]
 8000db2:	1ad3      	subs	r3, r2, r3
 8000db4:	b29b      	uxth	r3, r3
 8000db6:	3b01      	subs	r3, #1
 8000db8:	84bb      	strh	r3, [r7, #36]	; 0x24
        break;
 8000dba:	e009      	b.n	8000dd0 <Paint_SetPixel+0xa0>
        X = Ypoint;
 8000dbc:	88bb      	ldrh	r3, [r7, #4]
 8000dbe:	84fb      	strh	r3, [r7, #38]	; 0x26
        Y = Paint.HeightMemory - Xpoint - 1;
 8000dc0:	4b80      	ldr	r3, [pc, #512]	; (8000fc4 <Paint_SetPixel+0x294>)
 8000dc2:	895a      	ldrh	r2, [r3, #10]
 8000dc4:	88fb      	ldrh	r3, [r7, #6]
 8000dc6:	1ad3      	subs	r3, r2, r3
 8000dc8:	b29b      	uxth	r3, r3
 8000dca:	3b01      	subs	r3, #1
 8000dcc:	84bb      	strh	r3, [r7, #36]	; 0x24
        break;
 8000dce:	bf00      	nop
    }
    
    switch(Paint.Mirror) {
 8000dd0:	4b7c      	ldr	r3, [pc, #496]	; (8000fc4 <Paint_SetPixel+0x294>)
 8000dd2:	8a1b      	ldrh	r3, [r3, #16]
 8000dd4:	2b03      	cmp	r3, #3
 8000dd6:	f200 80ed 	bhi.w	8000fb4 <Paint_SetPixel+0x284>
 8000dda:	a201      	add	r2, pc, #4	; (adr r2, 8000de0 <Paint_SetPixel+0xb0>)
 8000ddc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000de0:	08000e2f 	.word	0x08000e2f
 8000de4:	08000df1 	.word	0x08000df1
 8000de8:	08000e01 	.word	0x08000e01
 8000dec:	08000e11 	.word	0x08000e11
    case MIRROR_NONE:
        break;
    case MIRROR_HORIZONTAL:
        X = Paint.WidthMemory - X - 1;
 8000df0:	4b74      	ldr	r3, [pc, #464]	; (8000fc4 <Paint_SetPixel+0x294>)
 8000df2:	891a      	ldrh	r2, [r3, #8]
 8000df4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000df6:	1ad3      	subs	r3, r2, r3
 8000df8:	b29b      	uxth	r3, r3
 8000dfa:	3b01      	subs	r3, #1
 8000dfc:	84fb      	strh	r3, [r7, #38]	; 0x26
        break;
 8000dfe:	e017      	b.n	8000e30 <Paint_SetPixel+0x100>
    case MIRROR_VERTICAL:
        Y = Paint.HeightMemory - Y - 1;
 8000e00:	4b70      	ldr	r3, [pc, #448]	; (8000fc4 <Paint_SetPixel+0x294>)
 8000e02:	895a      	ldrh	r2, [r3, #10]
 8000e04:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000e06:	1ad3      	subs	r3, r2, r3
 8000e08:	b29b      	uxth	r3, r3
 8000e0a:	3b01      	subs	r3, #1
 8000e0c:	84bb      	strh	r3, [r7, #36]	; 0x24
        break;
 8000e0e:	e00f      	b.n	8000e30 <Paint_SetPixel+0x100>
    case MIRROR_ORIGIN:
        X = Paint.WidthMemory - X - 1;
 8000e10:	4b6c      	ldr	r3, [pc, #432]	; (8000fc4 <Paint_SetPixel+0x294>)
 8000e12:	891a      	ldrh	r2, [r3, #8]
 8000e14:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000e16:	1ad3      	subs	r3, r2, r3
 8000e18:	b29b      	uxth	r3, r3
 8000e1a:	3b01      	subs	r3, #1
 8000e1c:	84fb      	strh	r3, [r7, #38]	; 0x26
        Y = Paint.HeightMemory - Y - 1;
 8000e1e:	4b69      	ldr	r3, [pc, #420]	; (8000fc4 <Paint_SetPixel+0x294>)
 8000e20:	895a      	ldrh	r2, [r3, #10]
 8000e22:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000e24:	1ad3      	subs	r3, r2, r3
 8000e26:	b29b      	uxth	r3, r3
 8000e28:	3b01      	subs	r3, #1
 8000e2a:	84bb      	strh	r3, [r7, #36]	; 0x24
        break;
 8000e2c:	e000      	b.n	8000e30 <Paint_SetPixel+0x100>
        break;
 8000e2e:	bf00      	nop
    default:
        return;
    }

    if(X > Paint.WidthMemory || Y > Paint.HeightMemory){
 8000e30:	4b64      	ldr	r3, [pc, #400]	; (8000fc4 <Paint_SetPixel+0x294>)
 8000e32:	891b      	ldrh	r3, [r3, #8]
 8000e34:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8000e36:	429a      	cmp	r2, r3
 8000e38:	f200 80be 	bhi.w	8000fb8 <Paint_SetPixel+0x288>
 8000e3c:	4b61      	ldr	r3, [pc, #388]	; (8000fc4 <Paint_SetPixel+0x294>)
 8000e3e:	895b      	ldrh	r3, [r3, #10]
 8000e40:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8000e42:	429a      	cmp	r2, r3
 8000e44:	f200 80b8 	bhi.w	8000fb8 <Paint_SetPixel+0x288>
        //Debug("Exceeding display boundaries\r\n");
        return;
    }
    
    if(Paint.Scale == 2){
 8000e48:	4b5e      	ldr	r3, [pc, #376]	; (8000fc4 <Paint_SetPixel+0x294>)
 8000e4a:	8adb      	ldrh	r3, [r3, #22]
 8000e4c:	2b02      	cmp	r3, #2
 8000e4e:	d139      	bne.n	8000ec4 <Paint_SetPixel+0x194>
        uint32_t Addr = X / 8 + Y * Paint.WidthByte;
 8000e50:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000e52:	08db      	lsrs	r3, r3, #3
 8000e54:	b29b      	uxth	r3, r3
 8000e56:	4619      	mov	r1, r3
 8000e58:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000e5a:	4a5a      	ldr	r2, [pc, #360]	; (8000fc4 <Paint_SetPixel+0x294>)
 8000e5c:	8a52      	ldrh	r2, [r2, #18]
 8000e5e:	fb02 f303 	mul.w	r3, r2, r3
 8000e62:	440b      	add	r3, r1
 8000e64:	613b      	str	r3, [r7, #16]
        uint8_t Rdata = Paint.Image[Addr];
 8000e66:	4b57      	ldr	r3, [pc, #348]	; (8000fc4 <Paint_SetPixel+0x294>)
 8000e68:	681a      	ldr	r2, [r3, #0]
 8000e6a:	693b      	ldr	r3, [r7, #16]
 8000e6c:	4413      	add	r3, r2
 8000e6e:	781b      	ldrb	r3, [r3, #0]
 8000e70:	73fb      	strb	r3, [r7, #15]
        if(Color == BLACK)
 8000e72:	887b      	ldrh	r3, [r7, #2]
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d113      	bne.n	8000ea0 <Paint_SetPixel+0x170>
            Paint.Image[Addr] = Rdata & ~(0x80 >> (X % 8));
 8000e78:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000e7a:	f003 0307 	and.w	r3, r3, #7
 8000e7e:	2280      	movs	r2, #128	; 0x80
 8000e80:	fa42 f303 	asr.w	r3, r2, r3
 8000e84:	b25b      	sxtb	r3, r3
 8000e86:	43db      	mvns	r3, r3
 8000e88:	b25a      	sxtb	r2, r3
 8000e8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e8e:	4013      	ands	r3, r2
 8000e90:	b259      	sxtb	r1, r3
 8000e92:	4b4c      	ldr	r3, [pc, #304]	; (8000fc4 <Paint_SetPixel+0x294>)
 8000e94:	681a      	ldr	r2, [r3, #0]
 8000e96:	693b      	ldr	r3, [r7, #16]
 8000e98:	4413      	add	r3, r2
 8000e9a:	b2ca      	uxtb	r2, r1
 8000e9c:	701a      	strb	r2, [r3, #0]
 8000e9e:	e08c      	b.n	8000fba <Paint_SetPixel+0x28a>
        else
            Paint.Image[Addr] = Rdata | (0x80 >> (X % 8));
 8000ea0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000ea2:	f003 0307 	and.w	r3, r3, #7
 8000ea6:	2280      	movs	r2, #128	; 0x80
 8000ea8:	fa42 f303 	asr.w	r3, r2, r3
 8000eac:	b25a      	sxtb	r2, r3
 8000eae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000eb2:	4313      	orrs	r3, r2
 8000eb4:	b259      	sxtb	r1, r3
 8000eb6:	4b43      	ldr	r3, [pc, #268]	; (8000fc4 <Paint_SetPixel+0x294>)
 8000eb8:	681a      	ldr	r2, [r3, #0]
 8000eba:	693b      	ldr	r3, [r7, #16]
 8000ebc:	4413      	add	r3, r2
 8000ebe:	b2ca      	uxtb	r2, r1
 8000ec0:	701a      	strb	r2, [r3, #0]
 8000ec2:	e07a      	b.n	8000fba <Paint_SetPixel+0x28a>
    }else if(Paint.Scale == 4){
 8000ec4:	4b3f      	ldr	r3, [pc, #252]	; (8000fc4 <Paint_SetPixel+0x294>)
 8000ec6:	8adb      	ldrh	r3, [r3, #22]
 8000ec8:	2b04      	cmp	r3, #4
 8000eca:	d137      	bne.n	8000f3c <Paint_SetPixel+0x20c>
        uint32_t Addr = X / 4 + Y * Paint.WidthByte;
 8000ecc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000ece:	089b      	lsrs	r3, r3, #2
 8000ed0:	b29b      	uxth	r3, r3
 8000ed2:	4619      	mov	r1, r3
 8000ed4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000ed6:	4a3b      	ldr	r2, [pc, #236]	; (8000fc4 <Paint_SetPixel+0x294>)
 8000ed8:	8a52      	ldrh	r2, [r2, #18]
 8000eda:	fb02 f303 	mul.w	r3, r2, r3
 8000ede:	440b      	add	r3, r1
 8000ee0:	61bb      	str	r3, [r7, #24]
        Color = Color % 4;//Guaranteed color scale is 4  --- 0~3
 8000ee2:	887b      	ldrh	r3, [r7, #2]
 8000ee4:	f003 0303 	and.w	r3, r3, #3
 8000ee8:	807b      	strh	r3, [r7, #2]
        uint8_t Rdata = Paint.Image[Addr];
 8000eea:	4b36      	ldr	r3, [pc, #216]	; (8000fc4 <Paint_SetPixel+0x294>)
 8000eec:	681a      	ldr	r2, [r3, #0]
 8000eee:	69bb      	ldr	r3, [r7, #24]
 8000ef0:	4413      	add	r3, r2
 8000ef2:	781b      	ldrb	r3, [r3, #0]
 8000ef4:	75fb      	strb	r3, [r7, #23]
        
        Rdata = Rdata & (~(0xC0 >> ((X % 4)*2)));
 8000ef6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000ef8:	f003 0303 	and.w	r3, r3, #3
 8000efc:	005b      	lsls	r3, r3, #1
 8000efe:	22c0      	movs	r2, #192	; 0xc0
 8000f00:	fa42 f303 	asr.w	r3, r2, r3
 8000f04:	b25b      	sxtb	r3, r3
 8000f06:	43db      	mvns	r3, r3
 8000f08:	b25a      	sxtb	r2, r3
 8000f0a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000f0e:	4013      	ands	r3, r2
 8000f10:	b25b      	sxtb	r3, r3
 8000f12:	75fb      	strb	r3, [r7, #23]
        Paint.Image[Addr] = Rdata | ((Color << 6) >> ((X % 4)*2));
 8000f14:	887b      	ldrh	r3, [r7, #2]
 8000f16:	019a      	lsls	r2, r3, #6
 8000f18:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000f1a:	f003 0303 	and.w	r3, r3, #3
 8000f1e:	005b      	lsls	r3, r3, #1
 8000f20:	fa42 f303 	asr.w	r3, r2, r3
 8000f24:	b25a      	sxtb	r2, r3
 8000f26:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000f2a:	4313      	orrs	r3, r2
 8000f2c:	b259      	sxtb	r1, r3
 8000f2e:	4b25      	ldr	r3, [pc, #148]	; (8000fc4 <Paint_SetPixel+0x294>)
 8000f30:	681a      	ldr	r2, [r3, #0]
 8000f32:	69bb      	ldr	r3, [r7, #24]
 8000f34:	4413      	add	r3, r2
 8000f36:	b2ca      	uxtb	r2, r1
 8000f38:	701a      	strb	r2, [r3, #0]
 8000f3a:	e03e      	b.n	8000fba <Paint_SetPixel+0x28a>
    }else if(Paint.Scale == 7){
 8000f3c:	4b21      	ldr	r3, [pc, #132]	; (8000fc4 <Paint_SetPixel+0x294>)
 8000f3e:	8adb      	ldrh	r3, [r3, #22]
 8000f40:	2b07      	cmp	r3, #7
 8000f42:	d13a      	bne.n	8000fba <Paint_SetPixel+0x28a>
		uint32_t Addr = X / 2  + Y * Paint.WidthByte;
 8000f44:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000f46:	085b      	lsrs	r3, r3, #1
 8000f48:	b29b      	uxth	r3, r3
 8000f4a:	4619      	mov	r1, r3
 8000f4c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000f4e:	4a1d      	ldr	r2, [pc, #116]	; (8000fc4 <Paint_SetPixel+0x294>)
 8000f50:	8a52      	ldrh	r2, [r2, #18]
 8000f52:	fb02 f303 	mul.w	r3, r2, r3
 8000f56:	440b      	add	r3, r1
 8000f58:	623b      	str	r3, [r7, #32]
		uint8_t Rdata = Paint.Image[Addr];
 8000f5a:	4b1a      	ldr	r3, [pc, #104]	; (8000fc4 <Paint_SetPixel+0x294>)
 8000f5c:	681a      	ldr	r2, [r3, #0]
 8000f5e:	6a3b      	ldr	r3, [r7, #32]
 8000f60:	4413      	add	r3, r2
 8000f62:	781b      	ldrb	r3, [r3, #0]
 8000f64:	77fb      	strb	r3, [r7, #31]
		Rdata = Rdata & (~(0xF0 >> ((X % 2)*4)));//Clear first, then set value
 8000f66:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000f68:	f003 0301 	and.w	r3, r3, #1
 8000f6c:	009b      	lsls	r3, r3, #2
 8000f6e:	22f0      	movs	r2, #240	; 0xf0
 8000f70:	fa42 f303 	asr.w	r3, r2, r3
 8000f74:	b25b      	sxtb	r3, r3
 8000f76:	43db      	mvns	r3, r3
 8000f78:	b25a      	sxtb	r2, r3
 8000f7a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8000f7e:	4013      	ands	r3, r2
 8000f80:	b25b      	sxtb	r3, r3
 8000f82:	77fb      	strb	r3, [r7, #31]
		Paint.Image[Addr] = Rdata | ((Color << 4) >> ((X % 2)*4));
 8000f84:	887b      	ldrh	r3, [r7, #2]
 8000f86:	011a      	lsls	r2, r3, #4
 8000f88:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000f8a:	f003 0301 	and.w	r3, r3, #1
 8000f8e:	009b      	lsls	r3, r3, #2
 8000f90:	fa42 f303 	asr.w	r3, r2, r3
 8000f94:	b25a      	sxtb	r2, r3
 8000f96:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8000f9a:	4313      	orrs	r3, r2
 8000f9c:	b259      	sxtb	r1, r3
 8000f9e:	4b09      	ldr	r3, [pc, #36]	; (8000fc4 <Paint_SetPixel+0x294>)
 8000fa0:	681a      	ldr	r2, [r3, #0]
 8000fa2:	6a3b      	ldr	r3, [r7, #32]
 8000fa4:	4413      	add	r3, r2
 8000fa6:	b2ca      	uxtb	r2, r1
 8000fa8:	701a      	strb	r2, [r3, #0]
 8000faa:	e006      	b.n	8000fba <Paint_SetPixel+0x28a>
        return;
 8000fac:	bf00      	nop
 8000fae:	e004      	b.n	8000fba <Paint_SetPixel+0x28a>
        return;
 8000fb0:	bf00      	nop
 8000fb2:	e002      	b.n	8000fba <Paint_SetPixel+0x28a>
        return;
 8000fb4:	bf00      	nop
 8000fb6:	e000      	b.n	8000fba <Paint_SetPixel+0x28a>
        return;
 8000fb8:	bf00      	nop
		//printf("Add =  %d ,data = %d\r\n",Addr,Rdata);
		}
}
 8000fba:	372c      	adds	r7, #44	; 0x2c
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc2:	4770      	bx	lr
 8000fc4:	2000009c 	.word	0x2000009c

08000fc8 <Paint_Clear>:
function: Clear the color of the picture
parameter:
    Color : Painted colors
******************************************************************************/
void Paint_Clear(uint16_t Color)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	b087      	sub	sp, #28
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	4603      	mov	r3, r0
 8000fd0:	80fb      	strh	r3, [r7, #6]
	if(Paint.Scale == 2 || Paint.Scale == 4){
 8000fd2:	4b32      	ldr	r3, [pc, #200]	; (800109c <Paint_Clear+0xd4>)
 8000fd4:	8adb      	ldrh	r3, [r3, #22]
 8000fd6:	2b02      	cmp	r3, #2
 8000fd8:	d003      	beq.n	8000fe2 <Paint_Clear+0x1a>
 8000fda:	4b30      	ldr	r3, [pc, #192]	; (800109c <Paint_Clear+0xd4>)
 8000fdc:	8adb      	ldrh	r3, [r3, #22]
 8000fde:	2b04      	cmp	r3, #4
 8000fe0:	d125      	bne.n	800102e <Paint_Clear+0x66>
		for (uint16_t Y = 0; Y < Paint.HeightByte; Y++) {
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	82fb      	strh	r3, [r7, #22]
 8000fe6:	e01c      	b.n	8001022 <Paint_Clear+0x5a>
			for (uint16_t X = 0; X < Paint.WidthByte; X++ ) {//8 pixel =  1 byte
 8000fe8:	2300      	movs	r3, #0
 8000fea:	82bb      	strh	r3, [r7, #20]
 8000fec:	e011      	b.n	8001012 <Paint_Clear+0x4a>
				uint32_t Addr = X + Y*Paint.WidthByte;
 8000fee:	8aba      	ldrh	r2, [r7, #20]
 8000ff0:	8afb      	ldrh	r3, [r7, #22]
 8000ff2:	492a      	ldr	r1, [pc, #168]	; (800109c <Paint_Clear+0xd4>)
 8000ff4:	8a49      	ldrh	r1, [r1, #18]
 8000ff6:	fb01 f303 	mul.w	r3, r1, r3
 8000ffa:	4413      	add	r3, r2
 8000ffc:	60bb      	str	r3, [r7, #8]
				Paint.Image[Addr] = Color;
 8000ffe:	4b27      	ldr	r3, [pc, #156]	; (800109c <Paint_Clear+0xd4>)
 8001000:	681a      	ldr	r2, [r3, #0]
 8001002:	68bb      	ldr	r3, [r7, #8]
 8001004:	4413      	add	r3, r2
 8001006:	88fa      	ldrh	r2, [r7, #6]
 8001008:	b2d2      	uxtb	r2, r2
 800100a:	701a      	strb	r2, [r3, #0]
			for (uint16_t X = 0; X < Paint.WidthByte; X++ ) {//8 pixel =  1 byte
 800100c:	8abb      	ldrh	r3, [r7, #20]
 800100e:	3301      	adds	r3, #1
 8001010:	82bb      	strh	r3, [r7, #20]
 8001012:	4b22      	ldr	r3, [pc, #136]	; (800109c <Paint_Clear+0xd4>)
 8001014:	8a5b      	ldrh	r3, [r3, #18]
 8001016:	8aba      	ldrh	r2, [r7, #20]
 8001018:	429a      	cmp	r2, r3
 800101a:	d3e8      	bcc.n	8000fee <Paint_Clear+0x26>
		for (uint16_t Y = 0; Y < Paint.HeightByte; Y++) {
 800101c:	8afb      	ldrh	r3, [r7, #22]
 800101e:	3301      	adds	r3, #1
 8001020:	82fb      	strh	r3, [r7, #22]
 8001022:	4b1e      	ldr	r3, [pc, #120]	; (800109c <Paint_Clear+0xd4>)
 8001024:	8a9b      	ldrh	r3, [r3, #20]
 8001026:	8afa      	ldrh	r2, [r7, #22]
 8001028:	429a      	cmp	r2, r3
 800102a:	d3dd      	bcc.n	8000fe8 <Paint_Clear+0x20>
 800102c:	e02f      	b.n	800108e <Paint_Clear+0xc6>
			}
		}		
	}else if(Paint.Scale == 7){
 800102e:	4b1b      	ldr	r3, [pc, #108]	; (800109c <Paint_Clear+0xd4>)
 8001030:	8adb      	ldrh	r3, [r3, #22]
 8001032:	2b07      	cmp	r3, #7
 8001034:	d12b      	bne.n	800108e <Paint_Clear+0xc6>
		for (uint16_t Y = 0; Y < Paint.HeightByte; Y++) {
 8001036:	2300      	movs	r3, #0
 8001038:	827b      	strh	r3, [r7, #18]
 800103a:	e022      	b.n	8001082 <Paint_Clear+0xba>
			for (uint16_t X = 0; X < Paint.WidthByte; X++ ) {
 800103c:	2300      	movs	r3, #0
 800103e:	823b      	strh	r3, [r7, #16]
 8001040:	e017      	b.n	8001072 <Paint_Clear+0xaa>
				uint32_t Addr = X + Y*Paint.WidthByte;
 8001042:	8a3a      	ldrh	r2, [r7, #16]
 8001044:	8a7b      	ldrh	r3, [r7, #18]
 8001046:	4915      	ldr	r1, [pc, #84]	; (800109c <Paint_Clear+0xd4>)
 8001048:	8a49      	ldrh	r1, [r1, #18]
 800104a:	fb01 f303 	mul.w	r3, r1, r3
 800104e:	4413      	add	r3, r2
 8001050:	60fb      	str	r3, [r7, #12]
				Paint.Image[Addr] = (Color<<4)|Color;
 8001052:	88fb      	ldrh	r3, [r7, #6]
 8001054:	011b      	lsls	r3, r3, #4
 8001056:	b25a      	sxtb	r2, r3
 8001058:	88fb      	ldrh	r3, [r7, #6]
 800105a:	b25b      	sxtb	r3, r3
 800105c:	4313      	orrs	r3, r2
 800105e:	b259      	sxtb	r1, r3
 8001060:	4b0e      	ldr	r3, [pc, #56]	; (800109c <Paint_Clear+0xd4>)
 8001062:	681a      	ldr	r2, [r3, #0]
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	4413      	add	r3, r2
 8001068:	b2ca      	uxtb	r2, r1
 800106a:	701a      	strb	r2, [r3, #0]
			for (uint16_t X = 0; X < Paint.WidthByte; X++ ) {
 800106c:	8a3b      	ldrh	r3, [r7, #16]
 800106e:	3301      	adds	r3, #1
 8001070:	823b      	strh	r3, [r7, #16]
 8001072:	4b0a      	ldr	r3, [pc, #40]	; (800109c <Paint_Clear+0xd4>)
 8001074:	8a5b      	ldrh	r3, [r3, #18]
 8001076:	8a3a      	ldrh	r2, [r7, #16]
 8001078:	429a      	cmp	r2, r3
 800107a:	d3e2      	bcc.n	8001042 <Paint_Clear+0x7a>
		for (uint16_t Y = 0; Y < Paint.HeightByte; Y++) {
 800107c:	8a7b      	ldrh	r3, [r7, #18]
 800107e:	3301      	adds	r3, #1
 8001080:	827b      	strh	r3, [r7, #18]
 8001082:	4b06      	ldr	r3, [pc, #24]	; (800109c <Paint_Clear+0xd4>)
 8001084:	8a9b      	ldrh	r3, [r3, #20]
 8001086:	8a7a      	ldrh	r2, [r7, #18]
 8001088:	429a      	cmp	r2, r3
 800108a:	d3d7      	bcc.n	800103c <Paint_Clear+0x74>
			}
		}		
	}
}
 800108c:	e7ff      	b.n	800108e <Paint_Clear+0xc6>
 800108e:	bf00      	nop
 8001090:	371c      	adds	r7, #28
 8001092:	46bd      	mov	sp, r7
 8001094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001098:	4770      	bx	lr
 800109a:	bf00      	nop
 800109c:	2000009c 	.word	0x2000009c

080010a0 <Paint_DrawPoint>:
    Dot_Pixel	: point size
    Dot_Style	: point Style
******************************************************************************/
void Paint_DrawPoint(uint16_t Xpoint, uint16_t Ypoint, uint16_t Color,
                     DOT_PIXEL Dot_Pixel, DOT_STYLE Dot_Style)
{
 80010a0:	b590      	push	{r4, r7, lr}
 80010a2:	b085      	sub	sp, #20
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	4604      	mov	r4, r0
 80010a8:	4608      	mov	r0, r1
 80010aa:	4611      	mov	r1, r2
 80010ac:	461a      	mov	r2, r3
 80010ae:	4623      	mov	r3, r4
 80010b0:	80fb      	strh	r3, [r7, #6]
 80010b2:	4603      	mov	r3, r0
 80010b4:	80bb      	strh	r3, [r7, #4]
 80010b6:	460b      	mov	r3, r1
 80010b8:	807b      	strh	r3, [r7, #2]
 80010ba:	4613      	mov	r3, r2
 80010bc:	707b      	strb	r3, [r7, #1]
    if (Xpoint > Paint.Width || Ypoint > Paint.Height) {
 80010be:	4b42      	ldr	r3, [pc, #264]	; (80011c8 <Paint_DrawPoint+0x128>)
 80010c0:	889b      	ldrh	r3, [r3, #4]
 80010c2:	88fa      	ldrh	r2, [r7, #6]
 80010c4:	429a      	cmp	r2, r3
 80010c6:	d87a      	bhi.n	80011be <Paint_DrawPoint+0x11e>
 80010c8:	4b3f      	ldr	r3, [pc, #252]	; (80011c8 <Paint_DrawPoint+0x128>)
 80010ca:	88db      	ldrh	r3, [r3, #6]
 80010cc:	88ba      	ldrh	r2, [r7, #4]
 80010ce:	429a      	cmp	r2, r3
 80010d0:	d875      	bhi.n	80011be <Paint_DrawPoint+0x11e>
				//printf("Ypoint = %d , Paint.Height = %d  \r\n ",Ypoint,Paint.Height);
        return;
    }

    int16_t XDir_Num , YDir_Num;
    if (Dot_Style == DOT_FILL_AROUND) {
 80010d2:	f897 3020 	ldrb.w	r3, [r7, #32]
 80010d6:	2b01      	cmp	r3, #1
 80010d8:	d144      	bne.n	8001164 <Paint_DrawPoint+0xc4>
        for (XDir_Num = 0; XDir_Num < 2 * Dot_Pixel - 1; XDir_Num++) {
 80010da:	2300      	movs	r3, #0
 80010dc:	81fb      	strh	r3, [r7, #14]
 80010de:	e039      	b.n	8001154 <Paint_DrawPoint+0xb4>
            for (YDir_Num = 0; YDir_Num < 2 * Dot_Pixel - 1; YDir_Num++) {
 80010e0:	2300      	movs	r3, #0
 80010e2:	81bb      	strh	r3, [r7, #12]
 80010e4:	e029      	b.n	800113a <Paint_DrawPoint+0x9a>
                if(Xpoint + XDir_Num - Dot_Pixel < 0 || Ypoint + YDir_Num - Dot_Pixel < 0)
 80010e6:	88fa      	ldrh	r2, [r7, #6]
 80010e8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80010ec:	441a      	add	r2, r3
 80010ee:	787b      	ldrb	r3, [r7, #1]
 80010f0:	1ad3      	subs	r3, r2, r3
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	db28      	blt.n	8001148 <Paint_DrawPoint+0xa8>
 80010f6:	88ba      	ldrh	r2, [r7, #4]
 80010f8:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80010fc:	441a      	add	r2, r3
 80010fe:	787b      	ldrb	r3, [r7, #1]
 8001100:	1ad3      	subs	r3, r2, r3
 8001102:	2b00      	cmp	r3, #0
 8001104:	db20      	blt.n	8001148 <Paint_DrawPoint+0xa8>
                    break;
                // printf("x = %d, y = %d\r\n", Xpoint + XDir_Num - Dot_Pixel, Ypoint + YDir_Num - Dot_Pixel);
                Paint_SetPixel(Xpoint + XDir_Num - Dot_Pixel, Ypoint + YDir_Num - Dot_Pixel, Color);
 8001106:	89fa      	ldrh	r2, [r7, #14]
 8001108:	88fb      	ldrh	r3, [r7, #6]
 800110a:	4413      	add	r3, r2
 800110c:	b29a      	uxth	r2, r3
 800110e:	787b      	ldrb	r3, [r7, #1]
 8001110:	b29b      	uxth	r3, r3
 8001112:	1ad3      	subs	r3, r2, r3
 8001114:	b298      	uxth	r0, r3
 8001116:	89ba      	ldrh	r2, [r7, #12]
 8001118:	88bb      	ldrh	r3, [r7, #4]
 800111a:	4413      	add	r3, r2
 800111c:	b29a      	uxth	r2, r3
 800111e:	787b      	ldrb	r3, [r7, #1]
 8001120:	b29b      	uxth	r3, r3
 8001122:	1ad3      	subs	r3, r2, r3
 8001124:	b29b      	uxth	r3, r3
 8001126:	887a      	ldrh	r2, [r7, #2]
 8001128:	4619      	mov	r1, r3
 800112a:	f7ff fe01 	bl	8000d30 <Paint_SetPixel>
            for (YDir_Num = 0; YDir_Num < 2 * Dot_Pixel - 1; YDir_Num++) {
 800112e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001132:	b29b      	uxth	r3, r3
 8001134:	3301      	adds	r3, #1
 8001136:	b29b      	uxth	r3, r3
 8001138:	81bb      	strh	r3, [r7, #12]
 800113a:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800113e:	787b      	ldrb	r3, [r7, #1]
 8001140:	005b      	lsls	r3, r3, #1
 8001142:	3b01      	subs	r3, #1
 8001144:	429a      	cmp	r2, r3
 8001146:	dbce      	blt.n	80010e6 <Paint_DrawPoint+0x46>
        for (XDir_Num = 0; XDir_Num < 2 * Dot_Pixel - 1; XDir_Num++) {
 8001148:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800114c:	b29b      	uxth	r3, r3
 800114e:	3301      	adds	r3, #1
 8001150:	b29b      	uxth	r3, r3
 8001152:	81fb      	strh	r3, [r7, #14]
 8001154:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001158:	787b      	ldrb	r3, [r7, #1]
 800115a:	005b      	lsls	r3, r3, #1
 800115c:	3b01      	subs	r3, #1
 800115e:	429a      	cmp	r2, r3
 8001160:	dbbe      	blt.n	80010e0 <Paint_DrawPoint+0x40>
 8001162:	e02d      	b.n	80011c0 <Paint_DrawPoint+0x120>
            }
        }
    } else {
        for (XDir_Num = 0; XDir_Num <  Dot_Pixel; XDir_Num++) {
 8001164:	2300      	movs	r3, #0
 8001166:	81fb      	strh	r3, [r7, #14]
 8001168:	e023      	b.n	80011b2 <Paint_DrawPoint+0x112>
            for (YDir_Num = 0; YDir_Num <  Dot_Pixel; YDir_Num++) {
 800116a:	2300      	movs	r3, #0
 800116c:	81bb      	strh	r3, [r7, #12]
 800116e:	e015      	b.n	800119c <Paint_DrawPoint+0xfc>
                Paint_SetPixel(Xpoint + XDir_Num - 1, Ypoint + YDir_Num - 1, Color);
 8001170:	89fa      	ldrh	r2, [r7, #14]
 8001172:	88fb      	ldrh	r3, [r7, #6]
 8001174:	4413      	add	r3, r2
 8001176:	b29b      	uxth	r3, r3
 8001178:	3b01      	subs	r3, #1
 800117a:	b298      	uxth	r0, r3
 800117c:	89ba      	ldrh	r2, [r7, #12]
 800117e:	88bb      	ldrh	r3, [r7, #4]
 8001180:	4413      	add	r3, r2
 8001182:	b29b      	uxth	r3, r3
 8001184:	3b01      	subs	r3, #1
 8001186:	b29b      	uxth	r3, r3
 8001188:	887a      	ldrh	r2, [r7, #2]
 800118a:	4619      	mov	r1, r3
 800118c:	f7ff fdd0 	bl	8000d30 <Paint_SetPixel>
            for (YDir_Num = 0; YDir_Num <  Dot_Pixel; YDir_Num++) {
 8001190:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001194:	b29b      	uxth	r3, r3
 8001196:	3301      	adds	r3, #1
 8001198:	b29b      	uxth	r3, r3
 800119a:	81bb      	strh	r3, [r7, #12]
 800119c:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80011a0:	787b      	ldrb	r3, [r7, #1]
 80011a2:	429a      	cmp	r2, r3
 80011a4:	dbe4      	blt.n	8001170 <Paint_DrawPoint+0xd0>
        for (XDir_Num = 0; XDir_Num <  Dot_Pixel; XDir_Num++) {
 80011a6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80011aa:	b29b      	uxth	r3, r3
 80011ac:	3301      	adds	r3, #1
 80011ae:	b29b      	uxth	r3, r3
 80011b0:	81fb      	strh	r3, [r7, #14]
 80011b2:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80011b6:	787b      	ldrb	r3, [r7, #1]
 80011b8:	429a      	cmp	r2, r3
 80011ba:	dbd6      	blt.n	800116a <Paint_DrawPoint+0xca>
 80011bc:	e000      	b.n	80011c0 <Paint_DrawPoint+0x120>
        return;
 80011be:	bf00      	nop
            }
        }
    }
}
 80011c0:	3714      	adds	r7, #20
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd90      	pop	{r4, r7, pc}
 80011c6:	bf00      	nop
 80011c8:	2000009c 	.word	0x2000009c

080011cc <Paint_DrawLine>:
    Line_width : Line width
    Line_Style: Solid and dotted lines
******************************************************************************/
void Paint_DrawLine(uint16_t Xstart, uint16_t Ystart, uint16_t Xend, uint16_t Yend,
                    uint16_t Color, DOT_PIXEL Line_width, LINE_STYLE Line_Style)
{
 80011cc:	b590      	push	{r4, r7, lr}
 80011ce:	b08d      	sub	sp, #52	; 0x34
 80011d0:	af02      	add	r7, sp, #8
 80011d2:	4604      	mov	r4, r0
 80011d4:	4608      	mov	r0, r1
 80011d6:	4611      	mov	r1, r2
 80011d8:	461a      	mov	r2, r3
 80011da:	4623      	mov	r3, r4
 80011dc:	80fb      	strh	r3, [r7, #6]
 80011de:	4603      	mov	r3, r0
 80011e0:	80bb      	strh	r3, [r7, #4]
 80011e2:	460b      	mov	r3, r1
 80011e4:	807b      	strh	r3, [r7, #2]
 80011e6:	4613      	mov	r3, r2
 80011e8:	803b      	strh	r3, [r7, #0]
    if (Xstart > Paint.Width || Ystart > Paint.Height ||
 80011ea:	4b4b      	ldr	r3, [pc, #300]	; (8001318 <Paint_DrawLine+0x14c>)
 80011ec:	889b      	ldrh	r3, [r3, #4]
 80011ee:	88fa      	ldrh	r2, [r7, #6]
 80011f0:	429a      	cmp	r2, r3
 80011f2:	f200 8088 	bhi.w	8001306 <Paint_DrawLine+0x13a>
 80011f6:	4b48      	ldr	r3, [pc, #288]	; (8001318 <Paint_DrawLine+0x14c>)
 80011f8:	88db      	ldrh	r3, [r3, #6]
 80011fa:	88ba      	ldrh	r2, [r7, #4]
 80011fc:	429a      	cmp	r2, r3
 80011fe:	f200 8082 	bhi.w	8001306 <Paint_DrawLine+0x13a>
        Xend > Paint.Width || Yend > Paint.Height) {
 8001202:	4b45      	ldr	r3, [pc, #276]	; (8001318 <Paint_DrawLine+0x14c>)
 8001204:	889b      	ldrh	r3, [r3, #4]
    if (Xstart > Paint.Width || Ystart > Paint.Height ||
 8001206:	887a      	ldrh	r2, [r7, #2]
 8001208:	429a      	cmp	r2, r3
 800120a:	d87c      	bhi.n	8001306 <Paint_DrawLine+0x13a>
        Xend > Paint.Width || Yend > Paint.Height) {
 800120c:	4b42      	ldr	r3, [pc, #264]	; (8001318 <Paint_DrawLine+0x14c>)
 800120e:	88db      	ldrh	r3, [r3, #6]
 8001210:	883a      	ldrh	r2, [r7, #0]
 8001212:	429a      	cmp	r2, r3
 8001214:	d877      	bhi.n	8001306 <Paint_DrawLine+0x13a>
        //Debug("Paint_DrawLine Input exceeds the normal display range\r\n");
        return;
    }

    uint16_t Xpoint = Xstart;
 8001216:	88fb      	ldrh	r3, [r7, #6]
 8001218:	84fb      	strh	r3, [r7, #38]	; 0x26
    uint16_t Ypoint = Ystart;
 800121a:	88bb      	ldrh	r3, [r7, #4]
 800121c:	84bb      	strh	r3, [r7, #36]	; 0x24
    int dx = (int)Xend - (int)Xstart >= 0 ? Xend - Xstart : Xstart - Xend;
 800121e:	887a      	ldrh	r2, [r7, #2]
 8001220:	88fb      	ldrh	r3, [r7, #6]
 8001222:	1ad3      	subs	r3, r2, r3
 8001224:	2b00      	cmp	r3, #0
 8001226:	bfb8      	it	lt
 8001228:	425b      	neglt	r3, r3
 800122a:	61bb      	str	r3, [r7, #24]
    int dy = (int)Yend - (int)Ystart <= 0 ? Yend - Ystart : Ystart - Yend;
 800122c:	883a      	ldrh	r2, [r7, #0]
 800122e:	88bb      	ldrh	r3, [r7, #4]
 8001230:	1ad3      	subs	r3, r2, r3
 8001232:	2b00      	cmp	r3, #0
 8001234:	bfb8      	it	lt
 8001236:	425b      	neglt	r3, r3
 8001238:	425b      	negs	r3, r3
 800123a:	617b      	str	r3, [r7, #20]

    // Increment direction, 1 is positive, -1 is counter;
    int XAddway = Xstart < Xend ? 1 : -1;
 800123c:	88fa      	ldrh	r2, [r7, #6]
 800123e:	887b      	ldrh	r3, [r7, #2]
 8001240:	429a      	cmp	r2, r3
 8001242:	d201      	bcs.n	8001248 <Paint_DrawLine+0x7c>
 8001244:	2301      	movs	r3, #1
 8001246:	e001      	b.n	800124c <Paint_DrawLine+0x80>
 8001248:	f04f 33ff 	mov.w	r3, #4294967295
 800124c:	613b      	str	r3, [r7, #16]
    int YAddway = Ystart < Yend ? 1 : -1;
 800124e:	88ba      	ldrh	r2, [r7, #4]
 8001250:	883b      	ldrh	r3, [r7, #0]
 8001252:	429a      	cmp	r2, r3
 8001254:	d201      	bcs.n	800125a <Paint_DrawLine+0x8e>
 8001256:	2301      	movs	r3, #1
 8001258:	e001      	b.n	800125e <Paint_DrawLine+0x92>
 800125a:	f04f 33ff 	mov.w	r3, #4294967295
 800125e:	60fb      	str	r3, [r7, #12]

    //Cumulative error
    int Esp = dx + dy;
 8001260:	69ba      	ldr	r2, [r7, #24]
 8001262:	697b      	ldr	r3, [r7, #20]
 8001264:	4413      	add	r3, r2
 8001266:	623b      	str	r3, [r7, #32]
    char Dotted_Len = 0;
 8001268:	2300      	movs	r3, #0
 800126a:	77fb      	strb	r3, [r7, #31]

    for (;;) {
        Dotted_Len++;
 800126c:	7ffb      	ldrb	r3, [r7, #31]
 800126e:	3301      	adds	r3, #1
 8001270:	77fb      	strb	r3, [r7, #31]
        //Painted dotted line, 2 point is really virtual
        if (Line_Style == LINE_STYLE_DOTTED && Dotted_Len % 3 == 0) {
 8001272:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8001276:	2b01      	cmp	r3, #1
 8001278:	d117      	bne.n	80012aa <Paint_DrawLine+0xde>
 800127a:	7ffa      	ldrb	r2, [r7, #31]
 800127c:	4b27      	ldr	r3, [pc, #156]	; (800131c <Paint_DrawLine+0x150>)
 800127e:	fba3 1302 	umull	r1, r3, r3, r2
 8001282:	0859      	lsrs	r1, r3, #1
 8001284:	460b      	mov	r3, r1
 8001286:	005b      	lsls	r3, r3, #1
 8001288:	440b      	add	r3, r1
 800128a:	1ad3      	subs	r3, r2, r3
 800128c:	b2db      	uxtb	r3, r3
 800128e:	2b00      	cmp	r3, #0
 8001290:	d10b      	bne.n	80012aa <Paint_DrawLine+0xde>
            //Debug("LINE_DOTTED\r\n");
            Paint_DrawPoint(Xpoint, Ypoint, IMAGE_BACKGROUND, Line_width, DOT_STYLE_DFT);
 8001292:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8001296:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 8001298:	8cf8      	ldrh	r0, [r7, #38]	; 0x26
 800129a:	2201      	movs	r2, #1
 800129c:	9200      	str	r2, [sp, #0]
 800129e:	22ff      	movs	r2, #255	; 0xff
 80012a0:	f7ff fefe 	bl	80010a0 <Paint_DrawPoint>
            Dotted_Len = 0;
 80012a4:	2300      	movs	r3, #0
 80012a6:	77fb      	strb	r3, [r7, #31]
 80012a8:	e008      	b.n	80012bc <Paint_DrawLine+0xf0>
        } else {
            Paint_DrawPoint(Xpoint, Ypoint, Color, Line_width, DOT_STYLE_DFT);
 80012aa:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80012ae:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 80012b0:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 80012b2:	8cf8      	ldrh	r0, [r7, #38]	; 0x26
 80012b4:	2401      	movs	r4, #1
 80012b6:	9400      	str	r4, [sp, #0]
 80012b8:	f7ff fef2 	bl	80010a0 <Paint_DrawPoint>
        }
        if (2 * Esp >= dy) {
 80012bc:	6a3b      	ldr	r3, [r7, #32]
 80012be:	005b      	lsls	r3, r3, #1
 80012c0:	697a      	ldr	r2, [r7, #20]
 80012c2:	429a      	cmp	r2, r3
 80012c4:	dc0c      	bgt.n	80012e0 <Paint_DrawLine+0x114>
            if (Xpoint == Xend)
 80012c6:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80012c8:	887b      	ldrh	r3, [r7, #2]
 80012ca:	429a      	cmp	r2, r3
 80012cc:	d01d      	beq.n	800130a <Paint_DrawLine+0x13e>
                break;
            Esp += dy;
 80012ce:	6a3a      	ldr	r2, [r7, #32]
 80012d0:	697b      	ldr	r3, [r7, #20]
 80012d2:	4413      	add	r3, r2
 80012d4:	623b      	str	r3, [r7, #32]
            Xpoint += XAddway;
 80012d6:	693b      	ldr	r3, [r7, #16]
 80012d8:	b29a      	uxth	r2, r3
 80012da:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80012dc:	4413      	add	r3, r2
 80012de:	84fb      	strh	r3, [r7, #38]	; 0x26
        }
        if (2 * Esp <= dx) {
 80012e0:	6a3b      	ldr	r3, [r7, #32]
 80012e2:	005b      	lsls	r3, r3, #1
 80012e4:	69ba      	ldr	r2, [r7, #24]
 80012e6:	429a      	cmp	r2, r3
 80012e8:	dbc0      	blt.n	800126c <Paint_DrawLine+0xa0>
            if (Ypoint == Yend)
 80012ea:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80012ec:	883b      	ldrh	r3, [r7, #0]
 80012ee:	429a      	cmp	r2, r3
 80012f0:	d00d      	beq.n	800130e <Paint_DrawLine+0x142>
                break;
            Esp += dx;
 80012f2:	6a3a      	ldr	r2, [r7, #32]
 80012f4:	69bb      	ldr	r3, [r7, #24]
 80012f6:	4413      	add	r3, r2
 80012f8:	623b      	str	r3, [r7, #32]
            Ypoint += YAddway;
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	b29a      	uxth	r2, r3
 80012fe:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001300:	4413      	add	r3, r2
 8001302:	84bb      	strh	r3, [r7, #36]	; 0x24
        Dotted_Len++;
 8001304:	e7b2      	b.n	800126c <Paint_DrawLine+0xa0>
        return;
 8001306:	bf00      	nop
 8001308:	e002      	b.n	8001310 <Paint_DrawLine+0x144>
                break;
 800130a:	bf00      	nop
 800130c:	e000      	b.n	8001310 <Paint_DrawLine+0x144>
                break;
 800130e:	bf00      	nop
        }
    }
}
 8001310:	372c      	adds	r7, #44	; 0x2c
 8001312:	46bd      	mov	sp, r7
 8001314:	bd90      	pop	{r4, r7, pc}
 8001316:	bf00      	nop
 8001318:	2000009c 	.word	0x2000009c
 800131c:	aaaaaaab 	.word	0xaaaaaaab

08001320 <Paint_DrawChar>:
    Color_Foreground : Select the foreground color
    Color_Background : Select the background color
******************************************************************************/
void Paint_DrawChar(uint16_t Xpoint, uint16_t Ypoint, const char Acsii_Char,
                    sFONT* Font, uint16_t Color_Foreground, uint16_t Color_Background)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b088      	sub	sp, #32
 8001324:	af00      	add	r7, sp, #0
 8001326:	607b      	str	r3, [r7, #4]
 8001328:	4603      	mov	r3, r0
 800132a:	81fb      	strh	r3, [r7, #14]
 800132c:	460b      	mov	r3, r1
 800132e:	81bb      	strh	r3, [r7, #12]
 8001330:	4613      	mov	r3, r2
 8001332:	72fb      	strb	r3, [r7, #11]
    uint16_t Page, Column;

    if (Xpoint > Paint.Width || Ypoint > Paint.Height) {
 8001334:	4b4c      	ldr	r3, [pc, #304]	; (8001468 <Paint_DrawChar+0x148>)
 8001336:	889b      	ldrh	r3, [r3, #4]
 8001338:	89fa      	ldrh	r2, [r7, #14]
 800133a:	429a      	cmp	r2, r3
 800133c:	f200 808f 	bhi.w	800145e <Paint_DrawChar+0x13e>
 8001340:	4b49      	ldr	r3, [pc, #292]	; (8001468 <Paint_DrawChar+0x148>)
 8001342:	88db      	ldrh	r3, [r3, #6]
 8001344:	89ba      	ldrh	r2, [r7, #12]
 8001346:	429a      	cmp	r2, r3
 8001348:	f200 8089 	bhi.w	800145e <Paint_DrawChar+0x13e>
        //Debug("Paint_DrawChar Input exceeds the normal display range\r\n");
        return;
    }

    uint32_t Char_Offset = (Acsii_Char - ' ') * Font->Height * (Font->Width / 8 + (Font->Width % 8 ? 1 : 0));
 800134c:	7afb      	ldrb	r3, [r7, #11]
 800134e:	3b20      	subs	r3, #32
 8001350:	687a      	ldr	r2, [r7, #4]
 8001352:	88d2      	ldrh	r2, [r2, #6]
 8001354:	fb02 f303 	mul.w	r3, r2, r3
 8001358:	687a      	ldr	r2, [r7, #4]
 800135a:	8892      	ldrh	r2, [r2, #4]
 800135c:	08d2      	lsrs	r2, r2, #3
 800135e:	b292      	uxth	r2, r2
 8001360:	4611      	mov	r1, r2
 8001362:	687a      	ldr	r2, [r7, #4]
 8001364:	8892      	ldrh	r2, [r2, #4]
 8001366:	f002 0207 	and.w	r2, r2, #7
 800136a:	b292      	uxth	r2, r2
 800136c:	2a00      	cmp	r2, #0
 800136e:	bf14      	ite	ne
 8001370:	2201      	movne	r2, #1
 8001372:	2200      	moveq	r2, #0
 8001374:	b2d2      	uxtb	r2, r2
 8001376:	440a      	add	r2, r1
 8001378:	fb02 f303 	mul.w	r3, r2, r3
 800137c:	617b      	str	r3, [r7, #20]
    const unsigned char *ptr = &Font->table[Char_Offset];
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681a      	ldr	r2, [r3, #0]
 8001382:	697b      	ldr	r3, [r7, #20]
 8001384:	4413      	add	r3, r2
 8001386:	61bb      	str	r3, [r7, #24]

    for (Page = 0; Page < Font->Height; Page ++ ) {
 8001388:	2300      	movs	r3, #0
 800138a:	83fb      	strh	r3, [r7, #30]
 800138c:	e061      	b.n	8001452 <Paint_DrawChar+0x132>
        for (Column = 0; Column < Font->Width; Column ++ ) {
 800138e:	2300      	movs	r3, #0
 8001390:	83bb      	strh	r3, [r7, #28]
 8001392:	e04c      	b.n	800142e <Paint_DrawChar+0x10e>

            //To determine whether the font background color and screen background color is consistent
            if (FONT_BACKGROUND == Color_Background) { //this process is to speed up the scan
 8001394:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001396:	2bff      	cmp	r3, #255	; 0xff
 8001398:	d118      	bne.n	80013cc <Paint_DrawChar+0xac>
                if (*ptr & (0x80 >> (Column % 8)))
 800139a:	69bb      	ldr	r3, [r7, #24]
 800139c:	781b      	ldrb	r3, [r3, #0]
 800139e:	4619      	mov	r1, r3
 80013a0:	8bbb      	ldrh	r3, [r7, #28]
 80013a2:	f003 0307 	and.w	r3, r3, #7
 80013a6:	2280      	movs	r2, #128	; 0x80
 80013a8:	fa42 f303 	asr.w	r3, r2, r3
 80013ac:	400b      	ands	r3, r1
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d031      	beq.n	8001416 <Paint_DrawChar+0xf6>
                    Paint_SetPixel(Xpoint + Column, Ypoint + Page, Color_Foreground);
 80013b2:	89fa      	ldrh	r2, [r7, #14]
 80013b4:	8bbb      	ldrh	r3, [r7, #28]
 80013b6:	4413      	add	r3, r2
 80013b8:	b298      	uxth	r0, r3
 80013ba:	89ba      	ldrh	r2, [r7, #12]
 80013bc:	8bfb      	ldrh	r3, [r7, #30]
 80013be:	4413      	add	r3, r2
 80013c0:	b29b      	uxth	r3, r3
 80013c2:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80013c4:	4619      	mov	r1, r3
 80013c6:	f7ff fcb3 	bl	8000d30 <Paint_SetPixel>
 80013ca:	e024      	b.n	8001416 <Paint_DrawChar+0xf6>
                    // Paint_DrawPoint(Xpoint + Column, Ypoint + Page, Color_Foreground, DOT_PIXEL_DFT, DOT_STYLE_DFT);
            } else {
                if (*ptr & (0x80 >> (Column % 8))) {
 80013cc:	69bb      	ldr	r3, [r7, #24]
 80013ce:	781b      	ldrb	r3, [r3, #0]
 80013d0:	4619      	mov	r1, r3
 80013d2:	8bbb      	ldrh	r3, [r7, #28]
 80013d4:	f003 0307 	and.w	r3, r3, #7
 80013d8:	2280      	movs	r2, #128	; 0x80
 80013da:	fa42 f303 	asr.w	r3, r2, r3
 80013de:	400b      	ands	r3, r1
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d00c      	beq.n	80013fe <Paint_DrawChar+0xde>
                    Paint_SetPixel(Xpoint + Column, Ypoint + Page, Color_Foreground);
 80013e4:	89fa      	ldrh	r2, [r7, #14]
 80013e6:	8bbb      	ldrh	r3, [r7, #28]
 80013e8:	4413      	add	r3, r2
 80013ea:	b298      	uxth	r0, r3
 80013ec:	89ba      	ldrh	r2, [r7, #12]
 80013ee:	8bfb      	ldrh	r3, [r7, #30]
 80013f0:	4413      	add	r3, r2
 80013f2:	b29b      	uxth	r3, r3
 80013f4:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80013f6:	4619      	mov	r1, r3
 80013f8:	f7ff fc9a 	bl	8000d30 <Paint_SetPixel>
 80013fc:	e00b      	b.n	8001416 <Paint_DrawChar+0xf6>
                    // Paint_DrawPoint(Xpoint + Column, Ypoint + Page, Color_Foreground, DOT_PIXEL_DFT, DOT_STYLE_DFT);
                } else {
                    Paint_SetPixel(Xpoint + Column, Ypoint + Page, Color_Background);
 80013fe:	89fa      	ldrh	r2, [r7, #14]
 8001400:	8bbb      	ldrh	r3, [r7, #28]
 8001402:	4413      	add	r3, r2
 8001404:	b298      	uxth	r0, r3
 8001406:	89ba      	ldrh	r2, [r7, #12]
 8001408:	8bfb      	ldrh	r3, [r7, #30]
 800140a:	4413      	add	r3, r2
 800140c:	b29b      	uxth	r3, r3
 800140e:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8001410:	4619      	mov	r1, r3
 8001412:	f7ff fc8d 	bl	8000d30 <Paint_SetPixel>
                    // Paint_DrawPoint(Xpoint + Column, Ypoint + Page, Color_Background, DOT_PIXEL_DFT, DOT_STYLE_DFT);
                }
            }
            //One pixel is 8 bits
            if (Column % 8 == 7)
 8001416:	8bbb      	ldrh	r3, [r7, #28]
 8001418:	f003 0307 	and.w	r3, r3, #7
 800141c:	b29b      	uxth	r3, r3
 800141e:	2b07      	cmp	r3, #7
 8001420:	d102      	bne.n	8001428 <Paint_DrawChar+0x108>
                ptr++;
 8001422:	69bb      	ldr	r3, [r7, #24]
 8001424:	3301      	adds	r3, #1
 8001426:	61bb      	str	r3, [r7, #24]
        for (Column = 0; Column < Font->Width; Column ++ ) {
 8001428:	8bbb      	ldrh	r3, [r7, #28]
 800142a:	3301      	adds	r3, #1
 800142c:	83bb      	strh	r3, [r7, #28]
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	889b      	ldrh	r3, [r3, #4]
 8001432:	8bba      	ldrh	r2, [r7, #28]
 8001434:	429a      	cmp	r2, r3
 8001436:	d3ad      	bcc.n	8001394 <Paint_DrawChar+0x74>
        }// Write a line
        if (Font->Width % 8 != 0)
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	889b      	ldrh	r3, [r3, #4]
 800143c:	f003 0307 	and.w	r3, r3, #7
 8001440:	b29b      	uxth	r3, r3
 8001442:	2b00      	cmp	r3, #0
 8001444:	d002      	beq.n	800144c <Paint_DrawChar+0x12c>
            ptr++;
 8001446:	69bb      	ldr	r3, [r7, #24]
 8001448:	3301      	adds	r3, #1
 800144a:	61bb      	str	r3, [r7, #24]
    for (Page = 0; Page < Font->Height; Page ++ ) {
 800144c:	8bfb      	ldrh	r3, [r7, #30]
 800144e:	3301      	adds	r3, #1
 8001450:	83fb      	strh	r3, [r7, #30]
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	88db      	ldrh	r3, [r3, #6]
 8001456:	8bfa      	ldrh	r2, [r7, #30]
 8001458:	429a      	cmp	r2, r3
 800145a:	d398      	bcc.n	800138e <Paint_DrawChar+0x6e>
 800145c:	e000      	b.n	8001460 <Paint_DrawChar+0x140>
        return;
 800145e:	bf00      	nop
    }// Write all
}
 8001460:	3720      	adds	r7, #32
 8001462:	46bd      	mov	sp, r7
 8001464:	bd80      	pop	{r7, pc}
 8001466:	bf00      	nop
 8001468:	2000009c 	.word	0x2000009c

0800146c <Paint_DrawString_EN>:
    Color_Foreground : Select the foreground color
    Color_Background : Select the background color
******************************************************************************/
void Paint_DrawString_EN(uint16_t Xstart, uint16_t Ystart, const char * pString,
                         sFONT* Font, uint16_t Color_Foreground, uint16_t Color_Background)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b088      	sub	sp, #32
 8001470:	af02      	add	r7, sp, #8
 8001472:	60ba      	str	r2, [r7, #8]
 8001474:	607b      	str	r3, [r7, #4]
 8001476:	4603      	mov	r3, r0
 8001478:	81fb      	strh	r3, [r7, #14]
 800147a:	460b      	mov	r3, r1
 800147c:	81bb      	strh	r3, [r7, #12]
    uint16_t Xpoint = Xstart;
 800147e:	89fb      	ldrh	r3, [r7, #14]
 8001480:	82fb      	strh	r3, [r7, #22]
    uint16_t Ypoint = Ystart;
 8001482:	89bb      	ldrh	r3, [r7, #12]
 8001484:	82bb      	strh	r3, [r7, #20]

    if (Xstart > Paint.Width || Ystart > Paint.Height) {
 8001486:	4b21      	ldr	r3, [pc, #132]	; (800150c <Paint_DrawString_EN+0xa0>)
 8001488:	889b      	ldrh	r3, [r3, #4]
 800148a:	89fa      	ldrh	r2, [r7, #14]
 800148c:	429a      	cmp	r2, r3
 800148e:	d838      	bhi.n	8001502 <Paint_DrawString_EN+0x96>
 8001490:	4b1e      	ldr	r3, [pc, #120]	; (800150c <Paint_DrawString_EN+0xa0>)
 8001492:	88db      	ldrh	r3, [r3, #6]
 8001494:	89ba      	ldrh	r2, [r7, #12]
 8001496:	429a      	cmp	r2, r3
 8001498:	d833      	bhi.n	8001502 <Paint_DrawString_EN+0x96>
        //Debug("Paint_DrawString_EN Input exceeds the normal display range\r\n");
        return;
    }

    while (* pString != '\0') {
 800149a:	e02d      	b.n	80014f8 <Paint_DrawString_EN+0x8c>
        //if X direction filled , reposition to(Xstart,Ypoint),Ypoint is Y direction plus the Height of the character
        if ((Xpoint + Font->Width ) > Paint.Width ) {
 800149c:	8afb      	ldrh	r3, [r7, #22]
 800149e:	687a      	ldr	r2, [r7, #4]
 80014a0:	8892      	ldrh	r2, [r2, #4]
 80014a2:	4413      	add	r3, r2
 80014a4:	4a19      	ldr	r2, [pc, #100]	; (800150c <Paint_DrawString_EN+0xa0>)
 80014a6:	8892      	ldrh	r2, [r2, #4]
 80014a8:	4293      	cmp	r3, r2
 80014aa:	dd06      	ble.n	80014ba <Paint_DrawString_EN+0x4e>
            Xpoint = Xstart;
 80014ac:	89fb      	ldrh	r3, [r7, #14]
 80014ae:	82fb      	strh	r3, [r7, #22]
            Ypoint += Font->Height;
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	88da      	ldrh	r2, [r3, #6]
 80014b4:	8abb      	ldrh	r3, [r7, #20]
 80014b6:	4413      	add	r3, r2
 80014b8:	82bb      	strh	r3, [r7, #20]
        }

        // If the Y direction is full, reposition to(Xstart, Ystart)
        if ((Ypoint  + Font->Height ) > Paint.Height ) {
 80014ba:	8abb      	ldrh	r3, [r7, #20]
 80014bc:	687a      	ldr	r2, [r7, #4]
 80014be:	88d2      	ldrh	r2, [r2, #6]
 80014c0:	4413      	add	r3, r2
 80014c2:	4a12      	ldr	r2, [pc, #72]	; (800150c <Paint_DrawString_EN+0xa0>)
 80014c4:	88d2      	ldrh	r2, [r2, #6]
 80014c6:	4293      	cmp	r3, r2
 80014c8:	dd03      	ble.n	80014d2 <Paint_DrawString_EN+0x66>
            Xpoint = Xstart;
 80014ca:	89fb      	ldrh	r3, [r7, #14]
 80014cc:	82fb      	strh	r3, [r7, #22]
            Ypoint = Ystart;
 80014ce:	89bb      	ldrh	r3, [r7, #12]
 80014d0:	82bb      	strh	r3, [r7, #20]
        }
        Paint_DrawChar(Xpoint, Ypoint, * pString, Font, Color_Background, Color_Foreground);
 80014d2:	68bb      	ldr	r3, [r7, #8]
 80014d4:	781a      	ldrb	r2, [r3, #0]
 80014d6:	8ab9      	ldrh	r1, [r7, #20]
 80014d8:	8af8      	ldrh	r0, [r7, #22]
 80014da:	8c3b      	ldrh	r3, [r7, #32]
 80014dc:	9301      	str	r3, [sp, #4]
 80014de:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80014e0:	9300      	str	r3, [sp, #0]
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	f7ff ff1c 	bl	8001320 <Paint_DrawChar>

        //The next character of the address
        pString ++;
 80014e8:	68bb      	ldr	r3, [r7, #8]
 80014ea:	3301      	adds	r3, #1
 80014ec:	60bb      	str	r3, [r7, #8]

        //The next word of the abscissa increases the font of the broadband
        Xpoint += Font->Width;
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	889a      	ldrh	r2, [r3, #4]
 80014f2:	8afb      	ldrh	r3, [r7, #22]
 80014f4:	4413      	add	r3, r2
 80014f6:	82fb      	strh	r3, [r7, #22]
    while (* pString != '\0') {
 80014f8:	68bb      	ldr	r3, [r7, #8]
 80014fa:	781b      	ldrb	r3, [r3, #0]
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d1cd      	bne.n	800149c <Paint_DrawString_EN+0x30>
 8001500:	e000      	b.n	8001504 <Paint_DrawString_EN+0x98>
        return;
 8001502:	bf00      	nop
    }
}
 8001504:	3718      	adds	r7, #24
 8001506:	46bd      	mov	sp, r7
 8001508:	bd80      	pop	{r7, pc}
 800150a:	bf00      	nop
 800150c:	2000009c 	.word	0x2000009c

08001510 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b08a      	sub	sp, #40	; 0x28
 8001514:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001516:	f107 0314 	add.w	r3, r7, #20
 800151a:	2200      	movs	r2, #0
 800151c:	601a      	str	r2, [r3, #0]
 800151e:	605a      	str	r2, [r3, #4]
 8001520:	609a      	str	r2, [r3, #8]
 8001522:	60da      	str	r2, [r3, #12]
 8001524:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001526:	2300      	movs	r3, #0
 8001528:	613b      	str	r3, [r7, #16]
 800152a:	4b37      	ldr	r3, [pc, #220]	; (8001608 <MX_GPIO_Init+0xf8>)
 800152c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800152e:	4a36      	ldr	r2, [pc, #216]	; (8001608 <MX_GPIO_Init+0xf8>)
 8001530:	f043 0304 	orr.w	r3, r3, #4
 8001534:	6313      	str	r3, [r2, #48]	; 0x30
 8001536:	4b34      	ldr	r3, [pc, #208]	; (8001608 <MX_GPIO_Init+0xf8>)
 8001538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800153a:	f003 0304 	and.w	r3, r3, #4
 800153e:	613b      	str	r3, [r7, #16]
 8001540:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001542:	2300      	movs	r3, #0
 8001544:	60fb      	str	r3, [r7, #12]
 8001546:	4b30      	ldr	r3, [pc, #192]	; (8001608 <MX_GPIO_Init+0xf8>)
 8001548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800154a:	4a2f      	ldr	r2, [pc, #188]	; (8001608 <MX_GPIO_Init+0xf8>)
 800154c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001550:	6313      	str	r3, [r2, #48]	; 0x30
 8001552:	4b2d      	ldr	r3, [pc, #180]	; (8001608 <MX_GPIO_Init+0xf8>)
 8001554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001556:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800155a:	60fb      	str	r3, [r7, #12]
 800155c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800155e:	2300      	movs	r3, #0
 8001560:	60bb      	str	r3, [r7, #8]
 8001562:	4b29      	ldr	r3, [pc, #164]	; (8001608 <MX_GPIO_Init+0xf8>)
 8001564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001566:	4a28      	ldr	r2, [pc, #160]	; (8001608 <MX_GPIO_Init+0xf8>)
 8001568:	f043 0301 	orr.w	r3, r3, #1
 800156c:	6313      	str	r3, [r2, #48]	; 0x30
 800156e:	4b26      	ldr	r3, [pc, #152]	; (8001608 <MX_GPIO_Init+0xf8>)
 8001570:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001572:	f003 0301 	and.w	r3, r3, #1
 8001576:	60bb      	str	r3, [r7, #8]
 8001578:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800157a:	2300      	movs	r3, #0
 800157c:	607b      	str	r3, [r7, #4]
 800157e:	4b22      	ldr	r3, [pc, #136]	; (8001608 <MX_GPIO_Init+0xf8>)
 8001580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001582:	4a21      	ldr	r2, [pc, #132]	; (8001608 <MX_GPIO_Init+0xf8>)
 8001584:	f043 0302 	orr.w	r3, r3, #2
 8001588:	6313      	str	r3, [r2, #48]	; 0x30
 800158a:	4b1f      	ldr	r3, [pc, #124]	; (8001608 <MX_GPIO_Init+0xf8>)
 800158c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800158e:	f003 0302 	and.w	r3, r3, #2
 8001592:	607b      	str	r3, [r7, #4]
 8001594:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8001596:	2201      	movs	r2, #1
 8001598:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800159c:	481b      	ldr	r0, [pc, #108]	; (800160c <MX_GPIO_Init+0xfc>)
 800159e:	f000 fe81 	bl	80022a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RST_Pin|DC_Pin|SPI_CS_Pin, GPIO_PIN_RESET);
 80015a2:	2200      	movs	r2, #0
 80015a4:	2116      	movs	r1, #22
 80015a6:	481a      	ldr	r0, [pc, #104]	; (8001610 <MX_GPIO_Init+0x100>)
 80015a8:	f000 fe7c 	bl	80022a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 80015ac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80015b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015b2:	2301      	movs	r3, #1
 80015b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b6:	2300      	movs	r3, #0
 80015b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015ba:	2300      	movs	r3, #0
 80015bc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80015be:	f107 0314 	add.w	r3, r7, #20
 80015c2:	4619      	mov	r1, r3
 80015c4:	4811      	ldr	r0, [pc, #68]	; (800160c <MX_GPIO_Init+0xfc>)
 80015c6:	f000 fcd1 	bl	8001f6c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RST_Pin|DC_Pin|SPI_CS_Pin;
 80015ca:	2316      	movs	r3, #22
 80015cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015ce:	2301      	movs	r3, #1
 80015d0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d2:	2300      	movs	r3, #0
 80015d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015d6:	2300      	movs	r3, #0
 80015d8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015da:	f107 0314 	add.w	r3, r7, #20
 80015de:	4619      	mov	r1, r3
 80015e0:	480b      	ldr	r0, [pc, #44]	; (8001610 <MX_GPIO_Init+0x100>)
 80015e2:	f000 fcc3 	bl	8001f6c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BUSY_Pin;
 80015e6:	2308      	movs	r3, #8
 80015e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015ea:	2300      	movs	r3, #0
 80015ec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ee:	2300      	movs	r3, #0
 80015f0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUSY_GPIO_Port, &GPIO_InitStruct);
 80015f2:	f107 0314 	add.w	r3, r7, #20
 80015f6:	4619      	mov	r1, r3
 80015f8:	4805      	ldr	r0, [pc, #20]	; (8001610 <MX_GPIO_Init+0x100>)
 80015fa:	f000 fcb7 	bl	8001f6c <HAL_GPIO_Init>

}
 80015fe:	bf00      	nop
 8001600:	3728      	adds	r7, #40	; 0x28
 8001602:	46bd      	mov	sp, r7
 8001604:	bd80      	pop	{r7, pc}
 8001606:	bf00      	nop
 8001608:	40023800 	.word	0x40023800
 800160c:	40020800 	.word	0x40020800
 8001610:	40020000 	.word	0x40020000

08001614 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001618:	4b12      	ldr	r3, [pc, #72]	; (8001664 <MX_I2C1_Init+0x50>)
 800161a:	4a13      	ldr	r2, [pc, #76]	; (8001668 <MX_I2C1_Init+0x54>)
 800161c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800161e:	4b11      	ldr	r3, [pc, #68]	; (8001664 <MX_I2C1_Init+0x50>)
 8001620:	4a12      	ldr	r2, [pc, #72]	; (800166c <MX_I2C1_Init+0x58>)
 8001622:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001624:	4b0f      	ldr	r3, [pc, #60]	; (8001664 <MX_I2C1_Init+0x50>)
 8001626:	2200      	movs	r2, #0
 8001628:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800162a:	4b0e      	ldr	r3, [pc, #56]	; (8001664 <MX_I2C1_Init+0x50>)
 800162c:	2200      	movs	r2, #0
 800162e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001630:	4b0c      	ldr	r3, [pc, #48]	; (8001664 <MX_I2C1_Init+0x50>)
 8001632:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001636:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001638:	4b0a      	ldr	r3, [pc, #40]	; (8001664 <MX_I2C1_Init+0x50>)
 800163a:	2200      	movs	r2, #0
 800163c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800163e:	4b09      	ldr	r3, [pc, #36]	; (8001664 <MX_I2C1_Init+0x50>)
 8001640:	2200      	movs	r2, #0
 8001642:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001644:	4b07      	ldr	r3, [pc, #28]	; (8001664 <MX_I2C1_Init+0x50>)
 8001646:	2200      	movs	r2, #0
 8001648:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800164a:	4b06      	ldr	r3, [pc, #24]	; (8001664 <MX_I2C1_Init+0x50>)
 800164c:	2200      	movs	r2, #0
 800164e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001650:	4804      	ldr	r0, [pc, #16]	; (8001664 <MX_I2C1_Init+0x50>)
 8001652:	f000 fe41 	bl	80022d8 <HAL_I2C_Init>
 8001656:	4603      	mov	r3, r0
 8001658:	2b00      	cmp	r3, #0
 800165a:	d001      	beq.n	8001660 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800165c:	f000 f8d4 	bl	8001808 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001660:	bf00      	nop
 8001662:	bd80      	pop	{r7, pc}
 8001664:	200000b4 	.word	0x200000b4
 8001668:	40005400 	.word	0x40005400
 800166c:	000186a0 	.word	0x000186a0

08001670 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b08a      	sub	sp, #40	; 0x28
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001678:	f107 0314 	add.w	r3, r7, #20
 800167c:	2200      	movs	r2, #0
 800167e:	601a      	str	r2, [r3, #0]
 8001680:	605a      	str	r2, [r3, #4]
 8001682:	609a      	str	r2, [r3, #8]
 8001684:	60da      	str	r2, [r3, #12]
 8001686:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	4a19      	ldr	r2, [pc, #100]	; (80016f4 <HAL_I2C_MspInit+0x84>)
 800168e:	4293      	cmp	r3, r2
 8001690:	d12b      	bne.n	80016ea <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001692:	2300      	movs	r3, #0
 8001694:	613b      	str	r3, [r7, #16]
 8001696:	4b18      	ldr	r3, [pc, #96]	; (80016f8 <HAL_I2C_MspInit+0x88>)
 8001698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800169a:	4a17      	ldr	r2, [pc, #92]	; (80016f8 <HAL_I2C_MspInit+0x88>)
 800169c:	f043 0302 	orr.w	r3, r3, #2
 80016a0:	6313      	str	r3, [r2, #48]	; 0x30
 80016a2:	4b15      	ldr	r3, [pc, #84]	; (80016f8 <HAL_I2C_MspInit+0x88>)
 80016a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016a6:	f003 0302 	and.w	r3, r3, #2
 80016aa:	613b      	str	r3, [r7, #16]
 80016ac:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80016ae:	23c0      	movs	r3, #192	; 0xc0
 80016b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80016b2:	2312      	movs	r3, #18
 80016b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016b6:	2300      	movs	r3, #0
 80016b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016ba:	2303      	movs	r3, #3
 80016bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80016be:	2304      	movs	r3, #4
 80016c0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016c2:	f107 0314 	add.w	r3, r7, #20
 80016c6:	4619      	mov	r1, r3
 80016c8:	480c      	ldr	r0, [pc, #48]	; (80016fc <HAL_I2C_MspInit+0x8c>)
 80016ca:	f000 fc4f 	bl	8001f6c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80016ce:	2300      	movs	r3, #0
 80016d0:	60fb      	str	r3, [r7, #12]
 80016d2:	4b09      	ldr	r3, [pc, #36]	; (80016f8 <HAL_I2C_MspInit+0x88>)
 80016d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016d6:	4a08      	ldr	r2, [pc, #32]	; (80016f8 <HAL_I2C_MspInit+0x88>)
 80016d8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80016dc:	6413      	str	r3, [r2, #64]	; 0x40
 80016de:	4b06      	ldr	r3, [pc, #24]	; (80016f8 <HAL_I2C_MspInit+0x88>)
 80016e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016e2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016e6:	60fb      	str	r3, [r7, #12]
 80016e8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80016ea:	bf00      	nop
 80016ec:	3728      	adds	r7, #40	; 0x28
 80016ee:	46bd      	mov	sp, r7
 80016f0:	bd80      	pop	{r7, pc}
 80016f2:	bf00      	nop
 80016f4:	40005400 	.word	0x40005400
 80016f8:	40023800 	.word	0x40023800
 80016fc:	40020400 	.word	0x40020400

08001700 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001704:	f000 fab6 	bl	8001c74 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001708:	f000 f812 	bl	8001730 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800170c:	f7ff ff00 	bl	8001510 <MX_GPIO_Init>
  MX_RTC_Init();
 8001710:	f000 f882 	bl	8001818 <MX_RTC_Init>
  MX_USART1_UART_Init();
 8001714:	f000 fa12 	bl	8001b3c <MX_USART1_UART_Init>
  MX_I2C1_Init();
 8001718:	f7ff ff7c 	bl	8001614 <MX_I2C1_Init>
  MX_SPI1_Init();
 800171c:	f000 f8ce 	bl	80018bc <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  //EPD_4in2_test();
  love();
 8001720:	f7ff f8e0 	bl	80008e4 <love>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  HAL_Delay(10000);
 8001724:	f242 7010 	movw	r0, #10000	; 0x2710
 8001728:	f000 fb16 	bl	8001d58 <HAL_Delay>
 800172c:	e7fa      	b.n	8001724 <main+0x24>
	...

08001730 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b094      	sub	sp, #80	; 0x50
 8001734:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001736:	f107 0320 	add.w	r3, r7, #32
 800173a:	2230      	movs	r2, #48	; 0x30
 800173c:	2100      	movs	r1, #0
 800173e:	4618      	mov	r0, r3
 8001740:	f002 fadc 	bl	8003cfc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001744:	f107 030c 	add.w	r3, r7, #12
 8001748:	2200      	movs	r2, #0
 800174a:	601a      	str	r2, [r3, #0]
 800174c:	605a      	str	r2, [r3, #4]
 800174e:	609a      	str	r2, [r3, #8]
 8001750:	60da      	str	r2, [r3, #12]
 8001752:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001754:	2300      	movs	r3, #0
 8001756:	60bb      	str	r3, [r7, #8]
 8001758:	4b29      	ldr	r3, [pc, #164]	; (8001800 <SystemClock_Config+0xd0>)
 800175a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800175c:	4a28      	ldr	r2, [pc, #160]	; (8001800 <SystemClock_Config+0xd0>)
 800175e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001762:	6413      	str	r3, [r2, #64]	; 0x40
 8001764:	4b26      	ldr	r3, [pc, #152]	; (8001800 <SystemClock_Config+0xd0>)
 8001766:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001768:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800176c:	60bb      	str	r3, [r7, #8]
 800176e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001770:	2300      	movs	r3, #0
 8001772:	607b      	str	r3, [r7, #4]
 8001774:	4b23      	ldr	r3, [pc, #140]	; (8001804 <SystemClock_Config+0xd4>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	4a22      	ldr	r2, [pc, #136]	; (8001804 <SystemClock_Config+0xd4>)
 800177a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800177e:	6013      	str	r3, [r2, #0]
 8001780:	4b20      	ldr	r3, [pc, #128]	; (8001804 <SystemClock_Config+0xd4>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001788:	607b      	str	r3, [r7, #4]
 800178a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 800178c:	2309      	movs	r3, #9
 800178e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001790:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001794:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001796:	2301      	movs	r3, #1
 8001798:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800179a:	2302      	movs	r3, #2
 800179c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800179e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80017a2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 80017a4:	2319      	movs	r3, #25
 80017a6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 144;
 80017a8:	2390      	movs	r3, #144	; 0x90
 80017aa:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80017ac:	2302      	movs	r3, #2
 80017ae:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 5;
 80017b0:	2305      	movs	r3, #5
 80017b2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80017b4:	f107 0320 	add.w	r3, r7, #32
 80017b8:	4618      	mov	r0, r3
 80017ba:	f000 fed1 	bl	8002560 <HAL_RCC_OscConfig>
 80017be:	4603      	mov	r3, r0
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d001      	beq.n	80017c8 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80017c4:	f000 f820 	bl	8001808 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80017c8:	230f      	movs	r3, #15
 80017ca:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80017cc:	2302      	movs	r3, #2
 80017ce:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80017d0:	2300      	movs	r3, #0
 80017d2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80017d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017d8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80017da:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017de:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80017e0:	f107 030c 	add.w	r3, r7, #12
 80017e4:	2102      	movs	r1, #2
 80017e6:	4618      	mov	r0, r3
 80017e8:	f001 f932 	bl	8002a50 <HAL_RCC_ClockConfig>
 80017ec:	4603      	mov	r3, r0
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d001      	beq.n	80017f6 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80017f2:	f000 f809 	bl	8001808 <Error_Handler>
  }
}
 80017f6:	bf00      	nop
 80017f8:	3750      	adds	r7, #80	; 0x50
 80017fa:	46bd      	mov	sp, r7
 80017fc:	bd80      	pop	{r7, pc}
 80017fe:	bf00      	nop
 8001800:	40023800 	.word	0x40023800
 8001804:	40007000 	.word	0x40007000

08001808 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001808:	b480      	push	{r7}
 800180a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800180c:	bf00      	nop
 800180e:	46bd      	mov	sp, r7
 8001810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001814:	4770      	bx	lr
	...

08001818 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800181c:	4b0f      	ldr	r3, [pc, #60]	; (800185c <MX_RTC_Init+0x44>)
 800181e:	4a10      	ldr	r2, [pc, #64]	; (8001860 <MX_RTC_Init+0x48>)
 8001820:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001822:	4b0e      	ldr	r3, [pc, #56]	; (800185c <MX_RTC_Init+0x44>)
 8001824:	2200      	movs	r2, #0
 8001826:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001828:	4b0c      	ldr	r3, [pc, #48]	; (800185c <MX_RTC_Init+0x44>)
 800182a:	227f      	movs	r2, #127	; 0x7f
 800182c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800182e:	4b0b      	ldr	r3, [pc, #44]	; (800185c <MX_RTC_Init+0x44>)
 8001830:	22ff      	movs	r2, #255	; 0xff
 8001832:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001834:	4b09      	ldr	r3, [pc, #36]	; (800185c <MX_RTC_Init+0x44>)
 8001836:	2200      	movs	r2, #0
 8001838:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800183a:	4b08      	ldr	r3, [pc, #32]	; (800185c <MX_RTC_Init+0x44>)
 800183c:	2200      	movs	r2, #0
 800183e:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001840:	4b06      	ldr	r3, [pc, #24]	; (800185c <MX_RTC_Init+0x44>)
 8001842:	2200      	movs	r2, #0
 8001844:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001846:	4805      	ldr	r0, [pc, #20]	; (800185c <MX_RTC_Init+0x44>)
 8001848:	f001 fbd2 	bl	8002ff0 <HAL_RTC_Init>
 800184c:	4603      	mov	r3, r0
 800184e:	2b00      	cmp	r3, #0
 8001850:	d001      	beq.n	8001856 <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 8001852:	f7ff ffd9 	bl	8001808 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001856:	bf00      	nop
 8001858:	bd80      	pop	{r7, pc}
 800185a:	bf00      	nop
 800185c:	20000108 	.word	0x20000108
 8001860:	40002800 	.word	0x40002800

08001864 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b088      	sub	sp, #32
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800186c:	f107 0308 	add.w	r3, r7, #8
 8001870:	2200      	movs	r2, #0
 8001872:	601a      	str	r2, [r3, #0]
 8001874:	605a      	str	r2, [r3, #4]
 8001876:	609a      	str	r2, [r3, #8]
 8001878:	60da      	str	r2, [r3, #12]
 800187a:	611a      	str	r2, [r3, #16]
 800187c:	615a      	str	r2, [r3, #20]
  if(rtcHandle->Instance==RTC)
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	4a0c      	ldr	r2, [pc, #48]	; (80018b4 <HAL_RTC_MspInit+0x50>)
 8001884:	4293      	cmp	r3, r2
 8001886:	d111      	bne.n	80018ac <HAL_RTC_MspInit+0x48>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001888:	2302      	movs	r3, #2
 800188a:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800188c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001890:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001892:	f107 0308 	add.w	r3, r7, #8
 8001896:	4618      	mov	r0, r3
 8001898:	f001 faba 	bl	8002e10 <HAL_RCCEx_PeriphCLKConfig>
 800189c:	4603      	mov	r3, r0
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d001      	beq.n	80018a6 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 80018a2:	f7ff ffb1 	bl	8001808 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 80018a6:	4b04      	ldr	r3, [pc, #16]	; (80018b8 <HAL_RTC_MspInit+0x54>)
 80018a8:	2201      	movs	r2, #1
 80018aa:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 80018ac:	bf00      	nop
 80018ae:	3720      	adds	r7, #32
 80018b0:	46bd      	mov	sp, r7
 80018b2:	bd80      	pop	{r7, pc}
 80018b4:	40002800 	.word	0x40002800
 80018b8:	42470e3c 	.word	0x42470e3c

080018bc <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80018c0:	4b17      	ldr	r3, [pc, #92]	; (8001920 <MX_SPI1_Init+0x64>)
 80018c2:	4a18      	ldr	r2, [pc, #96]	; (8001924 <MX_SPI1_Init+0x68>)
 80018c4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80018c6:	4b16      	ldr	r3, [pc, #88]	; (8001920 <MX_SPI1_Init+0x64>)
 80018c8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80018cc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80018ce:	4b14      	ldr	r3, [pc, #80]	; (8001920 <MX_SPI1_Init+0x64>)
 80018d0:	2200      	movs	r2, #0
 80018d2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80018d4:	4b12      	ldr	r3, [pc, #72]	; (8001920 <MX_SPI1_Init+0x64>)
 80018d6:	2200      	movs	r2, #0
 80018d8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80018da:	4b11      	ldr	r3, [pc, #68]	; (8001920 <MX_SPI1_Init+0x64>)
 80018dc:	2200      	movs	r2, #0
 80018de:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80018e0:	4b0f      	ldr	r3, [pc, #60]	; (8001920 <MX_SPI1_Init+0x64>)
 80018e2:	2200      	movs	r2, #0
 80018e4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80018e6:	4b0e      	ldr	r3, [pc, #56]	; (8001920 <MX_SPI1_Init+0x64>)
 80018e8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80018ec:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80018ee:	4b0c      	ldr	r3, [pc, #48]	; (8001920 <MX_SPI1_Init+0x64>)
 80018f0:	2218      	movs	r2, #24
 80018f2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80018f4:	4b0a      	ldr	r3, [pc, #40]	; (8001920 <MX_SPI1_Init+0x64>)
 80018f6:	2200      	movs	r2, #0
 80018f8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80018fa:	4b09      	ldr	r3, [pc, #36]	; (8001920 <MX_SPI1_Init+0x64>)
 80018fc:	2200      	movs	r2, #0
 80018fe:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001900:	4b07      	ldr	r3, [pc, #28]	; (8001920 <MX_SPI1_Init+0x64>)
 8001902:	2200      	movs	r2, #0
 8001904:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001906:	4b06      	ldr	r3, [pc, #24]	; (8001920 <MX_SPI1_Init+0x64>)
 8001908:	220a      	movs	r2, #10
 800190a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800190c:	4804      	ldr	r0, [pc, #16]	; (8001920 <MX_SPI1_Init+0x64>)
 800190e:	f001 fc69 	bl	80031e4 <HAL_SPI_Init>
 8001912:	4603      	mov	r3, r0
 8001914:	2b00      	cmp	r3, #0
 8001916:	d001      	beq.n	800191c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001918:	f7ff ff76 	bl	8001808 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800191c:	bf00      	nop
 800191e:	bd80      	pop	{r7, pc}
 8001920:	20000128 	.word	0x20000128
 8001924:	40013000 	.word	0x40013000

08001928 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b08a      	sub	sp, #40	; 0x28
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001930:	f107 0314 	add.w	r3, r7, #20
 8001934:	2200      	movs	r2, #0
 8001936:	601a      	str	r2, [r3, #0]
 8001938:	605a      	str	r2, [r3, #4]
 800193a:	609a      	str	r2, [r3, #8]
 800193c:	60da      	str	r2, [r3, #12]
 800193e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	4a19      	ldr	r2, [pc, #100]	; (80019ac <HAL_SPI_MspInit+0x84>)
 8001946:	4293      	cmp	r3, r2
 8001948:	d12b      	bne.n	80019a2 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800194a:	2300      	movs	r3, #0
 800194c:	613b      	str	r3, [r7, #16]
 800194e:	4b18      	ldr	r3, [pc, #96]	; (80019b0 <HAL_SPI_MspInit+0x88>)
 8001950:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001952:	4a17      	ldr	r2, [pc, #92]	; (80019b0 <HAL_SPI_MspInit+0x88>)
 8001954:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001958:	6453      	str	r3, [r2, #68]	; 0x44
 800195a:	4b15      	ldr	r3, [pc, #84]	; (80019b0 <HAL_SPI_MspInit+0x88>)
 800195c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800195e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001962:	613b      	str	r3, [r7, #16]
 8001964:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001966:	2300      	movs	r3, #0
 8001968:	60fb      	str	r3, [r7, #12]
 800196a:	4b11      	ldr	r3, [pc, #68]	; (80019b0 <HAL_SPI_MspInit+0x88>)
 800196c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800196e:	4a10      	ldr	r2, [pc, #64]	; (80019b0 <HAL_SPI_MspInit+0x88>)
 8001970:	f043 0301 	orr.w	r3, r3, #1
 8001974:	6313      	str	r3, [r2, #48]	; 0x30
 8001976:	4b0e      	ldr	r3, [pc, #56]	; (80019b0 <HAL_SPI_MspInit+0x88>)
 8001978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800197a:	f003 0301 	and.w	r3, r3, #1
 800197e:	60fb      	str	r3, [r7, #12]
 8001980:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001982:	23a0      	movs	r3, #160	; 0xa0
 8001984:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001986:	2302      	movs	r3, #2
 8001988:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800198a:	2300      	movs	r3, #0
 800198c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800198e:	2303      	movs	r3, #3
 8001990:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001992:	2305      	movs	r3, #5
 8001994:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001996:	f107 0314 	add.w	r3, r7, #20
 800199a:	4619      	mov	r1, r3
 800199c:	4805      	ldr	r0, [pc, #20]	; (80019b4 <HAL_SPI_MspInit+0x8c>)
 800199e:	f000 fae5 	bl	8001f6c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80019a2:	bf00      	nop
 80019a4:	3728      	adds	r7, #40	; 0x28
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bd80      	pop	{r7, pc}
 80019aa:	bf00      	nop
 80019ac:	40013000 	.word	0x40013000
 80019b0:	40023800 	.word	0x40023800
 80019b4:	40020000 	.word	0x40020000

080019b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019b8:	b480      	push	{r7}
 80019ba:	b083      	sub	sp, #12
 80019bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019be:	2300      	movs	r3, #0
 80019c0:	607b      	str	r3, [r7, #4]
 80019c2:	4b10      	ldr	r3, [pc, #64]	; (8001a04 <HAL_MspInit+0x4c>)
 80019c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019c6:	4a0f      	ldr	r2, [pc, #60]	; (8001a04 <HAL_MspInit+0x4c>)
 80019c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019cc:	6453      	str	r3, [r2, #68]	; 0x44
 80019ce:	4b0d      	ldr	r3, [pc, #52]	; (8001a04 <HAL_MspInit+0x4c>)
 80019d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80019d6:	607b      	str	r3, [r7, #4]
 80019d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80019da:	2300      	movs	r3, #0
 80019dc:	603b      	str	r3, [r7, #0]
 80019de:	4b09      	ldr	r3, [pc, #36]	; (8001a04 <HAL_MspInit+0x4c>)
 80019e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019e2:	4a08      	ldr	r2, [pc, #32]	; (8001a04 <HAL_MspInit+0x4c>)
 80019e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019e8:	6413      	str	r3, [r2, #64]	; 0x40
 80019ea:	4b06      	ldr	r3, [pc, #24]	; (8001a04 <HAL_MspInit+0x4c>)
 80019ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019f2:	603b      	str	r3, [r7, #0]
 80019f4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019f6:	bf00      	nop
 80019f8:	370c      	adds	r7, #12
 80019fa:	46bd      	mov	sp, r7
 80019fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a00:	4770      	bx	lr
 8001a02:	bf00      	nop
 8001a04:	40023800 	.word	0x40023800

08001a08 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001a0c:	bf00      	nop
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a14:	4770      	bx	lr

08001a16 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a16:	b480      	push	{r7}
 8001a18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a1a:	e7fe      	b.n	8001a1a <HardFault_Handler+0x4>

08001a1c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a20:	e7fe      	b.n	8001a20 <MemManage_Handler+0x4>

08001a22 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a22:	b480      	push	{r7}
 8001a24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a26:	e7fe      	b.n	8001a26 <BusFault_Handler+0x4>

08001a28 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a2c:	e7fe      	b.n	8001a2c <UsageFault_Handler+0x4>

08001a2e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a2e:	b480      	push	{r7}
 8001a30:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a32:	bf00      	nop
 8001a34:	46bd      	mov	sp, r7
 8001a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3a:	4770      	bx	lr

08001a3c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a40:	bf00      	nop
 8001a42:	46bd      	mov	sp, r7
 8001a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a48:	4770      	bx	lr

08001a4a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a4a:	b480      	push	{r7}
 8001a4c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a4e:	bf00      	nop
 8001a50:	46bd      	mov	sp, r7
 8001a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a56:	4770      	bx	lr

08001a58 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a5c:	f000 f95c 	bl	8001d18 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a60:	bf00      	nop
 8001a62:	bd80      	pop	{r7, pc}

08001a64 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b086      	sub	sp, #24
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a6c:	4a14      	ldr	r2, [pc, #80]	; (8001ac0 <_sbrk+0x5c>)
 8001a6e:	4b15      	ldr	r3, [pc, #84]	; (8001ac4 <_sbrk+0x60>)
 8001a70:	1ad3      	subs	r3, r2, r3
 8001a72:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a74:	697b      	ldr	r3, [r7, #20]
 8001a76:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a78:	4b13      	ldr	r3, [pc, #76]	; (8001ac8 <_sbrk+0x64>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d102      	bne.n	8001a86 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a80:	4b11      	ldr	r3, [pc, #68]	; (8001ac8 <_sbrk+0x64>)
 8001a82:	4a12      	ldr	r2, [pc, #72]	; (8001acc <_sbrk+0x68>)
 8001a84:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a86:	4b10      	ldr	r3, [pc, #64]	; (8001ac8 <_sbrk+0x64>)
 8001a88:	681a      	ldr	r2, [r3, #0]
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	4413      	add	r3, r2
 8001a8e:	693a      	ldr	r2, [r7, #16]
 8001a90:	429a      	cmp	r2, r3
 8001a92:	d207      	bcs.n	8001aa4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a94:	f002 f8f8 	bl	8003c88 <__errno>
 8001a98:	4603      	mov	r3, r0
 8001a9a:	220c      	movs	r2, #12
 8001a9c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a9e:	f04f 33ff 	mov.w	r3, #4294967295
 8001aa2:	e009      	b.n	8001ab8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001aa4:	4b08      	ldr	r3, [pc, #32]	; (8001ac8 <_sbrk+0x64>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001aaa:	4b07      	ldr	r3, [pc, #28]	; (8001ac8 <_sbrk+0x64>)
 8001aac:	681a      	ldr	r2, [r3, #0]
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	4413      	add	r3, r2
 8001ab2:	4a05      	ldr	r2, [pc, #20]	; (8001ac8 <_sbrk+0x64>)
 8001ab4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001ab6:	68fb      	ldr	r3, [r7, #12]
}
 8001ab8:	4618      	mov	r0, r3
 8001aba:	3718      	adds	r7, #24
 8001abc:	46bd      	mov	sp, r7
 8001abe:	bd80      	pop	{r7, pc}
 8001ac0:	20020000 	.word	0x20020000
 8001ac4:	00000400 	.word	0x00000400
 8001ac8:	20000180 	.word	0x20000180
 8001acc:	200001e0 	.word	0x200001e0

08001ad0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001ad4:	4b16      	ldr	r3, [pc, #88]	; (8001b30 <SystemInit+0x60>)
 8001ad6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ada:	4a15      	ldr	r2, [pc, #84]	; (8001b30 <SystemInit+0x60>)
 8001adc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001ae0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8001ae4:	4b13      	ldr	r3, [pc, #76]	; (8001b34 <SystemInit+0x64>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	4a12      	ldr	r2, [pc, #72]	; (8001b34 <SystemInit+0x64>)
 8001aea:	f043 0301 	orr.w	r3, r3, #1
 8001aee:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001af0:	4b10      	ldr	r3, [pc, #64]	; (8001b34 <SystemInit+0x64>)
 8001af2:	2200      	movs	r2, #0
 8001af4:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8001af6:	4b0f      	ldr	r3, [pc, #60]	; (8001b34 <SystemInit+0x64>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	4a0e      	ldr	r2, [pc, #56]	; (8001b34 <SystemInit+0x64>)
 8001afc:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8001b00:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b04:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8001b06:	4b0b      	ldr	r3, [pc, #44]	; (8001b34 <SystemInit+0x64>)
 8001b08:	4a0b      	ldr	r2, [pc, #44]	; (8001b38 <SystemInit+0x68>)
 8001b0a:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001b0c:	4b09      	ldr	r3, [pc, #36]	; (8001b34 <SystemInit+0x64>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	4a08      	ldr	r2, [pc, #32]	; (8001b34 <SystemInit+0x64>)
 8001b12:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b16:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8001b18:	4b06      	ldr	r3, [pc, #24]	; (8001b34 <SystemInit+0x64>)
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001b1e:	4b04      	ldr	r3, [pc, #16]	; (8001b30 <SystemInit+0x60>)
 8001b20:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001b24:	609a      	str	r2, [r3, #8]
#endif
}
 8001b26:	bf00      	nop
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2e:	4770      	bx	lr
 8001b30:	e000ed00 	.word	0xe000ed00
 8001b34:	40023800 	.word	0x40023800
 8001b38:	24003010 	.word	0x24003010

08001b3c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001b40:	4b11      	ldr	r3, [pc, #68]	; (8001b88 <MX_USART1_UART_Init+0x4c>)
 8001b42:	4a12      	ldr	r2, [pc, #72]	; (8001b8c <MX_USART1_UART_Init+0x50>)
 8001b44:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001b46:	4b10      	ldr	r3, [pc, #64]	; (8001b88 <MX_USART1_UART_Init+0x4c>)
 8001b48:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001b4c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001b4e:	4b0e      	ldr	r3, [pc, #56]	; (8001b88 <MX_USART1_UART_Init+0x4c>)
 8001b50:	2200      	movs	r2, #0
 8001b52:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001b54:	4b0c      	ldr	r3, [pc, #48]	; (8001b88 <MX_USART1_UART_Init+0x4c>)
 8001b56:	2200      	movs	r2, #0
 8001b58:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001b5a:	4b0b      	ldr	r3, [pc, #44]	; (8001b88 <MX_USART1_UART_Init+0x4c>)
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001b60:	4b09      	ldr	r3, [pc, #36]	; (8001b88 <MX_USART1_UART_Init+0x4c>)
 8001b62:	220c      	movs	r2, #12
 8001b64:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b66:	4b08      	ldr	r3, [pc, #32]	; (8001b88 <MX_USART1_UART_Init+0x4c>)
 8001b68:	2200      	movs	r2, #0
 8001b6a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b6c:	4b06      	ldr	r3, [pc, #24]	; (8001b88 <MX_USART1_UART_Init+0x4c>)
 8001b6e:	2200      	movs	r2, #0
 8001b70:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001b72:	4805      	ldr	r0, [pc, #20]	; (8001b88 <MX_USART1_UART_Init+0x4c>)
 8001b74:	f001 fdc6 	bl	8003704 <HAL_UART_Init>
 8001b78:	4603      	mov	r3, r0
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d001      	beq.n	8001b82 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001b7e:	f7ff fe43 	bl	8001808 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001b82:	bf00      	nop
 8001b84:	bd80      	pop	{r7, pc}
 8001b86:	bf00      	nop
 8001b88:	20000184 	.word	0x20000184
 8001b8c:	40011000 	.word	0x40011000

08001b90 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b08a      	sub	sp, #40	; 0x28
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b98:	f107 0314 	add.w	r3, r7, #20
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	601a      	str	r2, [r3, #0]
 8001ba0:	605a      	str	r2, [r3, #4]
 8001ba2:	609a      	str	r2, [r3, #8]
 8001ba4:	60da      	str	r2, [r3, #12]
 8001ba6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	4a19      	ldr	r2, [pc, #100]	; (8001c14 <HAL_UART_MspInit+0x84>)
 8001bae:	4293      	cmp	r3, r2
 8001bb0:	d12c      	bne.n	8001c0c <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	613b      	str	r3, [r7, #16]
 8001bb6:	4b18      	ldr	r3, [pc, #96]	; (8001c18 <HAL_UART_MspInit+0x88>)
 8001bb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bba:	4a17      	ldr	r2, [pc, #92]	; (8001c18 <HAL_UART_MspInit+0x88>)
 8001bbc:	f043 0310 	orr.w	r3, r3, #16
 8001bc0:	6453      	str	r3, [r2, #68]	; 0x44
 8001bc2:	4b15      	ldr	r3, [pc, #84]	; (8001c18 <HAL_UART_MspInit+0x88>)
 8001bc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bc6:	f003 0310 	and.w	r3, r3, #16
 8001bca:	613b      	str	r3, [r7, #16]
 8001bcc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bce:	2300      	movs	r3, #0
 8001bd0:	60fb      	str	r3, [r7, #12]
 8001bd2:	4b11      	ldr	r3, [pc, #68]	; (8001c18 <HAL_UART_MspInit+0x88>)
 8001bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bd6:	4a10      	ldr	r2, [pc, #64]	; (8001c18 <HAL_UART_MspInit+0x88>)
 8001bd8:	f043 0301 	orr.w	r3, r3, #1
 8001bdc:	6313      	str	r3, [r2, #48]	; 0x30
 8001bde:	4b0e      	ldr	r3, [pc, #56]	; (8001c18 <HAL_UART_MspInit+0x88>)
 8001be0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001be2:	f003 0301 	and.w	r3, r3, #1
 8001be6:	60fb      	str	r3, [r7, #12]
 8001be8:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001bea:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001bee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bf0:	2302      	movs	r3, #2
 8001bf2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bf8:	2303      	movs	r3, #3
 8001bfa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001bfc:	2307      	movs	r3, #7
 8001bfe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c00:	f107 0314 	add.w	r3, r7, #20
 8001c04:	4619      	mov	r1, r3
 8001c06:	4805      	ldr	r0, [pc, #20]	; (8001c1c <HAL_UART_MspInit+0x8c>)
 8001c08:	f000 f9b0 	bl	8001f6c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001c0c:	bf00      	nop
 8001c0e:	3728      	adds	r7, #40	; 0x28
 8001c10:	46bd      	mov	sp, r7
 8001c12:	bd80      	pop	{r7, pc}
 8001c14:	40011000 	.word	0x40011000
 8001c18:	40023800 	.word	0x40023800
 8001c1c:	40020000 	.word	0x40020000

08001c20 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001c20:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001c58 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001c24:	480d      	ldr	r0, [pc, #52]	; (8001c5c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001c26:	490e      	ldr	r1, [pc, #56]	; (8001c60 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001c28:	4a0e      	ldr	r2, [pc, #56]	; (8001c64 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001c2a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c2c:	e002      	b.n	8001c34 <LoopCopyDataInit>

08001c2e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c2e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c30:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c32:	3304      	adds	r3, #4

08001c34 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c34:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c36:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c38:	d3f9      	bcc.n	8001c2e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c3a:	4a0b      	ldr	r2, [pc, #44]	; (8001c68 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001c3c:	4c0b      	ldr	r4, [pc, #44]	; (8001c6c <LoopFillZerobss+0x26>)
  movs r3, #0
 8001c3e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c40:	e001      	b.n	8001c46 <LoopFillZerobss>

08001c42 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c42:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c44:	3204      	adds	r2, #4

08001c46 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c46:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c48:	d3fb      	bcc.n	8001c42 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001c4a:	f7ff ff41 	bl	8001ad0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001c4e:	f002 f821 	bl	8003c94 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001c52:	f7ff fd55 	bl	8001700 <main>
  bx  lr    
 8001c56:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001c58:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001c5c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c60:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8001c64:	080069fc 	.word	0x080069fc
  ldr r2, =_sbss
 8001c68:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8001c6c:	200001dc 	.word	0x200001dc

08001c70 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001c70:	e7fe      	b.n	8001c70 <ADC_IRQHandler>
	...

08001c74 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001c78:	4b0e      	ldr	r3, [pc, #56]	; (8001cb4 <HAL_Init+0x40>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	4a0d      	ldr	r2, [pc, #52]	; (8001cb4 <HAL_Init+0x40>)
 8001c7e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001c82:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001c84:	4b0b      	ldr	r3, [pc, #44]	; (8001cb4 <HAL_Init+0x40>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	4a0a      	ldr	r2, [pc, #40]	; (8001cb4 <HAL_Init+0x40>)
 8001c8a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001c8e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c90:	4b08      	ldr	r3, [pc, #32]	; (8001cb4 <HAL_Init+0x40>)
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	4a07      	ldr	r2, [pc, #28]	; (8001cb4 <HAL_Init+0x40>)
 8001c96:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c9a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c9c:	2003      	movs	r0, #3
 8001c9e:	f000 f931 	bl	8001f04 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001ca2:	2000      	movs	r0, #0
 8001ca4:	f000 f808 	bl	8001cb8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ca8:	f7ff fe86 	bl	80019b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001cac:	2300      	movs	r3, #0
}
 8001cae:	4618      	mov	r0, r3
 8001cb0:	bd80      	pop	{r7, pc}
 8001cb2:	bf00      	nop
 8001cb4:	40023c00 	.word	0x40023c00

08001cb8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b082      	sub	sp, #8
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001cc0:	4b12      	ldr	r3, [pc, #72]	; (8001d0c <HAL_InitTick+0x54>)
 8001cc2:	681a      	ldr	r2, [r3, #0]
 8001cc4:	4b12      	ldr	r3, [pc, #72]	; (8001d10 <HAL_InitTick+0x58>)
 8001cc6:	781b      	ldrb	r3, [r3, #0]
 8001cc8:	4619      	mov	r1, r3
 8001cca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001cce:	fbb3 f3f1 	udiv	r3, r3, r1
 8001cd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	f000 f93b 	bl	8001f52 <HAL_SYSTICK_Config>
 8001cdc:	4603      	mov	r3, r0
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d001      	beq.n	8001ce6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001ce2:	2301      	movs	r3, #1
 8001ce4:	e00e      	b.n	8001d04 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	2b0f      	cmp	r3, #15
 8001cea:	d80a      	bhi.n	8001d02 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001cec:	2200      	movs	r2, #0
 8001cee:	6879      	ldr	r1, [r7, #4]
 8001cf0:	f04f 30ff 	mov.w	r0, #4294967295
 8001cf4:	f000 f911 	bl	8001f1a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001cf8:	4a06      	ldr	r2, [pc, #24]	; (8001d14 <HAL_InitTick+0x5c>)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001cfe:	2300      	movs	r3, #0
 8001d00:	e000      	b.n	8001d04 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001d02:	2301      	movs	r3, #1
}
 8001d04:	4618      	mov	r0, r3
 8001d06:	3708      	adds	r7, #8
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	bd80      	pop	{r7, pc}
 8001d0c:	20000010 	.word	0x20000010
 8001d10:	20000018 	.word	0x20000018
 8001d14:	20000014 	.word	0x20000014

08001d18 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d18:	b480      	push	{r7}
 8001d1a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d1c:	4b06      	ldr	r3, [pc, #24]	; (8001d38 <HAL_IncTick+0x20>)
 8001d1e:	781b      	ldrb	r3, [r3, #0]
 8001d20:	461a      	mov	r2, r3
 8001d22:	4b06      	ldr	r3, [pc, #24]	; (8001d3c <HAL_IncTick+0x24>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	4413      	add	r3, r2
 8001d28:	4a04      	ldr	r2, [pc, #16]	; (8001d3c <HAL_IncTick+0x24>)
 8001d2a:	6013      	str	r3, [r2, #0]
}
 8001d2c:	bf00      	nop
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d34:	4770      	bx	lr
 8001d36:	bf00      	nop
 8001d38:	20000018 	.word	0x20000018
 8001d3c:	200001c8 	.word	0x200001c8

08001d40 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d40:	b480      	push	{r7}
 8001d42:	af00      	add	r7, sp, #0
  return uwTick;
 8001d44:	4b03      	ldr	r3, [pc, #12]	; (8001d54 <HAL_GetTick+0x14>)
 8001d46:	681b      	ldr	r3, [r3, #0]
}
 8001d48:	4618      	mov	r0, r3
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d50:	4770      	bx	lr
 8001d52:	bf00      	nop
 8001d54:	200001c8 	.word	0x200001c8

08001d58 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b084      	sub	sp, #16
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d60:	f7ff ffee 	bl	8001d40 <HAL_GetTick>
 8001d64:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d70:	d005      	beq.n	8001d7e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001d72:	4b0a      	ldr	r3, [pc, #40]	; (8001d9c <HAL_Delay+0x44>)
 8001d74:	781b      	ldrb	r3, [r3, #0]
 8001d76:	461a      	mov	r2, r3
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	4413      	add	r3, r2
 8001d7c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001d7e:	bf00      	nop
 8001d80:	f7ff ffde 	bl	8001d40 <HAL_GetTick>
 8001d84:	4602      	mov	r2, r0
 8001d86:	68bb      	ldr	r3, [r7, #8]
 8001d88:	1ad3      	subs	r3, r2, r3
 8001d8a:	68fa      	ldr	r2, [r7, #12]
 8001d8c:	429a      	cmp	r2, r3
 8001d8e:	d8f7      	bhi.n	8001d80 <HAL_Delay+0x28>
  {
  }
}
 8001d90:	bf00      	nop
 8001d92:	bf00      	nop
 8001d94:	3710      	adds	r7, #16
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bd80      	pop	{r7, pc}
 8001d9a:	bf00      	nop
 8001d9c:	20000018 	.word	0x20000018

08001da0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001da0:	b480      	push	{r7}
 8001da2:	b085      	sub	sp, #20
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	f003 0307 	and.w	r3, r3, #7
 8001dae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001db0:	4b0c      	ldr	r3, [pc, #48]	; (8001de4 <__NVIC_SetPriorityGrouping+0x44>)
 8001db2:	68db      	ldr	r3, [r3, #12]
 8001db4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001db6:	68ba      	ldr	r2, [r7, #8]
 8001db8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001dbc:	4013      	ands	r3, r2
 8001dbe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001dc4:	68bb      	ldr	r3, [r7, #8]
 8001dc6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001dc8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001dcc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001dd0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001dd2:	4a04      	ldr	r2, [pc, #16]	; (8001de4 <__NVIC_SetPriorityGrouping+0x44>)
 8001dd4:	68bb      	ldr	r3, [r7, #8]
 8001dd6:	60d3      	str	r3, [r2, #12]
}
 8001dd8:	bf00      	nop
 8001dda:	3714      	adds	r7, #20
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de2:	4770      	bx	lr
 8001de4:	e000ed00 	.word	0xe000ed00

08001de8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001de8:	b480      	push	{r7}
 8001dea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001dec:	4b04      	ldr	r3, [pc, #16]	; (8001e00 <__NVIC_GetPriorityGrouping+0x18>)
 8001dee:	68db      	ldr	r3, [r3, #12]
 8001df0:	0a1b      	lsrs	r3, r3, #8
 8001df2:	f003 0307 	and.w	r3, r3, #7
}
 8001df6:	4618      	mov	r0, r3
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfe:	4770      	bx	lr
 8001e00:	e000ed00 	.word	0xe000ed00

08001e04 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e04:	b480      	push	{r7}
 8001e06:	b083      	sub	sp, #12
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	6039      	str	r1, [r7, #0]
 8001e0e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	db0a      	blt.n	8001e2e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	b2da      	uxtb	r2, r3
 8001e1c:	490c      	ldr	r1, [pc, #48]	; (8001e50 <__NVIC_SetPriority+0x4c>)
 8001e1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e22:	0112      	lsls	r2, r2, #4
 8001e24:	b2d2      	uxtb	r2, r2
 8001e26:	440b      	add	r3, r1
 8001e28:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e2c:	e00a      	b.n	8001e44 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e2e:	683b      	ldr	r3, [r7, #0]
 8001e30:	b2da      	uxtb	r2, r3
 8001e32:	4908      	ldr	r1, [pc, #32]	; (8001e54 <__NVIC_SetPriority+0x50>)
 8001e34:	79fb      	ldrb	r3, [r7, #7]
 8001e36:	f003 030f 	and.w	r3, r3, #15
 8001e3a:	3b04      	subs	r3, #4
 8001e3c:	0112      	lsls	r2, r2, #4
 8001e3e:	b2d2      	uxtb	r2, r2
 8001e40:	440b      	add	r3, r1
 8001e42:	761a      	strb	r2, [r3, #24]
}
 8001e44:	bf00      	nop
 8001e46:	370c      	adds	r7, #12
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4e:	4770      	bx	lr
 8001e50:	e000e100 	.word	0xe000e100
 8001e54:	e000ed00 	.word	0xe000ed00

08001e58 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e58:	b480      	push	{r7}
 8001e5a:	b089      	sub	sp, #36	; 0x24
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	60f8      	str	r0, [r7, #12]
 8001e60:	60b9      	str	r1, [r7, #8]
 8001e62:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	f003 0307 	and.w	r3, r3, #7
 8001e6a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e6c:	69fb      	ldr	r3, [r7, #28]
 8001e6e:	f1c3 0307 	rsb	r3, r3, #7
 8001e72:	2b04      	cmp	r3, #4
 8001e74:	bf28      	it	cs
 8001e76:	2304      	movcs	r3, #4
 8001e78:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e7a:	69fb      	ldr	r3, [r7, #28]
 8001e7c:	3304      	adds	r3, #4
 8001e7e:	2b06      	cmp	r3, #6
 8001e80:	d902      	bls.n	8001e88 <NVIC_EncodePriority+0x30>
 8001e82:	69fb      	ldr	r3, [r7, #28]
 8001e84:	3b03      	subs	r3, #3
 8001e86:	e000      	b.n	8001e8a <NVIC_EncodePriority+0x32>
 8001e88:	2300      	movs	r3, #0
 8001e8a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e8c:	f04f 32ff 	mov.w	r2, #4294967295
 8001e90:	69bb      	ldr	r3, [r7, #24]
 8001e92:	fa02 f303 	lsl.w	r3, r2, r3
 8001e96:	43da      	mvns	r2, r3
 8001e98:	68bb      	ldr	r3, [r7, #8]
 8001e9a:	401a      	ands	r2, r3
 8001e9c:	697b      	ldr	r3, [r7, #20]
 8001e9e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ea0:	f04f 31ff 	mov.w	r1, #4294967295
 8001ea4:	697b      	ldr	r3, [r7, #20]
 8001ea6:	fa01 f303 	lsl.w	r3, r1, r3
 8001eaa:	43d9      	mvns	r1, r3
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001eb0:	4313      	orrs	r3, r2
         );
}
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	3724      	adds	r7, #36	; 0x24
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebc:	4770      	bx	lr
	...

08001ec0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b082      	sub	sp, #8
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	3b01      	subs	r3, #1
 8001ecc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ed0:	d301      	bcc.n	8001ed6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ed2:	2301      	movs	r3, #1
 8001ed4:	e00f      	b.n	8001ef6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ed6:	4a0a      	ldr	r2, [pc, #40]	; (8001f00 <SysTick_Config+0x40>)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	3b01      	subs	r3, #1
 8001edc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ede:	210f      	movs	r1, #15
 8001ee0:	f04f 30ff 	mov.w	r0, #4294967295
 8001ee4:	f7ff ff8e 	bl	8001e04 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ee8:	4b05      	ldr	r3, [pc, #20]	; (8001f00 <SysTick_Config+0x40>)
 8001eea:	2200      	movs	r2, #0
 8001eec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001eee:	4b04      	ldr	r3, [pc, #16]	; (8001f00 <SysTick_Config+0x40>)
 8001ef0:	2207      	movs	r2, #7
 8001ef2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ef4:	2300      	movs	r3, #0
}
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	3708      	adds	r7, #8
 8001efa:	46bd      	mov	sp, r7
 8001efc:	bd80      	pop	{r7, pc}
 8001efe:	bf00      	nop
 8001f00:	e000e010 	.word	0xe000e010

08001f04 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b082      	sub	sp, #8
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f0c:	6878      	ldr	r0, [r7, #4]
 8001f0e:	f7ff ff47 	bl	8001da0 <__NVIC_SetPriorityGrouping>
}
 8001f12:	bf00      	nop
 8001f14:	3708      	adds	r7, #8
 8001f16:	46bd      	mov	sp, r7
 8001f18:	bd80      	pop	{r7, pc}

08001f1a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001f1a:	b580      	push	{r7, lr}
 8001f1c:	b086      	sub	sp, #24
 8001f1e:	af00      	add	r7, sp, #0
 8001f20:	4603      	mov	r3, r0
 8001f22:	60b9      	str	r1, [r7, #8]
 8001f24:	607a      	str	r2, [r7, #4]
 8001f26:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001f28:	2300      	movs	r3, #0
 8001f2a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001f2c:	f7ff ff5c 	bl	8001de8 <__NVIC_GetPriorityGrouping>
 8001f30:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f32:	687a      	ldr	r2, [r7, #4]
 8001f34:	68b9      	ldr	r1, [r7, #8]
 8001f36:	6978      	ldr	r0, [r7, #20]
 8001f38:	f7ff ff8e 	bl	8001e58 <NVIC_EncodePriority>
 8001f3c:	4602      	mov	r2, r0
 8001f3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f42:	4611      	mov	r1, r2
 8001f44:	4618      	mov	r0, r3
 8001f46:	f7ff ff5d 	bl	8001e04 <__NVIC_SetPriority>
}
 8001f4a:	bf00      	nop
 8001f4c:	3718      	adds	r7, #24
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	bd80      	pop	{r7, pc}

08001f52 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f52:	b580      	push	{r7, lr}
 8001f54:	b082      	sub	sp, #8
 8001f56:	af00      	add	r7, sp, #0
 8001f58:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f5a:	6878      	ldr	r0, [r7, #4]
 8001f5c:	f7ff ffb0 	bl	8001ec0 <SysTick_Config>
 8001f60:	4603      	mov	r3, r0
}
 8001f62:	4618      	mov	r0, r3
 8001f64:	3708      	adds	r7, #8
 8001f66:	46bd      	mov	sp, r7
 8001f68:	bd80      	pop	{r7, pc}
	...

08001f6c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	b089      	sub	sp, #36	; 0x24
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
 8001f74:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001f76:	2300      	movs	r3, #0
 8001f78:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001f7e:	2300      	movs	r3, #0
 8001f80:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f82:	2300      	movs	r3, #0
 8001f84:	61fb      	str	r3, [r7, #28]
 8001f86:	e159      	b.n	800223c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001f88:	2201      	movs	r2, #1
 8001f8a:	69fb      	ldr	r3, [r7, #28]
 8001f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f90:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001f92:	683b      	ldr	r3, [r7, #0]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	697a      	ldr	r2, [r7, #20]
 8001f98:	4013      	ands	r3, r2
 8001f9a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001f9c:	693a      	ldr	r2, [r7, #16]
 8001f9e:	697b      	ldr	r3, [r7, #20]
 8001fa0:	429a      	cmp	r2, r3
 8001fa2:	f040 8148 	bne.w	8002236 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001fa6:	683b      	ldr	r3, [r7, #0]
 8001fa8:	685b      	ldr	r3, [r3, #4]
 8001faa:	f003 0303 	and.w	r3, r3, #3
 8001fae:	2b01      	cmp	r3, #1
 8001fb0:	d005      	beq.n	8001fbe <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001fb2:	683b      	ldr	r3, [r7, #0]
 8001fb4:	685b      	ldr	r3, [r3, #4]
 8001fb6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001fba:	2b02      	cmp	r3, #2
 8001fbc:	d130      	bne.n	8002020 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	689b      	ldr	r3, [r3, #8]
 8001fc2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001fc4:	69fb      	ldr	r3, [r7, #28]
 8001fc6:	005b      	lsls	r3, r3, #1
 8001fc8:	2203      	movs	r2, #3
 8001fca:	fa02 f303 	lsl.w	r3, r2, r3
 8001fce:	43db      	mvns	r3, r3
 8001fd0:	69ba      	ldr	r2, [r7, #24]
 8001fd2:	4013      	ands	r3, r2
 8001fd4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	68da      	ldr	r2, [r3, #12]
 8001fda:	69fb      	ldr	r3, [r7, #28]
 8001fdc:	005b      	lsls	r3, r3, #1
 8001fde:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe2:	69ba      	ldr	r2, [r7, #24]
 8001fe4:	4313      	orrs	r3, r2
 8001fe6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	69ba      	ldr	r2, [r7, #24]
 8001fec:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	685b      	ldr	r3, [r3, #4]
 8001ff2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001ff4:	2201      	movs	r2, #1
 8001ff6:	69fb      	ldr	r3, [r7, #28]
 8001ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ffc:	43db      	mvns	r3, r3
 8001ffe:	69ba      	ldr	r2, [r7, #24]
 8002000:	4013      	ands	r3, r2
 8002002:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	685b      	ldr	r3, [r3, #4]
 8002008:	091b      	lsrs	r3, r3, #4
 800200a:	f003 0201 	and.w	r2, r3, #1
 800200e:	69fb      	ldr	r3, [r7, #28]
 8002010:	fa02 f303 	lsl.w	r3, r2, r3
 8002014:	69ba      	ldr	r2, [r7, #24]
 8002016:	4313      	orrs	r3, r2
 8002018:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	69ba      	ldr	r2, [r7, #24]
 800201e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	685b      	ldr	r3, [r3, #4]
 8002024:	f003 0303 	and.w	r3, r3, #3
 8002028:	2b03      	cmp	r3, #3
 800202a:	d017      	beq.n	800205c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	68db      	ldr	r3, [r3, #12]
 8002030:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002032:	69fb      	ldr	r3, [r7, #28]
 8002034:	005b      	lsls	r3, r3, #1
 8002036:	2203      	movs	r2, #3
 8002038:	fa02 f303 	lsl.w	r3, r2, r3
 800203c:	43db      	mvns	r3, r3
 800203e:	69ba      	ldr	r2, [r7, #24]
 8002040:	4013      	ands	r3, r2
 8002042:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	689a      	ldr	r2, [r3, #8]
 8002048:	69fb      	ldr	r3, [r7, #28]
 800204a:	005b      	lsls	r3, r3, #1
 800204c:	fa02 f303 	lsl.w	r3, r2, r3
 8002050:	69ba      	ldr	r2, [r7, #24]
 8002052:	4313      	orrs	r3, r2
 8002054:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	69ba      	ldr	r2, [r7, #24]
 800205a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	685b      	ldr	r3, [r3, #4]
 8002060:	f003 0303 	and.w	r3, r3, #3
 8002064:	2b02      	cmp	r3, #2
 8002066:	d123      	bne.n	80020b0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002068:	69fb      	ldr	r3, [r7, #28]
 800206a:	08da      	lsrs	r2, r3, #3
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	3208      	adds	r2, #8
 8002070:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002074:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002076:	69fb      	ldr	r3, [r7, #28]
 8002078:	f003 0307 	and.w	r3, r3, #7
 800207c:	009b      	lsls	r3, r3, #2
 800207e:	220f      	movs	r2, #15
 8002080:	fa02 f303 	lsl.w	r3, r2, r3
 8002084:	43db      	mvns	r3, r3
 8002086:	69ba      	ldr	r2, [r7, #24]
 8002088:	4013      	ands	r3, r2
 800208a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	691a      	ldr	r2, [r3, #16]
 8002090:	69fb      	ldr	r3, [r7, #28]
 8002092:	f003 0307 	and.w	r3, r3, #7
 8002096:	009b      	lsls	r3, r3, #2
 8002098:	fa02 f303 	lsl.w	r3, r2, r3
 800209c:	69ba      	ldr	r2, [r7, #24]
 800209e:	4313      	orrs	r3, r2
 80020a0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80020a2:	69fb      	ldr	r3, [r7, #28]
 80020a4:	08da      	lsrs	r2, r3, #3
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	3208      	adds	r2, #8
 80020aa:	69b9      	ldr	r1, [r7, #24]
 80020ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80020b6:	69fb      	ldr	r3, [r7, #28]
 80020b8:	005b      	lsls	r3, r3, #1
 80020ba:	2203      	movs	r2, #3
 80020bc:	fa02 f303 	lsl.w	r3, r2, r3
 80020c0:	43db      	mvns	r3, r3
 80020c2:	69ba      	ldr	r2, [r7, #24]
 80020c4:	4013      	ands	r3, r2
 80020c6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	685b      	ldr	r3, [r3, #4]
 80020cc:	f003 0203 	and.w	r2, r3, #3
 80020d0:	69fb      	ldr	r3, [r7, #28]
 80020d2:	005b      	lsls	r3, r3, #1
 80020d4:	fa02 f303 	lsl.w	r3, r2, r3
 80020d8:	69ba      	ldr	r2, [r7, #24]
 80020da:	4313      	orrs	r3, r2
 80020dc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	69ba      	ldr	r2, [r7, #24]
 80020e2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	685b      	ldr	r3, [r3, #4]
 80020e8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	f000 80a2 	beq.w	8002236 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020f2:	2300      	movs	r3, #0
 80020f4:	60fb      	str	r3, [r7, #12]
 80020f6:	4b57      	ldr	r3, [pc, #348]	; (8002254 <HAL_GPIO_Init+0x2e8>)
 80020f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020fa:	4a56      	ldr	r2, [pc, #344]	; (8002254 <HAL_GPIO_Init+0x2e8>)
 80020fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002100:	6453      	str	r3, [r2, #68]	; 0x44
 8002102:	4b54      	ldr	r3, [pc, #336]	; (8002254 <HAL_GPIO_Init+0x2e8>)
 8002104:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002106:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800210a:	60fb      	str	r3, [r7, #12]
 800210c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800210e:	4a52      	ldr	r2, [pc, #328]	; (8002258 <HAL_GPIO_Init+0x2ec>)
 8002110:	69fb      	ldr	r3, [r7, #28]
 8002112:	089b      	lsrs	r3, r3, #2
 8002114:	3302      	adds	r3, #2
 8002116:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800211a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800211c:	69fb      	ldr	r3, [r7, #28]
 800211e:	f003 0303 	and.w	r3, r3, #3
 8002122:	009b      	lsls	r3, r3, #2
 8002124:	220f      	movs	r2, #15
 8002126:	fa02 f303 	lsl.w	r3, r2, r3
 800212a:	43db      	mvns	r3, r3
 800212c:	69ba      	ldr	r2, [r7, #24]
 800212e:	4013      	ands	r3, r2
 8002130:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	4a49      	ldr	r2, [pc, #292]	; (800225c <HAL_GPIO_Init+0x2f0>)
 8002136:	4293      	cmp	r3, r2
 8002138:	d019      	beq.n	800216e <HAL_GPIO_Init+0x202>
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	4a48      	ldr	r2, [pc, #288]	; (8002260 <HAL_GPIO_Init+0x2f4>)
 800213e:	4293      	cmp	r3, r2
 8002140:	d013      	beq.n	800216a <HAL_GPIO_Init+0x1fe>
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	4a47      	ldr	r2, [pc, #284]	; (8002264 <HAL_GPIO_Init+0x2f8>)
 8002146:	4293      	cmp	r3, r2
 8002148:	d00d      	beq.n	8002166 <HAL_GPIO_Init+0x1fa>
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	4a46      	ldr	r2, [pc, #280]	; (8002268 <HAL_GPIO_Init+0x2fc>)
 800214e:	4293      	cmp	r3, r2
 8002150:	d007      	beq.n	8002162 <HAL_GPIO_Init+0x1f6>
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	4a45      	ldr	r2, [pc, #276]	; (800226c <HAL_GPIO_Init+0x300>)
 8002156:	4293      	cmp	r3, r2
 8002158:	d101      	bne.n	800215e <HAL_GPIO_Init+0x1f2>
 800215a:	2304      	movs	r3, #4
 800215c:	e008      	b.n	8002170 <HAL_GPIO_Init+0x204>
 800215e:	2307      	movs	r3, #7
 8002160:	e006      	b.n	8002170 <HAL_GPIO_Init+0x204>
 8002162:	2303      	movs	r3, #3
 8002164:	e004      	b.n	8002170 <HAL_GPIO_Init+0x204>
 8002166:	2302      	movs	r3, #2
 8002168:	e002      	b.n	8002170 <HAL_GPIO_Init+0x204>
 800216a:	2301      	movs	r3, #1
 800216c:	e000      	b.n	8002170 <HAL_GPIO_Init+0x204>
 800216e:	2300      	movs	r3, #0
 8002170:	69fa      	ldr	r2, [r7, #28]
 8002172:	f002 0203 	and.w	r2, r2, #3
 8002176:	0092      	lsls	r2, r2, #2
 8002178:	4093      	lsls	r3, r2
 800217a:	69ba      	ldr	r2, [r7, #24]
 800217c:	4313      	orrs	r3, r2
 800217e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002180:	4935      	ldr	r1, [pc, #212]	; (8002258 <HAL_GPIO_Init+0x2ec>)
 8002182:	69fb      	ldr	r3, [r7, #28]
 8002184:	089b      	lsrs	r3, r3, #2
 8002186:	3302      	adds	r3, #2
 8002188:	69ba      	ldr	r2, [r7, #24]
 800218a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800218e:	4b38      	ldr	r3, [pc, #224]	; (8002270 <HAL_GPIO_Init+0x304>)
 8002190:	689b      	ldr	r3, [r3, #8]
 8002192:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002194:	693b      	ldr	r3, [r7, #16]
 8002196:	43db      	mvns	r3, r3
 8002198:	69ba      	ldr	r2, [r7, #24]
 800219a:	4013      	ands	r3, r2
 800219c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800219e:	683b      	ldr	r3, [r7, #0]
 80021a0:	685b      	ldr	r3, [r3, #4]
 80021a2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d003      	beq.n	80021b2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80021aa:	69ba      	ldr	r2, [r7, #24]
 80021ac:	693b      	ldr	r3, [r7, #16]
 80021ae:	4313      	orrs	r3, r2
 80021b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80021b2:	4a2f      	ldr	r2, [pc, #188]	; (8002270 <HAL_GPIO_Init+0x304>)
 80021b4:	69bb      	ldr	r3, [r7, #24]
 80021b6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80021b8:	4b2d      	ldr	r3, [pc, #180]	; (8002270 <HAL_GPIO_Init+0x304>)
 80021ba:	68db      	ldr	r3, [r3, #12]
 80021bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021be:	693b      	ldr	r3, [r7, #16]
 80021c0:	43db      	mvns	r3, r3
 80021c2:	69ba      	ldr	r2, [r7, #24]
 80021c4:	4013      	ands	r3, r2
 80021c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	685b      	ldr	r3, [r3, #4]
 80021cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d003      	beq.n	80021dc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80021d4:	69ba      	ldr	r2, [r7, #24]
 80021d6:	693b      	ldr	r3, [r7, #16]
 80021d8:	4313      	orrs	r3, r2
 80021da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80021dc:	4a24      	ldr	r2, [pc, #144]	; (8002270 <HAL_GPIO_Init+0x304>)
 80021de:	69bb      	ldr	r3, [r7, #24]
 80021e0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80021e2:	4b23      	ldr	r3, [pc, #140]	; (8002270 <HAL_GPIO_Init+0x304>)
 80021e4:	685b      	ldr	r3, [r3, #4]
 80021e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021e8:	693b      	ldr	r3, [r7, #16]
 80021ea:	43db      	mvns	r3, r3
 80021ec:	69ba      	ldr	r2, [r7, #24]
 80021ee:	4013      	ands	r3, r2
 80021f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80021f2:	683b      	ldr	r3, [r7, #0]
 80021f4:	685b      	ldr	r3, [r3, #4]
 80021f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d003      	beq.n	8002206 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80021fe:	69ba      	ldr	r2, [r7, #24]
 8002200:	693b      	ldr	r3, [r7, #16]
 8002202:	4313      	orrs	r3, r2
 8002204:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002206:	4a1a      	ldr	r2, [pc, #104]	; (8002270 <HAL_GPIO_Init+0x304>)
 8002208:	69bb      	ldr	r3, [r7, #24]
 800220a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800220c:	4b18      	ldr	r3, [pc, #96]	; (8002270 <HAL_GPIO_Init+0x304>)
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002212:	693b      	ldr	r3, [r7, #16]
 8002214:	43db      	mvns	r3, r3
 8002216:	69ba      	ldr	r2, [r7, #24]
 8002218:	4013      	ands	r3, r2
 800221a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	685b      	ldr	r3, [r3, #4]
 8002220:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002224:	2b00      	cmp	r3, #0
 8002226:	d003      	beq.n	8002230 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002228:	69ba      	ldr	r2, [r7, #24]
 800222a:	693b      	ldr	r3, [r7, #16]
 800222c:	4313      	orrs	r3, r2
 800222e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002230:	4a0f      	ldr	r2, [pc, #60]	; (8002270 <HAL_GPIO_Init+0x304>)
 8002232:	69bb      	ldr	r3, [r7, #24]
 8002234:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002236:	69fb      	ldr	r3, [r7, #28]
 8002238:	3301      	adds	r3, #1
 800223a:	61fb      	str	r3, [r7, #28]
 800223c:	69fb      	ldr	r3, [r7, #28]
 800223e:	2b0f      	cmp	r3, #15
 8002240:	f67f aea2 	bls.w	8001f88 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002244:	bf00      	nop
 8002246:	bf00      	nop
 8002248:	3724      	adds	r7, #36	; 0x24
 800224a:	46bd      	mov	sp, r7
 800224c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002250:	4770      	bx	lr
 8002252:	bf00      	nop
 8002254:	40023800 	.word	0x40023800
 8002258:	40013800 	.word	0x40013800
 800225c:	40020000 	.word	0x40020000
 8002260:	40020400 	.word	0x40020400
 8002264:	40020800 	.word	0x40020800
 8002268:	40020c00 	.word	0x40020c00
 800226c:	40021000 	.word	0x40021000
 8002270:	40013c00 	.word	0x40013c00

08002274 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002274:	b480      	push	{r7}
 8002276:	b085      	sub	sp, #20
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
 800227c:	460b      	mov	r3, r1
 800227e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	691a      	ldr	r2, [r3, #16]
 8002284:	887b      	ldrh	r3, [r7, #2]
 8002286:	4013      	ands	r3, r2
 8002288:	2b00      	cmp	r3, #0
 800228a:	d002      	beq.n	8002292 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800228c:	2301      	movs	r3, #1
 800228e:	73fb      	strb	r3, [r7, #15]
 8002290:	e001      	b.n	8002296 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002292:	2300      	movs	r3, #0
 8002294:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002296:	7bfb      	ldrb	r3, [r7, #15]
}
 8002298:	4618      	mov	r0, r3
 800229a:	3714      	adds	r7, #20
 800229c:	46bd      	mov	sp, r7
 800229e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a2:	4770      	bx	lr

080022a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80022a4:	b480      	push	{r7}
 80022a6:	b083      	sub	sp, #12
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
 80022ac:	460b      	mov	r3, r1
 80022ae:	807b      	strh	r3, [r7, #2]
 80022b0:	4613      	mov	r3, r2
 80022b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80022b4:	787b      	ldrb	r3, [r7, #1]
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d003      	beq.n	80022c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80022ba:	887a      	ldrh	r2, [r7, #2]
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80022c0:	e003      	b.n	80022ca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80022c2:	887b      	ldrh	r3, [r7, #2]
 80022c4:	041a      	lsls	r2, r3, #16
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	619a      	str	r2, [r3, #24]
}
 80022ca:	bf00      	nop
 80022cc:	370c      	adds	r7, #12
 80022ce:	46bd      	mov	sp, r7
 80022d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d4:	4770      	bx	lr
	...

080022d8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b084      	sub	sp, #16
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d101      	bne.n	80022ea <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80022e6:	2301      	movs	r3, #1
 80022e8:	e12b      	b.n	8002542 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80022f0:	b2db      	uxtb	r3, r3
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d106      	bne.n	8002304 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	2200      	movs	r2, #0
 80022fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80022fe:	6878      	ldr	r0, [r7, #4]
 8002300:	f7ff f9b6 	bl	8001670 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	2224      	movs	r2, #36	; 0x24
 8002308:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	681a      	ldr	r2, [r3, #0]
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f022 0201 	bic.w	r2, r2, #1
 800231a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	681a      	ldr	r2, [r3, #0]
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800232a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	681a      	ldr	r2, [r3, #0]
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800233a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800233c:	f000 fd40 	bl	8002dc0 <HAL_RCC_GetPCLK1Freq>
 8002340:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	685b      	ldr	r3, [r3, #4]
 8002346:	4a81      	ldr	r2, [pc, #516]	; (800254c <HAL_I2C_Init+0x274>)
 8002348:	4293      	cmp	r3, r2
 800234a:	d807      	bhi.n	800235c <HAL_I2C_Init+0x84>
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	4a80      	ldr	r2, [pc, #512]	; (8002550 <HAL_I2C_Init+0x278>)
 8002350:	4293      	cmp	r3, r2
 8002352:	bf94      	ite	ls
 8002354:	2301      	movls	r3, #1
 8002356:	2300      	movhi	r3, #0
 8002358:	b2db      	uxtb	r3, r3
 800235a:	e006      	b.n	800236a <HAL_I2C_Init+0x92>
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	4a7d      	ldr	r2, [pc, #500]	; (8002554 <HAL_I2C_Init+0x27c>)
 8002360:	4293      	cmp	r3, r2
 8002362:	bf94      	ite	ls
 8002364:	2301      	movls	r3, #1
 8002366:	2300      	movhi	r3, #0
 8002368:	b2db      	uxtb	r3, r3
 800236a:	2b00      	cmp	r3, #0
 800236c:	d001      	beq.n	8002372 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800236e:	2301      	movs	r3, #1
 8002370:	e0e7      	b.n	8002542 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	4a78      	ldr	r2, [pc, #480]	; (8002558 <HAL_I2C_Init+0x280>)
 8002376:	fba2 2303 	umull	r2, r3, r2, r3
 800237a:	0c9b      	lsrs	r3, r3, #18
 800237c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	685b      	ldr	r3, [r3, #4]
 8002384:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	68ba      	ldr	r2, [r7, #8]
 800238e:	430a      	orrs	r2, r1
 8002390:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	6a1b      	ldr	r3, [r3, #32]
 8002398:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	685b      	ldr	r3, [r3, #4]
 80023a0:	4a6a      	ldr	r2, [pc, #424]	; (800254c <HAL_I2C_Init+0x274>)
 80023a2:	4293      	cmp	r3, r2
 80023a4:	d802      	bhi.n	80023ac <HAL_I2C_Init+0xd4>
 80023a6:	68bb      	ldr	r3, [r7, #8]
 80023a8:	3301      	adds	r3, #1
 80023aa:	e009      	b.n	80023c0 <HAL_I2C_Init+0xe8>
 80023ac:	68bb      	ldr	r3, [r7, #8]
 80023ae:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80023b2:	fb02 f303 	mul.w	r3, r2, r3
 80023b6:	4a69      	ldr	r2, [pc, #420]	; (800255c <HAL_I2C_Init+0x284>)
 80023b8:	fba2 2303 	umull	r2, r3, r2, r3
 80023bc:	099b      	lsrs	r3, r3, #6
 80023be:	3301      	adds	r3, #1
 80023c0:	687a      	ldr	r2, [r7, #4]
 80023c2:	6812      	ldr	r2, [r2, #0]
 80023c4:	430b      	orrs	r3, r1
 80023c6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	69db      	ldr	r3, [r3, #28]
 80023ce:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80023d2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	685b      	ldr	r3, [r3, #4]
 80023da:	495c      	ldr	r1, [pc, #368]	; (800254c <HAL_I2C_Init+0x274>)
 80023dc:	428b      	cmp	r3, r1
 80023de:	d819      	bhi.n	8002414 <HAL_I2C_Init+0x13c>
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	1e59      	subs	r1, r3, #1
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	685b      	ldr	r3, [r3, #4]
 80023e8:	005b      	lsls	r3, r3, #1
 80023ea:	fbb1 f3f3 	udiv	r3, r1, r3
 80023ee:	1c59      	adds	r1, r3, #1
 80023f0:	f640 73fc 	movw	r3, #4092	; 0xffc
 80023f4:	400b      	ands	r3, r1
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d00a      	beq.n	8002410 <HAL_I2C_Init+0x138>
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	1e59      	subs	r1, r3, #1
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	685b      	ldr	r3, [r3, #4]
 8002402:	005b      	lsls	r3, r3, #1
 8002404:	fbb1 f3f3 	udiv	r3, r1, r3
 8002408:	3301      	adds	r3, #1
 800240a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800240e:	e051      	b.n	80024b4 <HAL_I2C_Init+0x1dc>
 8002410:	2304      	movs	r3, #4
 8002412:	e04f      	b.n	80024b4 <HAL_I2C_Init+0x1dc>
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	689b      	ldr	r3, [r3, #8]
 8002418:	2b00      	cmp	r3, #0
 800241a:	d111      	bne.n	8002440 <HAL_I2C_Init+0x168>
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	1e58      	subs	r0, r3, #1
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	6859      	ldr	r1, [r3, #4]
 8002424:	460b      	mov	r3, r1
 8002426:	005b      	lsls	r3, r3, #1
 8002428:	440b      	add	r3, r1
 800242a:	fbb0 f3f3 	udiv	r3, r0, r3
 800242e:	3301      	adds	r3, #1
 8002430:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002434:	2b00      	cmp	r3, #0
 8002436:	bf0c      	ite	eq
 8002438:	2301      	moveq	r3, #1
 800243a:	2300      	movne	r3, #0
 800243c:	b2db      	uxtb	r3, r3
 800243e:	e012      	b.n	8002466 <HAL_I2C_Init+0x18e>
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	1e58      	subs	r0, r3, #1
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	6859      	ldr	r1, [r3, #4]
 8002448:	460b      	mov	r3, r1
 800244a:	009b      	lsls	r3, r3, #2
 800244c:	440b      	add	r3, r1
 800244e:	0099      	lsls	r1, r3, #2
 8002450:	440b      	add	r3, r1
 8002452:	fbb0 f3f3 	udiv	r3, r0, r3
 8002456:	3301      	adds	r3, #1
 8002458:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800245c:	2b00      	cmp	r3, #0
 800245e:	bf0c      	ite	eq
 8002460:	2301      	moveq	r3, #1
 8002462:	2300      	movne	r3, #0
 8002464:	b2db      	uxtb	r3, r3
 8002466:	2b00      	cmp	r3, #0
 8002468:	d001      	beq.n	800246e <HAL_I2C_Init+0x196>
 800246a:	2301      	movs	r3, #1
 800246c:	e022      	b.n	80024b4 <HAL_I2C_Init+0x1dc>
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	689b      	ldr	r3, [r3, #8]
 8002472:	2b00      	cmp	r3, #0
 8002474:	d10e      	bne.n	8002494 <HAL_I2C_Init+0x1bc>
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	1e58      	subs	r0, r3, #1
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	6859      	ldr	r1, [r3, #4]
 800247e:	460b      	mov	r3, r1
 8002480:	005b      	lsls	r3, r3, #1
 8002482:	440b      	add	r3, r1
 8002484:	fbb0 f3f3 	udiv	r3, r0, r3
 8002488:	3301      	adds	r3, #1
 800248a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800248e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002492:	e00f      	b.n	80024b4 <HAL_I2C_Init+0x1dc>
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	1e58      	subs	r0, r3, #1
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	6859      	ldr	r1, [r3, #4]
 800249c:	460b      	mov	r3, r1
 800249e:	009b      	lsls	r3, r3, #2
 80024a0:	440b      	add	r3, r1
 80024a2:	0099      	lsls	r1, r3, #2
 80024a4:	440b      	add	r3, r1
 80024a6:	fbb0 f3f3 	udiv	r3, r0, r3
 80024aa:	3301      	adds	r3, #1
 80024ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80024b0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80024b4:	6879      	ldr	r1, [r7, #4]
 80024b6:	6809      	ldr	r1, [r1, #0]
 80024b8:	4313      	orrs	r3, r2
 80024ba:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	69da      	ldr	r2, [r3, #28]
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	6a1b      	ldr	r3, [r3, #32]
 80024ce:	431a      	orrs	r2, r3
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	430a      	orrs	r2, r1
 80024d6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	689b      	ldr	r3, [r3, #8]
 80024de:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80024e2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80024e6:	687a      	ldr	r2, [r7, #4]
 80024e8:	6911      	ldr	r1, [r2, #16]
 80024ea:	687a      	ldr	r2, [r7, #4]
 80024ec:	68d2      	ldr	r2, [r2, #12]
 80024ee:	4311      	orrs	r1, r2
 80024f0:	687a      	ldr	r2, [r7, #4]
 80024f2:	6812      	ldr	r2, [r2, #0]
 80024f4:	430b      	orrs	r3, r1
 80024f6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	68db      	ldr	r3, [r3, #12]
 80024fe:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	695a      	ldr	r2, [r3, #20]
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	699b      	ldr	r3, [r3, #24]
 800250a:	431a      	orrs	r2, r3
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	430a      	orrs	r2, r1
 8002512:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	681a      	ldr	r2, [r3, #0]
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f042 0201 	orr.w	r2, r2, #1
 8002522:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	2200      	movs	r2, #0
 8002528:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	2220      	movs	r2, #32
 800252e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	2200      	movs	r2, #0
 8002536:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	2200      	movs	r2, #0
 800253c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002540:	2300      	movs	r3, #0
}
 8002542:	4618      	mov	r0, r3
 8002544:	3710      	adds	r7, #16
 8002546:	46bd      	mov	sp, r7
 8002548:	bd80      	pop	{r7, pc}
 800254a:	bf00      	nop
 800254c:	000186a0 	.word	0x000186a0
 8002550:	001e847f 	.word	0x001e847f
 8002554:	003d08ff 	.word	0x003d08ff
 8002558:	431bde83 	.word	0x431bde83
 800255c:	10624dd3 	.word	0x10624dd3

08002560 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	b086      	sub	sp, #24
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	2b00      	cmp	r3, #0
 800256c:	d101      	bne.n	8002572 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800256e:	2301      	movs	r3, #1
 8002570:	e267      	b.n	8002a42 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f003 0301 	and.w	r3, r3, #1
 800257a:	2b00      	cmp	r3, #0
 800257c:	d075      	beq.n	800266a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800257e:	4b88      	ldr	r3, [pc, #544]	; (80027a0 <HAL_RCC_OscConfig+0x240>)
 8002580:	689b      	ldr	r3, [r3, #8]
 8002582:	f003 030c 	and.w	r3, r3, #12
 8002586:	2b04      	cmp	r3, #4
 8002588:	d00c      	beq.n	80025a4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800258a:	4b85      	ldr	r3, [pc, #532]	; (80027a0 <HAL_RCC_OscConfig+0x240>)
 800258c:	689b      	ldr	r3, [r3, #8]
 800258e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002592:	2b08      	cmp	r3, #8
 8002594:	d112      	bne.n	80025bc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002596:	4b82      	ldr	r3, [pc, #520]	; (80027a0 <HAL_RCC_OscConfig+0x240>)
 8002598:	685b      	ldr	r3, [r3, #4]
 800259a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800259e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80025a2:	d10b      	bne.n	80025bc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025a4:	4b7e      	ldr	r3, [pc, #504]	; (80027a0 <HAL_RCC_OscConfig+0x240>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d05b      	beq.n	8002668 <HAL_RCC_OscConfig+0x108>
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	685b      	ldr	r3, [r3, #4]
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d157      	bne.n	8002668 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80025b8:	2301      	movs	r3, #1
 80025ba:	e242      	b.n	8002a42 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	685b      	ldr	r3, [r3, #4]
 80025c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80025c4:	d106      	bne.n	80025d4 <HAL_RCC_OscConfig+0x74>
 80025c6:	4b76      	ldr	r3, [pc, #472]	; (80027a0 <HAL_RCC_OscConfig+0x240>)
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	4a75      	ldr	r2, [pc, #468]	; (80027a0 <HAL_RCC_OscConfig+0x240>)
 80025cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025d0:	6013      	str	r3, [r2, #0]
 80025d2:	e01d      	b.n	8002610 <HAL_RCC_OscConfig+0xb0>
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	685b      	ldr	r3, [r3, #4]
 80025d8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80025dc:	d10c      	bne.n	80025f8 <HAL_RCC_OscConfig+0x98>
 80025de:	4b70      	ldr	r3, [pc, #448]	; (80027a0 <HAL_RCC_OscConfig+0x240>)
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	4a6f      	ldr	r2, [pc, #444]	; (80027a0 <HAL_RCC_OscConfig+0x240>)
 80025e4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80025e8:	6013      	str	r3, [r2, #0]
 80025ea:	4b6d      	ldr	r3, [pc, #436]	; (80027a0 <HAL_RCC_OscConfig+0x240>)
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	4a6c      	ldr	r2, [pc, #432]	; (80027a0 <HAL_RCC_OscConfig+0x240>)
 80025f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025f4:	6013      	str	r3, [r2, #0]
 80025f6:	e00b      	b.n	8002610 <HAL_RCC_OscConfig+0xb0>
 80025f8:	4b69      	ldr	r3, [pc, #420]	; (80027a0 <HAL_RCC_OscConfig+0x240>)
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	4a68      	ldr	r2, [pc, #416]	; (80027a0 <HAL_RCC_OscConfig+0x240>)
 80025fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002602:	6013      	str	r3, [r2, #0]
 8002604:	4b66      	ldr	r3, [pc, #408]	; (80027a0 <HAL_RCC_OscConfig+0x240>)
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	4a65      	ldr	r2, [pc, #404]	; (80027a0 <HAL_RCC_OscConfig+0x240>)
 800260a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800260e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	685b      	ldr	r3, [r3, #4]
 8002614:	2b00      	cmp	r3, #0
 8002616:	d013      	beq.n	8002640 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002618:	f7ff fb92 	bl	8001d40 <HAL_GetTick>
 800261c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800261e:	e008      	b.n	8002632 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002620:	f7ff fb8e 	bl	8001d40 <HAL_GetTick>
 8002624:	4602      	mov	r2, r0
 8002626:	693b      	ldr	r3, [r7, #16]
 8002628:	1ad3      	subs	r3, r2, r3
 800262a:	2b64      	cmp	r3, #100	; 0x64
 800262c:	d901      	bls.n	8002632 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800262e:	2303      	movs	r3, #3
 8002630:	e207      	b.n	8002a42 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002632:	4b5b      	ldr	r3, [pc, #364]	; (80027a0 <HAL_RCC_OscConfig+0x240>)
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800263a:	2b00      	cmp	r3, #0
 800263c:	d0f0      	beq.n	8002620 <HAL_RCC_OscConfig+0xc0>
 800263e:	e014      	b.n	800266a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002640:	f7ff fb7e 	bl	8001d40 <HAL_GetTick>
 8002644:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002646:	e008      	b.n	800265a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002648:	f7ff fb7a 	bl	8001d40 <HAL_GetTick>
 800264c:	4602      	mov	r2, r0
 800264e:	693b      	ldr	r3, [r7, #16]
 8002650:	1ad3      	subs	r3, r2, r3
 8002652:	2b64      	cmp	r3, #100	; 0x64
 8002654:	d901      	bls.n	800265a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002656:	2303      	movs	r3, #3
 8002658:	e1f3      	b.n	8002a42 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800265a:	4b51      	ldr	r3, [pc, #324]	; (80027a0 <HAL_RCC_OscConfig+0x240>)
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002662:	2b00      	cmp	r3, #0
 8002664:	d1f0      	bne.n	8002648 <HAL_RCC_OscConfig+0xe8>
 8002666:	e000      	b.n	800266a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002668:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f003 0302 	and.w	r3, r3, #2
 8002672:	2b00      	cmp	r3, #0
 8002674:	d063      	beq.n	800273e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002676:	4b4a      	ldr	r3, [pc, #296]	; (80027a0 <HAL_RCC_OscConfig+0x240>)
 8002678:	689b      	ldr	r3, [r3, #8]
 800267a:	f003 030c 	and.w	r3, r3, #12
 800267e:	2b00      	cmp	r3, #0
 8002680:	d00b      	beq.n	800269a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002682:	4b47      	ldr	r3, [pc, #284]	; (80027a0 <HAL_RCC_OscConfig+0x240>)
 8002684:	689b      	ldr	r3, [r3, #8]
 8002686:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800268a:	2b08      	cmp	r3, #8
 800268c:	d11c      	bne.n	80026c8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800268e:	4b44      	ldr	r3, [pc, #272]	; (80027a0 <HAL_RCC_OscConfig+0x240>)
 8002690:	685b      	ldr	r3, [r3, #4]
 8002692:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002696:	2b00      	cmp	r3, #0
 8002698:	d116      	bne.n	80026c8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800269a:	4b41      	ldr	r3, [pc, #260]	; (80027a0 <HAL_RCC_OscConfig+0x240>)
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f003 0302 	and.w	r3, r3, #2
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d005      	beq.n	80026b2 <HAL_RCC_OscConfig+0x152>
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	68db      	ldr	r3, [r3, #12]
 80026aa:	2b01      	cmp	r3, #1
 80026ac:	d001      	beq.n	80026b2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80026ae:	2301      	movs	r3, #1
 80026b0:	e1c7      	b.n	8002a42 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026b2:	4b3b      	ldr	r3, [pc, #236]	; (80027a0 <HAL_RCC_OscConfig+0x240>)
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	691b      	ldr	r3, [r3, #16]
 80026be:	00db      	lsls	r3, r3, #3
 80026c0:	4937      	ldr	r1, [pc, #220]	; (80027a0 <HAL_RCC_OscConfig+0x240>)
 80026c2:	4313      	orrs	r3, r2
 80026c4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80026c6:	e03a      	b.n	800273e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	68db      	ldr	r3, [r3, #12]
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d020      	beq.n	8002712 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80026d0:	4b34      	ldr	r3, [pc, #208]	; (80027a4 <HAL_RCC_OscConfig+0x244>)
 80026d2:	2201      	movs	r2, #1
 80026d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026d6:	f7ff fb33 	bl	8001d40 <HAL_GetTick>
 80026da:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026dc:	e008      	b.n	80026f0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80026de:	f7ff fb2f 	bl	8001d40 <HAL_GetTick>
 80026e2:	4602      	mov	r2, r0
 80026e4:	693b      	ldr	r3, [r7, #16]
 80026e6:	1ad3      	subs	r3, r2, r3
 80026e8:	2b02      	cmp	r3, #2
 80026ea:	d901      	bls.n	80026f0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80026ec:	2303      	movs	r3, #3
 80026ee:	e1a8      	b.n	8002a42 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026f0:	4b2b      	ldr	r3, [pc, #172]	; (80027a0 <HAL_RCC_OscConfig+0x240>)
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f003 0302 	and.w	r3, r3, #2
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d0f0      	beq.n	80026de <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026fc:	4b28      	ldr	r3, [pc, #160]	; (80027a0 <HAL_RCC_OscConfig+0x240>)
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	691b      	ldr	r3, [r3, #16]
 8002708:	00db      	lsls	r3, r3, #3
 800270a:	4925      	ldr	r1, [pc, #148]	; (80027a0 <HAL_RCC_OscConfig+0x240>)
 800270c:	4313      	orrs	r3, r2
 800270e:	600b      	str	r3, [r1, #0]
 8002710:	e015      	b.n	800273e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002712:	4b24      	ldr	r3, [pc, #144]	; (80027a4 <HAL_RCC_OscConfig+0x244>)
 8002714:	2200      	movs	r2, #0
 8002716:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002718:	f7ff fb12 	bl	8001d40 <HAL_GetTick>
 800271c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800271e:	e008      	b.n	8002732 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002720:	f7ff fb0e 	bl	8001d40 <HAL_GetTick>
 8002724:	4602      	mov	r2, r0
 8002726:	693b      	ldr	r3, [r7, #16]
 8002728:	1ad3      	subs	r3, r2, r3
 800272a:	2b02      	cmp	r3, #2
 800272c:	d901      	bls.n	8002732 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800272e:	2303      	movs	r3, #3
 8002730:	e187      	b.n	8002a42 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002732:	4b1b      	ldr	r3, [pc, #108]	; (80027a0 <HAL_RCC_OscConfig+0x240>)
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f003 0302 	and.w	r3, r3, #2
 800273a:	2b00      	cmp	r3, #0
 800273c:	d1f0      	bne.n	8002720 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f003 0308 	and.w	r3, r3, #8
 8002746:	2b00      	cmp	r3, #0
 8002748:	d036      	beq.n	80027b8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	695b      	ldr	r3, [r3, #20]
 800274e:	2b00      	cmp	r3, #0
 8002750:	d016      	beq.n	8002780 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002752:	4b15      	ldr	r3, [pc, #84]	; (80027a8 <HAL_RCC_OscConfig+0x248>)
 8002754:	2201      	movs	r2, #1
 8002756:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002758:	f7ff faf2 	bl	8001d40 <HAL_GetTick>
 800275c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800275e:	e008      	b.n	8002772 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002760:	f7ff faee 	bl	8001d40 <HAL_GetTick>
 8002764:	4602      	mov	r2, r0
 8002766:	693b      	ldr	r3, [r7, #16]
 8002768:	1ad3      	subs	r3, r2, r3
 800276a:	2b02      	cmp	r3, #2
 800276c:	d901      	bls.n	8002772 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800276e:	2303      	movs	r3, #3
 8002770:	e167      	b.n	8002a42 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002772:	4b0b      	ldr	r3, [pc, #44]	; (80027a0 <HAL_RCC_OscConfig+0x240>)
 8002774:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002776:	f003 0302 	and.w	r3, r3, #2
 800277a:	2b00      	cmp	r3, #0
 800277c:	d0f0      	beq.n	8002760 <HAL_RCC_OscConfig+0x200>
 800277e:	e01b      	b.n	80027b8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002780:	4b09      	ldr	r3, [pc, #36]	; (80027a8 <HAL_RCC_OscConfig+0x248>)
 8002782:	2200      	movs	r2, #0
 8002784:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002786:	f7ff fadb 	bl	8001d40 <HAL_GetTick>
 800278a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800278c:	e00e      	b.n	80027ac <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800278e:	f7ff fad7 	bl	8001d40 <HAL_GetTick>
 8002792:	4602      	mov	r2, r0
 8002794:	693b      	ldr	r3, [r7, #16]
 8002796:	1ad3      	subs	r3, r2, r3
 8002798:	2b02      	cmp	r3, #2
 800279a:	d907      	bls.n	80027ac <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800279c:	2303      	movs	r3, #3
 800279e:	e150      	b.n	8002a42 <HAL_RCC_OscConfig+0x4e2>
 80027a0:	40023800 	.word	0x40023800
 80027a4:	42470000 	.word	0x42470000
 80027a8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80027ac:	4b88      	ldr	r3, [pc, #544]	; (80029d0 <HAL_RCC_OscConfig+0x470>)
 80027ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80027b0:	f003 0302 	and.w	r3, r3, #2
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d1ea      	bne.n	800278e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f003 0304 	and.w	r3, r3, #4
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	f000 8097 	beq.w	80028f4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80027c6:	2300      	movs	r3, #0
 80027c8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80027ca:	4b81      	ldr	r3, [pc, #516]	; (80029d0 <HAL_RCC_OscConfig+0x470>)
 80027cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d10f      	bne.n	80027f6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80027d6:	2300      	movs	r3, #0
 80027d8:	60bb      	str	r3, [r7, #8]
 80027da:	4b7d      	ldr	r3, [pc, #500]	; (80029d0 <HAL_RCC_OscConfig+0x470>)
 80027dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027de:	4a7c      	ldr	r2, [pc, #496]	; (80029d0 <HAL_RCC_OscConfig+0x470>)
 80027e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027e4:	6413      	str	r3, [r2, #64]	; 0x40
 80027e6:	4b7a      	ldr	r3, [pc, #488]	; (80029d0 <HAL_RCC_OscConfig+0x470>)
 80027e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027ee:	60bb      	str	r3, [r7, #8]
 80027f0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80027f2:	2301      	movs	r3, #1
 80027f4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027f6:	4b77      	ldr	r3, [pc, #476]	; (80029d4 <HAL_RCC_OscConfig+0x474>)
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d118      	bne.n	8002834 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002802:	4b74      	ldr	r3, [pc, #464]	; (80029d4 <HAL_RCC_OscConfig+0x474>)
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	4a73      	ldr	r2, [pc, #460]	; (80029d4 <HAL_RCC_OscConfig+0x474>)
 8002808:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800280c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800280e:	f7ff fa97 	bl	8001d40 <HAL_GetTick>
 8002812:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002814:	e008      	b.n	8002828 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002816:	f7ff fa93 	bl	8001d40 <HAL_GetTick>
 800281a:	4602      	mov	r2, r0
 800281c:	693b      	ldr	r3, [r7, #16]
 800281e:	1ad3      	subs	r3, r2, r3
 8002820:	2b02      	cmp	r3, #2
 8002822:	d901      	bls.n	8002828 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002824:	2303      	movs	r3, #3
 8002826:	e10c      	b.n	8002a42 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002828:	4b6a      	ldr	r3, [pc, #424]	; (80029d4 <HAL_RCC_OscConfig+0x474>)
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002830:	2b00      	cmp	r3, #0
 8002832:	d0f0      	beq.n	8002816 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	689b      	ldr	r3, [r3, #8]
 8002838:	2b01      	cmp	r3, #1
 800283a:	d106      	bne.n	800284a <HAL_RCC_OscConfig+0x2ea>
 800283c:	4b64      	ldr	r3, [pc, #400]	; (80029d0 <HAL_RCC_OscConfig+0x470>)
 800283e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002840:	4a63      	ldr	r2, [pc, #396]	; (80029d0 <HAL_RCC_OscConfig+0x470>)
 8002842:	f043 0301 	orr.w	r3, r3, #1
 8002846:	6713      	str	r3, [r2, #112]	; 0x70
 8002848:	e01c      	b.n	8002884 <HAL_RCC_OscConfig+0x324>
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	689b      	ldr	r3, [r3, #8]
 800284e:	2b05      	cmp	r3, #5
 8002850:	d10c      	bne.n	800286c <HAL_RCC_OscConfig+0x30c>
 8002852:	4b5f      	ldr	r3, [pc, #380]	; (80029d0 <HAL_RCC_OscConfig+0x470>)
 8002854:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002856:	4a5e      	ldr	r2, [pc, #376]	; (80029d0 <HAL_RCC_OscConfig+0x470>)
 8002858:	f043 0304 	orr.w	r3, r3, #4
 800285c:	6713      	str	r3, [r2, #112]	; 0x70
 800285e:	4b5c      	ldr	r3, [pc, #368]	; (80029d0 <HAL_RCC_OscConfig+0x470>)
 8002860:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002862:	4a5b      	ldr	r2, [pc, #364]	; (80029d0 <HAL_RCC_OscConfig+0x470>)
 8002864:	f043 0301 	orr.w	r3, r3, #1
 8002868:	6713      	str	r3, [r2, #112]	; 0x70
 800286a:	e00b      	b.n	8002884 <HAL_RCC_OscConfig+0x324>
 800286c:	4b58      	ldr	r3, [pc, #352]	; (80029d0 <HAL_RCC_OscConfig+0x470>)
 800286e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002870:	4a57      	ldr	r2, [pc, #348]	; (80029d0 <HAL_RCC_OscConfig+0x470>)
 8002872:	f023 0301 	bic.w	r3, r3, #1
 8002876:	6713      	str	r3, [r2, #112]	; 0x70
 8002878:	4b55      	ldr	r3, [pc, #340]	; (80029d0 <HAL_RCC_OscConfig+0x470>)
 800287a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800287c:	4a54      	ldr	r2, [pc, #336]	; (80029d0 <HAL_RCC_OscConfig+0x470>)
 800287e:	f023 0304 	bic.w	r3, r3, #4
 8002882:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	689b      	ldr	r3, [r3, #8]
 8002888:	2b00      	cmp	r3, #0
 800288a:	d015      	beq.n	80028b8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800288c:	f7ff fa58 	bl	8001d40 <HAL_GetTick>
 8002890:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002892:	e00a      	b.n	80028aa <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002894:	f7ff fa54 	bl	8001d40 <HAL_GetTick>
 8002898:	4602      	mov	r2, r0
 800289a:	693b      	ldr	r3, [r7, #16]
 800289c:	1ad3      	subs	r3, r2, r3
 800289e:	f241 3288 	movw	r2, #5000	; 0x1388
 80028a2:	4293      	cmp	r3, r2
 80028a4:	d901      	bls.n	80028aa <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80028a6:	2303      	movs	r3, #3
 80028a8:	e0cb      	b.n	8002a42 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028aa:	4b49      	ldr	r3, [pc, #292]	; (80029d0 <HAL_RCC_OscConfig+0x470>)
 80028ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028ae:	f003 0302 	and.w	r3, r3, #2
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d0ee      	beq.n	8002894 <HAL_RCC_OscConfig+0x334>
 80028b6:	e014      	b.n	80028e2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028b8:	f7ff fa42 	bl	8001d40 <HAL_GetTick>
 80028bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028be:	e00a      	b.n	80028d6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80028c0:	f7ff fa3e 	bl	8001d40 <HAL_GetTick>
 80028c4:	4602      	mov	r2, r0
 80028c6:	693b      	ldr	r3, [r7, #16]
 80028c8:	1ad3      	subs	r3, r2, r3
 80028ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80028ce:	4293      	cmp	r3, r2
 80028d0:	d901      	bls.n	80028d6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80028d2:	2303      	movs	r3, #3
 80028d4:	e0b5      	b.n	8002a42 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028d6:	4b3e      	ldr	r3, [pc, #248]	; (80029d0 <HAL_RCC_OscConfig+0x470>)
 80028d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028da:	f003 0302 	and.w	r3, r3, #2
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d1ee      	bne.n	80028c0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80028e2:	7dfb      	ldrb	r3, [r7, #23]
 80028e4:	2b01      	cmp	r3, #1
 80028e6:	d105      	bne.n	80028f4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80028e8:	4b39      	ldr	r3, [pc, #228]	; (80029d0 <HAL_RCC_OscConfig+0x470>)
 80028ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ec:	4a38      	ldr	r2, [pc, #224]	; (80029d0 <HAL_RCC_OscConfig+0x470>)
 80028ee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80028f2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	699b      	ldr	r3, [r3, #24]
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	f000 80a1 	beq.w	8002a40 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80028fe:	4b34      	ldr	r3, [pc, #208]	; (80029d0 <HAL_RCC_OscConfig+0x470>)
 8002900:	689b      	ldr	r3, [r3, #8]
 8002902:	f003 030c 	and.w	r3, r3, #12
 8002906:	2b08      	cmp	r3, #8
 8002908:	d05c      	beq.n	80029c4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	699b      	ldr	r3, [r3, #24]
 800290e:	2b02      	cmp	r3, #2
 8002910:	d141      	bne.n	8002996 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002912:	4b31      	ldr	r3, [pc, #196]	; (80029d8 <HAL_RCC_OscConfig+0x478>)
 8002914:	2200      	movs	r2, #0
 8002916:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002918:	f7ff fa12 	bl	8001d40 <HAL_GetTick>
 800291c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800291e:	e008      	b.n	8002932 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002920:	f7ff fa0e 	bl	8001d40 <HAL_GetTick>
 8002924:	4602      	mov	r2, r0
 8002926:	693b      	ldr	r3, [r7, #16]
 8002928:	1ad3      	subs	r3, r2, r3
 800292a:	2b02      	cmp	r3, #2
 800292c:	d901      	bls.n	8002932 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800292e:	2303      	movs	r3, #3
 8002930:	e087      	b.n	8002a42 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002932:	4b27      	ldr	r3, [pc, #156]	; (80029d0 <HAL_RCC_OscConfig+0x470>)
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800293a:	2b00      	cmp	r3, #0
 800293c:	d1f0      	bne.n	8002920 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	69da      	ldr	r2, [r3, #28]
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6a1b      	ldr	r3, [r3, #32]
 8002946:	431a      	orrs	r2, r3
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800294c:	019b      	lsls	r3, r3, #6
 800294e:	431a      	orrs	r2, r3
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002954:	085b      	lsrs	r3, r3, #1
 8002956:	3b01      	subs	r3, #1
 8002958:	041b      	lsls	r3, r3, #16
 800295a:	431a      	orrs	r2, r3
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002960:	061b      	lsls	r3, r3, #24
 8002962:	491b      	ldr	r1, [pc, #108]	; (80029d0 <HAL_RCC_OscConfig+0x470>)
 8002964:	4313      	orrs	r3, r2
 8002966:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002968:	4b1b      	ldr	r3, [pc, #108]	; (80029d8 <HAL_RCC_OscConfig+0x478>)
 800296a:	2201      	movs	r2, #1
 800296c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800296e:	f7ff f9e7 	bl	8001d40 <HAL_GetTick>
 8002972:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002974:	e008      	b.n	8002988 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002976:	f7ff f9e3 	bl	8001d40 <HAL_GetTick>
 800297a:	4602      	mov	r2, r0
 800297c:	693b      	ldr	r3, [r7, #16]
 800297e:	1ad3      	subs	r3, r2, r3
 8002980:	2b02      	cmp	r3, #2
 8002982:	d901      	bls.n	8002988 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002984:	2303      	movs	r3, #3
 8002986:	e05c      	b.n	8002a42 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002988:	4b11      	ldr	r3, [pc, #68]	; (80029d0 <HAL_RCC_OscConfig+0x470>)
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002990:	2b00      	cmp	r3, #0
 8002992:	d0f0      	beq.n	8002976 <HAL_RCC_OscConfig+0x416>
 8002994:	e054      	b.n	8002a40 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002996:	4b10      	ldr	r3, [pc, #64]	; (80029d8 <HAL_RCC_OscConfig+0x478>)
 8002998:	2200      	movs	r2, #0
 800299a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800299c:	f7ff f9d0 	bl	8001d40 <HAL_GetTick>
 80029a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029a2:	e008      	b.n	80029b6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029a4:	f7ff f9cc 	bl	8001d40 <HAL_GetTick>
 80029a8:	4602      	mov	r2, r0
 80029aa:	693b      	ldr	r3, [r7, #16]
 80029ac:	1ad3      	subs	r3, r2, r3
 80029ae:	2b02      	cmp	r3, #2
 80029b0:	d901      	bls.n	80029b6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80029b2:	2303      	movs	r3, #3
 80029b4:	e045      	b.n	8002a42 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029b6:	4b06      	ldr	r3, [pc, #24]	; (80029d0 <HAL_RCC_OscConfig+0x470>)
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d1f0      	bne.n	80029a4 <HAL_RCC_OscConfig+0x444>
 80029c2:	e03d      	b.n	8002a40 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	699b      	ldr	r3, [r3, #24]
 80029c8:	2b01      	cmp	r3, #1
 80029ca:	d107      	bne.n	80029dc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80029cc:	2301      	movs	r3, #1
 80029ce:	e038      	b.n	8002a42 <HAL_RCC_OscConfig+0x4e2>
 80029d0:	40023800 	.word	0x40023800
 80029d4:	40007000 	.word	0x40007000
 80029d8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80029dc:	4b1b      	ldr	r3, [pc, #108]	; (8002a4c <HAL_RCC_OscConfig+0x4ec>)
 80029de:	685b      	ldr	r3, [r3, #4]
 80029e0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	699b      	ldr	r3, [r3, #24]
 80029e6:	2b01      	cmp	r3, #1
 80029e8:	d028      	beq.n	8002a3c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80029f4:	429a      	cmp	r2, r3
 80029f6:	d121      	bne.n	8002a3c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a02:	429a      	cmp	r2, r3
 8002a04:	d11a      	bne.n	8002a3c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002a06:	68fa      	ldr	r2, [r7, #12]
 8002a08:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002a0c:	4013      	ands	r3, r2
 8002a0e:	687a      	ldr	r2, [r7, #4]
 8002a10:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002a12:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002a14:	4293      	cmp	r3, r2
 8002a16:	d111      	bne.n	8002a3c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a22:	085b      	lsrs	r3, r3, #1
 8002a24:	3b01      	subs	r3, #1
 8002a26:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002a28:	429a      	cmp	r2, r3
 8002a2a:	d107      	bne.n	8002a3c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a36:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002a38:	429a      	cmp	r2, r3
 8002a3a:	d001      	beq.n	8002a40 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002a3c:	2301      	movs	r3, #1
 8002a3e:	e000      	b.n	8002a42 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002a40:	2300      	movs	r3, #0
}
 8002a42:	4618      	mov	r0, r3
 8002a44:	3718      	adds	r7, #24
 8002a46:	46bd      	mov	sp, r7
 8002a48:	bd80      	pop	{r7, pc}
 8002a4a:	bf00      	nop
 8002a4c:	40023800 	.word	0x40023800

08002a50 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b084      	sub	sp, #16
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
 8002a58:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d101      	bne.n	8002a64 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002a60:	2301      	movs	r3, #1
 8002a62:	e0cc      	b.n	8002bfe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002a64:	4b68      	ldr	r3, [pc, #416]	; (8002c08 <HAL_RCC_ClockConfig+0x1b8>)
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f003 0307 	and.w	r3, r3, #7
 8002a6c:	683a      	ldr	r2, [r7, #0]
 8002a6e:	429a      	cmp	r2, r3
 8002a70:	d90c      	bls.n	8002a8c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a72:	4b65      	ldr	r3, [pc, #404]	; (8002c08 <HAL_RCC_ClockConfig+0x1b8>)
 8002a74:	683a      	ldr	r2, [r7, #0]
 8002a76:	b2d2      	uxtb	r2, r2
 8002a78:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a7a:	4b63      	ldr	r3, [pc, #396]	; (8002c08 <HAL_RCC_ClockConfig+0x1b8>)
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f003 0307 	and.w	r3, r3, #7
 8002a82:	683a      	ldr	r2, [r7, #0]
 8002a84:	429a      	cmp	r2, r3
 8002a86:	d001      	beq.n	8002a8c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002a88:	2301      	movs	r3, #1
 8002a8a:	e0b8      	b.n	8002bfe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f003 0302 	and.w	r3, r3, #2
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d020      	beq.n	8002ada <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f003 0304 	and.w	r3, r3, #4
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d005      	beq.n	8002ab0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002aa4:	4b59      	ldr	r3, [pc, #356]	; (8002c0c <HAL_RCC_ClockConfig+0x1bc>)
 8002aa6:	689b      	ldr	r3, [r3, #8]
 8002aa8:	4a58      	ldr	r2, [pc, #352]	; (8002c0c <HAL_RCC_ClockConfig+0x1bc>)
 8002aaa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002aae:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f003 0308 	and.w	r3, r3, #8
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d005      	beq.n	8002ac8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002abc:	4b53      	ldr	r3, [pc, #332]	; (8002c0c <HAL_RCC_ClockConfig+0x1bc>)
 8002abe:	689b      	ldr	r3, [r3, #8]
 8002ac0:	4a52      	ldr	r2, [pc, #328]	; (8002c0c <HAL_RCC_ClockConfig+0x1bc>)
 8002ac2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002ac6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ac8:	4b50      	ldr	r3, [pc, #320]	; (8002c0c <HAL_RCC_ClockConfig+0x1bc>)
 8002aca:	689b      	ldr	r3, [r3, #8]
 8002acc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	689b      	ldr	r3, [r3, #8]
 8002ad4:	494d      	ldr	r1, [pc, #308]	; (8002c0c <HAL_RCC_ClockConfig+0x1bc>)
 8002ad6:	4313      	orrs	r3, r2
 8002ad8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f003 0301 	and.w	r3, r3, #1
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d044      	beq.n	8002b70 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	685b      	ldr	r3, [r3, #4]
 8002aea:	2b01      	cmp	r3, #1
 8002aec:	d107      	bne.n	8002afe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002aee:	4b47      	ldr	r3, [pc, #284]	; (8002c0c <HAL_RCC_ClockConfig+0x1bc>)
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d119      	bne.n	8002b2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002afa:	2301      	movs	r3, #1
 8002afc:	e07f      	b.n	8002bfe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	685b      	ldr	r3, [r3, #4]
 8002b02:	2b02      	cmp	r3, #2
 8002b04:	d003      	beq.n	8002b0e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002b0a:	2b03      	cmp	r3, #3
 8002b0c:	d107      	bne.n	8002b1e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b0e:	4b3f      	ldr	r3, [pc, #252]	; (8002c0c <HAL_RCC_ClockConfig+0x1bc>)
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d109      	bne.n	8002b2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b1a:	2301      	movs	r3, #1
 8002b1c:	e06f      	b.n	8002bfe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b1e:	4b3b      	ldr	r3, [pc, #236]	; (8002c0c <HAL_RCC_ClockConfig+0x1bc>)
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f003 0302 	and.w	r3, r3, #2
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d101      	bne.n	8002b2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b2a:	2301      	movs	r3, #1
 8002b2c:	e067      	b.n	8002bfe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002b2e:	4b37      	ldr	r3, [pc, #220]	; (8002c0c <HAL_RCC_ClockConfig+0x1bc>)
 8002b30:	689b      	ldr	r3, [r3, #8]
 8002b32:	f023 0203 	bic.w	r2, r3, #3
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	685b      	ldr	r3, [r3, #4]
 8002b3a:	4934      	ldr	r1, [pc, #208]	; (8002c0c <HAL_RCC_ClockConfig+0x1bc>)
 8002b3c:	4313      	orrs	r3, r2
 8002b3e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002b40:	f7ff f8fe 	bl	8001d40 <HAL_GetTick>
 8002b44:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b46:	e00a      	b.n	8002b5e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b48:	f7ff f8fa 	bl	8001d40 <HAL_GetTick>
 8002b4c:	4602      	mov	r2, r0
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	1ad3      	subs	r3, r2, r3
 8002b52:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b56:	4293      	cmp	r3, r2
 8002b58:	d901      	bls.n	8002b5e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002b5a:	2303      	movs	r3, #3
 8002b5c:	e04f      	b.n	8002bfe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b5e:	4b2b      	ldr	r3, [pc, #172]	; (8002c0c <HAL_RCC_ClockConfig+0x1bc>)
 8002b60:	689b      	ldr	r3, [r3, #8]
 8002b62:	f003 020c 	and.w	r2, r3, #12
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	685b      	ldr	r3, [r3, #4]
 8002b6a:	009b      	lsls	r3, r3, #2
 8002b6c:	429a      	cmp	r2, r3
 8002b6e:	d1eb      	bne.n	8002b48 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002b70:	4b25      	ldr	r3, [pc, #148]	; (8002c08 <HAL_RCC_ClockConfig+0x1b8>)
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f003 0307 	and.w	r3, r3, #7
 8002b78:	683a      	ldr	r2, [r7, #0]
 8002b7a:	429a      	cmp	r2, r3
 8002b7c:	d20c      	bcs.n	8002b98 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b7e:	4b22      	ldr	r3, [pc, #136]	; (8002c08 <HAL_RCC_ClockConfig+0x1b8>)
 8002b80:	683a      	ldr	r2, [r7, #0]
 8002b82:	b2d2      	uxtb	r2, r2
 8002b84:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b86:	4b20      	ldr	r3, [pc, #128]	; (8002c08 <HAL_RCC_ClockConfig+0x1b8>)
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f003 0307 	and.w	r3, r3, #7
 8002b8e:	683a      	ldr	r2, [r7, #0]
 8002b90:	429a      	cmp	r2, r3
 8002b92:	d001      	beq.n	8002b98 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002b94:	2301      	movs	r3, #1
 8002b96:	e032      	b.n	8002bfe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f003 0304 	and.w	r3, r3, #4
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d008      	beq.n	8002bb6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ba4:	4b19      	ldr	r3, [pc, #100]	; (8002c0c <HAL_RCC_ClockConfig+0x1bc>)
 8002ba6:	689b      	ldr	r3, [r3, #8]
 8002ba8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	68db      	ldr	r3, [r3, #12]
 8002bb0:	4916      	ldr	r1, [pc, #88]	; (8002c0c <HAL_RCC_ClockConfig+0x1bc>)
 8002bb2:	4313      	orrs	r3, r2
 8002bb4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f003 0308 	and.w	r3, r3, #8
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d009      	beq.n	8002bd6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002bc2:	4b12      	ldr	r3, [pc, #72]	; (8002c0c <HAL_RCC_ClockConfig+0x1bc>)
 8002bc4:	689b      	ldr	r3, [r3, #8]
 8002bc6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	691b      	ldr	r3, [r3, #16]
 8002bce:	00db      	lsls	r3, r3, #3
 8002bd0:	490e      	ldr	r1, [pc, #56]	; (8002c0c <HAL_RCC_ClockConfig+0x1bc>)
 8002bd2:	4313      	orrs	r3, r2
 8002bd4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002bd6:	f000 f821 	bl	8002c1c <HAL_RCC_GetSysClockFreq>
 8002bda:	4602      	mov	r2, r0
 8002bdc:	4b0b      	ldr	r3, [pc, #44]	; (8002c0c <HAL_RCC_ClockConfig+0x1bc>)
 8002bde:	689b      	ldr	r3, [r3, #8]
 8002be0:	091b      	lsrs	r3, r3, #4
 8002be2:	f003 030f 	and.w	r3, r3, #15
 8002be6:	490a      	ldr	r1, [pc, #40]	; (8002c10 <HAL_RCC_ClockConfig+0x1c0>)
 8002be8:	5ccb      	ldrb	r3, [r1, r3]
 8002bea:	fa22 f303 	lsr.w	r3, r2, r3
 8002bee:	4a09      	ldr	r2, [pc, #36]	; (8002c14 <HAL_RCC_ClockConfig+0x1c4>)
 8002bf0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002bf2:	4b09      	ldr	r3, [pc, #36]	; (8002c18 <HAL_RCC_ClockConfig+0x1c8>)
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	f7ff f85e 	bl	8001cb8 <HAL_InitTick>

  return HAL_OK;
 8002bfc:	2300      	movs	r3, #0
}
 8002bfe:	4618      	mov	r0, r3
 8002c00:	3710      	adds	r7, #16
 8002c02:	46bd      	mov	sp, r7
 8002c04:	bd80      	pop	{r7, pc}
 8002c06:	bf00      	nop
 8002c08:	40023c00 	.word	0x40023c00
 8002c0c:	40023800 	.word	0x40023800
 8002c10:	080069d4 	.word	0x080069d4
 8002c14:	20000010 	.word	0x20000010
 8002c18:	20000014 	.word	0x20000014

08002c1c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c1c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002c20:	b090      	sub	sp, #64	; 0x40
 8002c22:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002c24:	2300      	movs	r3, #0
 8002c26:	637b      	str	r3, [r7, #52]	; 0x34
 8002c28:	2300      	movs	r3, #0
 8002c2a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002c2c:	2300      	movs	r3, #0
 8002c2e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8002c30:	2300      	movs	r3, #0
 8002c32:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002c34:	4b59      	ldr	r3, [pc, #356]	; (8002d9c <HAL_RCC_GetSysClockFreq+0x180>)
 8002c36:	689b      	ldr	r3, [r3, #8]
 8002c38:	f003 030c 	and.w	r3, r3, #12
 8002c3c:	2b08      	cmp	r3, #8
 8002c3e:	d00d      	beq.n	8002c5c <HAL_RCC_GetSysClockFreq+0x40>
 8002c40:	2b08      	cmp	r3, #8
 8002c42:	f200 80a1 	bhi.w	8002d88 <HAL_RCC_GetSysClockFreq+0x16c>
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d002      	beq.n	8002c50 <HAL_RCC_GetSysClockFreq+0x34>
 8002c4a:	2b04      	cmp	r3, #4
 8002c4c:	d003      	beq.n	8002c56 <HAL_RCC_GetSysClockFreq+0x3a>
 8002c4e:	e09b      	b.n	8002d88 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002c50:	4b53      	ldr	r3, [pc, #332]	; (8002da0 <HAL_RCC_GetSysClockFreq+0x184>)
 8002c52:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8002c54:	e09b      	b.n	8002d8e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002c56:	4b53      	ldr	r3, [pc, #332]	; (8002da4 <HAL_RCC_GetSysClockFreq+0x188>)
 8002c58:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002c5a:	e098      	b.n	8002d8e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002c5c:	4b4f      	ldr	r3, [pc, #316]	; (8002d9c <HAL_RCC_GetSysClockFreq+0x180>)
 8002c5e:	685b      	ldr	r3, [r3, #4]
 8002c60:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002c64:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002c66:	4b4d      	ldr	r3, [pc, #308]	; (8002d9c <HAL_RCC_GetSysClockFreq+0x180>)
 8002c68:	685b      	ldr	r3, [r3, #4]
 8002c6a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d028      	beq.n	8002cc4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c72:	4b4a      	ldr	r3, [pc, #296]	; (8002d9c <HAL_RCC_GetSysClockFreq+0x180>)
 8002c74:	685b      	ldr	r3, [r3, #4]
 8002c76:	099b      	lsrs	r3, r3, #6
 8002c78:	2200      	movs	r2, #0
 8002c7a:	623b      	str	r3, [r7, #32]
 8002c7c:	627a      	str	r2, [r7, #36]	; 0x24
 8002c7e:	6a3b      	ldr	r3, [r7, #32]
 8002c80:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002c84:	2100      	movs	r1, #0
 8002c86:	4b47      	ldr	r3, [pc, #284]	; (8002da4 <HAL_RCC_GetSysClockFreq+0x188>)
 8002c88:	fb03 f201 	mul.w	r2, r3, r1
 8002c8c:	2300      	movs	r3, #0
 8002c8e:	fb00 f303 	mul.w	r3, r0, r3
 8002c92:	4413      	add	r3, r2
 8002c94:	4a43      	ldr	r2, [pc, #268]	; (8002da4 <HAL_RCC_GetSysClockFreq+0x188>)
 8002c96:	fba0 1202 	umull	r1, r2, r0, r2
 8002c9a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002c9c:	460a      	mov	r2, r1
 8002c9e:	62ba      	str	r2, [r7, #40]	; 0x28
 8002ca0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002ca2:	4413      	add	r3, r2
 8002ca4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002ca6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ca8:	2200      	movs	r2, #0
 8002caa:	61bb      	str	r3, [r7, #24]
 8002cac:	61fa      	str	r2, [r7, #28]
 8002cae:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002cb2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002cb6:	f7fd fa8f 	bl	80001d8 <__aeabi_uldivmod>
 8002cba:	4602      	mov	r2, r0
 8002cbc:	460b      	mov	r3, r1
 8002cbe:	4613      	mov	r3, r2
 8002cc0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002cc2:	e053      	b.n	8002d6c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002cc4:	4b35      	ldr	r3, [pc, #212]	; (8002d9c <HAL_RCC_GetSysClockFreq+0x180>)
 8002cc6:	685b      	ldr	r3, [r3, #4]
 8002cc8:	099b      	lsrs	r3, r3, #6
 8002cca:	2200      	movs	r2, #0
 8002ccc:	613b      	str	r3, [r7, #16]
 8002cce:	617a      	str	r2, [r7, #20]
 8002cd0:	693b      	ldr	r3, [r7, #16]
 8002cd2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002cd6:	f04f 0b00 	mov.w	fp, #0
 8002cda:	4652      	mov	r2, sl
 8002cdc:	465b      	mov	r3, fp
 8002cde:	f04f 0000 	mov.w	r0, #0
 8002ce2:	f04f 0100 	mov.w	r1, #0
 8002ce6:	0159      	lsls	r1, r3, #5
 8002ce8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002cec:	0150      	lsls	r0, r2, #5
 8002cee:	4602      	mov	r2, r0
 8002cf0:	460b      	mov	r3, r1
 8002cf2:	ebb2 080a 	subs.w	r8, r2, sl
 8002cf6:	eb63 090b 	sbc.w	r9, r3, fp
 8002cfa:	f04f 0200 	mov.w	r2, #0
 8002cfe:	f04f 0300 	mov.w	r3, #0
 8002d02:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002d06:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002d0a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002d0e:	ebb2 0408 	subs.w	r4, r2, r8
 8002d12:	eb63 0509 	sbc.w	r5, r3, r9
 8002d16:	f04f 0200 	mov.w	r2, #0
 8002d1a:	f04f 0300 	mov.w	r3, #0
 8002d1e:	00eb      	lsls	r3, r5, #3
 8002d20:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002d24:	00e2      	lsls	r2, r4, #3
 8002d26:	4614      	mov	r4, r2
 8002d28:	461d      	mov	r5, r3
 8002d2a:	eb14 030a 	adds.w	r3, r4, sl
 8002d2e:	603b      	str	r3, [r7, #0]
 8002d30:	eb45 030b 	adc.w	r3, r5, fp
 8002d34:	607b      	str	r3, [r7, #4]
 8002d36:	f04f 0200 	mov.w	r2, #0
 8002d3a:	f04f 0300 	mov.w	r3, #0
 8002d3e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002d42:	4629      	mov	r1, r5
 8002d44:	028b      	lsls	r3, r1, #10
 8002d46:	4621      	mov	r1, r4
 8002d48:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002d4c:	4621      	mov	r1, r4
 8002d4e:	028a      	lsls	r2, r1, #10
 8002d50:	4610      	mov	r0, r2
 8002d52:	4619      	mov	r1, r3
 8002d54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d56:	2200      	movs	r2, #0
 8002d58:	60bb      	str	r3, [r7, #8]
 8002d5a:	60fa      	str	r2, [r7, #12]
 8002d5c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002d60:	f7fd fa3a 	bl	80001d8 <__aeabi_uldivmod>
 8002d64:	4602      	mov	r2, r0
 8002d66:	460b      	mov	r3, r1
 8002d68:	4613      	mov	r3, r2
 8002d6a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002d6c:	4b0b      	ldr	r3, [pc, #44]	; (8002d9c <HAL_RCC_GetSysClockFreq+0x180>)
 8002d6e:	685b      	ldr	r3, [r3, #4]
 8002d70:	0c1b      	lsrs	r3, r3, #16
 8002d72:	f003 0303 	and.w	r3, r3, #3
 8002d76:	3301      	adds	r3, #1
 8002d78:	005b      	lsls	r3, r3, #1
 8002d7a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8002d7c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002d7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d80:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d84:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002d86:	e002      	b.n	8002d8e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002d88:	4b05      	ldr	r3, [pc, #20]	; (8002da0 <HAL_RCC_GetSysClockFreq+0x184>)
 8002d8a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002d8c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002d8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002d90:	4618      	mov	r0, r3
 8002d92:	3740      	adds	r7, #64	; 0x40
 8002d94:	46bd      	mov	sp, r7
 8002d96:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002d9a:	bf00      	nop
 8002d9c:	40023800 	.word	0x40023800
 8002da0:	00f42400 	.word	0x00f42400
 8002da4:	017d7840 	.word	0x017d7840

08002da8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002da8:	b480      	push	{r7}
 8002daa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002dac:	4b03      	ldr	r3, [pc, #12]	; (8002dbc <HAL_RCC_GetHCLKFreq+0x14>)
 8002dae:	681b      	ldr	r3, [r3, #0]
}
 8002db0:	4618      	mov	r0, r3
 8002db2:	46bd      	mov	sp, r7
 8002db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db8:	4770      	bx	lr
 8002dba:	bf00      	nop
 8002dbc:	20000010 	.word	0x20000010

08002dc0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002dc4:	f7ff fff0 	bl	8002da8 <HAL_RCC_GetHCLKFreq>
 8002dc8:	4602      	mov	r2, r0
 8002dca:	4b05      	ldr	r3, [pc, #20]	; (8002de0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002dcc:	689b      	ldr	r3, [r3, #8]
 8002dce:	0a9b      	lsrs	r3, r3, #10
 8002dd0:	f003 0307 	and.w	r3, r3, #7
 8002dd4:	4903      	ldr	r1, [pc, #12]	; (8002de4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002dd6:	5ccb      	ldrb	r3, [r1, r3]
 8002dd8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ddc:	4618      	mov	r0, r3
 8002dde:	bd80      	pop	{r7, pc}
 8002de0:	40023800 	.word	0x40023800
 8002de4:	080069e4 	.word	0x080069e4

08002de8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002dec:	f7ff ffdc 	bl	8002da8 <HAL_RCC_GetHCLKFreq>
 8002df0:	4602      	mov	r2, r0
 8002df2:	4b05      	ldr	r3, [pc, #20]	; (8002e08 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002df4:	689b      	ldr	r3, [r3, #8]
 8002df6:	0b5b      	lsrs	r3, r3, #13
 8002df8:	f003 0307 	and.w	r3, r3, #7
 8002dfc:	4903      	ldr	r1, [pc, #12]	; (8002e0c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002dfe:	5ccb      	ldrb	r3, [r1, r3]
 8002e00:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e04:	4618      	mov	r0, r3
 8002e06:	bd80      	pop	{r7, pc}
 8002e08:	40023800 	.word	0x40023800
 8002e0c:	080069e4 	.word	0x080069e4

08002e10 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002e10:	b580      	push	{r7, lr}
 8002e12:	b086      	sub	sp, #24
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002e18:	2300      	movs	r3, #0
 8002e1a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8002e1c:	2300      	movs	r3, #0
 8002e1e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f003 0301 	and.w	r3, r3, #1
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d105      	bne.n	8002e38 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d038      	beq.n	8002eaa <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002e38:	4b68      	ldr	r3, [pc, #416]	; (8002fdc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002e3e:	f7fe ff7f 	bl	8001d40 <HAL_GetTick>
 8002e42:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002e44:	e008      	b.n	8002e58 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002e46:	f7fe ff7b 	bl	8001d40 <HAL_GetTick>
 8002e4a:	4602      	mov	r2, r0
 8002e4c:	697b      	ldr	r3, [r7, #20]
 8002e4e:	1ad3      	subs	r3, r2, r3
 8002e50:	2b02      	cmp	r3, #2
 8002e52:	d901      	bls.n	8002e58 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002e54:	2303      	movs	r3, #3
 8002e56:	e0bd      	b.n	8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002e58:	4b61      	ldr	r3, [pc, #388]	; (8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d1f0      	bne.n	8002e46 <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	685a      	ldr	r2, [r3, #4]
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	689b      	ldr	r3, [r3, #8]
 8002e6c:	019b      	lsls	r3, r3, #6
 8002e6e:	431a      	orrs	r2, r3
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	68db      	ldr	r3, [r3, #12]
 8002e74:	071b      	lsls	r3, r3, #28
 8002e76:	495a      	ldr	r1, [pc, #360]	; (8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e78:	4313      	orrs	r3, r2
 8002e7a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002e7e:	4b57      	ldr	r3, [pc, #348]	; (8002fdc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002e80:	2201      	movs	r2, #1
 8002e82:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002e84:	f7fe ff5c 	bl	8001d40 <HAL_GetTick>
 8002e88:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002e8a:	e008      	b.n	8002e9e <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002e8c:	f7fe ff58 	bl	8001d40 <HAL_GetTick>
 8002e90:	4602      	mov	r2, r0
 8002e92:	697b      	ldr	r3, [r7, #20]
 8002e94:	1ad3      	subs	r3, r2, r3
 8002e96:	2b02      	cmp	r3, #2
 8002e98:	d901      	bls.n	8002e9e <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002e9a:	2303      	movs	r3, #3
 8002e9c:	e09a      	b.n	8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002e9e:	4b50      	ldr	r3, [pc, #320]	; (8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d0f0      	beq.n	8002e8c <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f003 0302 	and.w	r3, r3, #2
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	f000 8083 	beq.w	8002fbe <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002eb8:	2300      	movs	r3, #0
 8002eba:	60fb      	str	r3, [r7, #12]
 8002ebc:	4b48      	ldr	r3, [pc, #288]	; (8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ebe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ec0:	4a47      	ldr	r2, [pc, #284]	; (8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ec2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ec6:	6413      	str	r3, [r2, #64]	; 0x40
 8002ec8:	4b45      	ldr	r3, [pc, #276]	; (8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002eca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ecc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ed0:	60fb      	str	r3, [r7, #12]
 8002ed2:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8002ed4:	4b43      	ldr	r3, [pc, #268]	; (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	4a42      	ldr	r2, [pc, #264]	; (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002eda:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ede:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002ee0:	f7fe ff2e 	bl	8001d40 <HAL_GetTick>
 8002ee4:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002ee6:	e008      	b.n	8002efa <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002ee8:	f7fe ff2a 	bl	8001d40 <HAL_GetTick>
 8002eec:	4602      	mov	r2, r0
 8002eee:	697b      	ldr	r3, [r7, #20]
 8002ef0:	1ad3      	subs	r3, r2, r3
 8002ef2:	2b02      	cmp	r3, #2
 8002ef4:	d901      	bls.n	8002efa <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 8002ef6:	2303      	movs	r3, #3
 8002ef8:	e06c      	b.n	8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002efa:	4b3a      	ldr	r3, [pc, #232]	; (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d0f0      	beq.n	8002ee8 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002f06:	4b36      	ldr	r3, [pc, #216]	; (8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f0a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f0e:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002f10:	693b      	ldr	r3, [r7, #16]
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d02f      	beq.n	8002f76 <HAL_RCCEx_PeriphCLKConfig+0x166>
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	691b      	ldr	r3, [r3, #16]
 8002f1a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f1e:	693a      	ldr	r2, [r7, #16]
 8002f20:	429a      	cmp	r2, r3
 8002f22:	d028      	beq.n	8002f76 <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002f24:	4b2e      	ldr	r3, [pc, #184]	; (8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f28:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f2c:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002f2e:	4b2e      	ldr	r3, [pc, #184]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002f30:	2201      	movs	r2, #1
 8002f32:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002f34:	4b2c      	ldr	r3, [pc, #176]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002f36:	2200      	movs	r2, #0
 8002f38:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8002f3a:	4a29      	ldr	r2, [pc, #164]	; (8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f3c:	693b      	ldr	r3, [r7, #16]
 8002f3e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002f40:	4b27      	ldr	r3, [pc, #156]	; (8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f44:	f003 0301 	and.w	r3, r3, #1
 8002f48:	2b01      	cmp	r3, #1
 8002f4a:	d114      	bne.n	8002f76 <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8002f4c:	f7fe fef8 	bl	8001d40 <HAL_GetTick>
 8002f50:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f52:	e00a      	b.n	8002f6a <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f54:	f7fe fef4 	bl	8001d40 <HAL_GetTick>
 8002f58:	4602      	mov	r2, r0
 8002f5a:	697b      	ldr	r3, [r7, #20]
 8002f5c:	1ad3      	subs	r3, r2, r3
 8002f5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f62:	4293      	cmp	r3, r2
 8002f64:	d901      	bls.n	8002f6a <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8002f66:	2303      	movs	r3, #3
 8002f68:	e034      	b.n	8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f6a:	4b1d      	ldr	r3, [pc, #116]	; (8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f6e:	f003 0302 	and.w	r3, r3, #2
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d0ee      	beq.n	8002f54 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	691b      	ldr	r3, [r3, #16]
 8002f7a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f7e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002f82:	d10d      	bne.n	8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x190>
 8002f84:	4b16      	ldr	r3, [pc, #88]	; (8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f86:	689b      	ldr	r3, [r3, #8]
 8002f88:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	691b      	ldr	r3, [r3, #16]
 8002f90:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8002f94:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f98:	4911      	ldr	r1, [pc, #68]	; (8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f9a:	4313      	orrs	r3, r2
 8002f9c:	608b      	str	r3, [r1, #8]
 8002f9e:	e005      	b.n	8002fac <HAL_RCCEx_PeriphCLKConfig+0x19c>
 8002fa0:	4b0f      	ldr	r3, [pc, #60]	; (8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002fa2:	689b      	ldr	r3, [r3, #8]
 8002fa4:	4a0e      	ldr	r2, [pc, #56]	; (8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002fa6:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002faa:	6093      	str	r3, [r2, #8]
 8002fac:	4b0c      	ldr	r3, [pc, #48]	; (8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002fae:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	691b      	ldr	r3, [r3, #16]
 8002fb4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002fb8:	4909      	ldr	r1, [pc, #36]	; (8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002fba:	4313      	orrs	r3, r2
 8002fbc:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f003 0308 	and.w	r3, r3, #8
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d003      	beq.n	8002fd2 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	7d1a      	ldrb	r2, [r3, #20]
 8002fce:	4b07      	ldr	r3, [pc, #28]	; (8002fec <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8002fd0:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8002fd2:	2300      	movs	r3, #0
}
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	3718      	adds	r7, #24
 8002fd8:	46bd      	mov	sp, r7
 8002fda:	bd80      	pop	{r7, pc}
 8002fdc:	42470068 	.word	0x42470068
 8002fe0:	40023800 	.word	0x40023800
 8002fe4:	40007000 	.word	0x40007000
 8002fe8:	42470e40 	.word	0x42470e40
 8002fec:	424711e0 	.word	0x424711e0

08002ff0 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	b084      	sub	sp, #16
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002ff8:	2301      	movs	r3, #1
 8002ffa:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d101      	bne.n	8003006 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8003002:	2301      	movs	r3, #1
 8003004:	e066      	b.n	80030d4 <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	7f5b      	ldrb	r3, [r3, #29]
 800300a:	b2db      	uxtb	r3, r3
 800300c:	2b00      	cmp	r3, #0
 800300e:	d105      	bne.n	800301c <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	2200      	movs	r2, #0
 8003014:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8003016:	6878      	ldr	r0, [r7, #4]
 8003018:	f7fe fc24 	bl	8001864 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	2202      	movs	r2, #2
 8003020:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	22ca      	movs	r2, #202	; 0xca
 8003028:	625a      	str	r2, [r3, #36]	; 0x24
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	2253      	movs	r2, #83	; 0x53
 8003030:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8003032:	6878      	ldr	r0, [r7, #4]
 8003034:	f000 f87a 	bl	800312c <RTC_EnterInitMode>
 8003038:	4603      	mov	r3, r0
 800303a:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 800303c:	7bfb      	ldrb	r3, [r7, #15]
 800303e:	2b00      	cmp	r3, #0
 8003040:	d12c      	bne.n	800309c <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	689b      	ldr	r3, [r3, #8]
 8003048:	687a      	ldr	r2, [r7, #4]
 800304a:	6812      	ldr	r2, [r2, #0]
 800304c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8003050:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003054:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	6899      	ldr	r1, [r3, #8]
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	685a      	ldr	r2, [r3, #4]
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	691b      	ldr	r3, [r3, #16]
 8003064:	431a      	orrs	r2, r3
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	695b      	ldr	r3, [r3, #20]
 800306a:	431a      	orrs	r2, r3
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	430a      	orrs	r2, r1
 8003072:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	687a      	ldr	r2, [r7, #4]
 800307a:	68d2      	ldr	r2, [r2, #12]
 800307c:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	6919      	ldr	r1, [r3, #16]
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	689b      	ldr	r3, [r3, #8]
 8003088:	041a      	lsls	r2, r3, #16
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	430a      	orrs	r2, r1
 8003090:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8003092:	6878      	ldr	r0, [r7, #4]
 8003094:	f000 f881 	bl	800319a <RTC_ExitInitMode>
 8003098:	4603      	mov	r3, r0
 800309a:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 800309c:	7bfb      	ldrb	r3, [r7, #15]
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d113      	bne.n	80030ca <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80030b0:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	699a      	ldr	r2, [r3, #24]
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	430a      	orrs	r2, r1
 80030c2:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	2201      	movs	r2, #1
 80030c8:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	22ff      	movs	r2, #255	; 0xff
 80030d0:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 80030d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80030d4:	4618      	mov	r0, r3
 80030d6:	3710      	adds	r7, #16
 80030d8:	46bd      	mov	sp, r7
 80030da:	bd80      	pop	{r7, pc}

080030dc <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80030dc:	b580      	push	{r7, lr}
 80030de:	b084      	sub	sp, #16
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80030e4:	2300      	movs	r3, #0
 80030e6:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	68da      	ldr	r2, [r3, #12]
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80030f6:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 80030f8:	f7fe fe22 	bl	8001d40 <HAL_GetTick>
 80030fc:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80030fe:	e009      	b.n	8003114 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003100:	f7fe fe1e 	bl	8001d40 <HAL_GetTick>
 8003104:	4602      	mov	r2, r0
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	1ad3      	subs	r3, r2, r3
 800310a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800310e:	d901      	bls.n	8003114 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8003110:	2303      	movs	r3, #3
 8003112:	e007      	b.n	8003124 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	68db      	ldr	r3, [r3, #12]
 800311a:	f003 0320 	and.w	r3, r3, #32
 800311e:	2b00      	cmp	r3, #0
 8003120:	d0ee      	beq.n	8003100 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8003122:	2300      	movs	r3, #0
}
 8003124:	4618      	mov	r0, r3
 8003126:	3710      	adds	r7, #16
 8003128:	46bd      	mov	sp, r7
 800312a:	bd80      	pop	{r7, pc}

0800312c <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800312c:	b580      	push	{r7, lr}
 800312e:	b084      	sub	sp, #16
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003134:	2300      	movs	r3, #0
 8003136:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8003138:	2300      	movs	r3, #0
 800313a:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	68db      	ldr	r3, [r3, #12]
 8003142:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003146:	2b00      	cmp	r3, #0
 8003148:	d122      	bne.n	8003190 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	68da      	ldr	r2, [r3, #12]
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003158:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800315a:	f7fe fdf1 	bl	8001d40 <HAL_GetTick>
 800315e:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8003160:	e00c      	b.n	800317c <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003162:	f7fe fded 	bl	8001d40 <HAL_GetTick>
 8003166:	4602      	mov	r2, r0
 8003168:	68bb      	ldr	r3, [r7, #8]
 800316a:	1ad3      	subs	r3, r2, r3
 800316c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003170:	d904      	bls.n	800317c <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	2204      	movs	r2, #4
 8003176:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8003178:	2301      	movs	r3, #1
 800317a:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	68db      	ldr	r3, [r3, #12]
 8003182:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003186:	2b00      	cmp	r3, #0
 8003188:	d102      	bne.n	8003190 <RTC_EnterInitMode+0x64>
 800318a:	7bfb      	ldrb	r3, [r7, #15]
 800318c:	2b01      	cmp	r3, #1
 800318e:	d1e8      	bne.n	8003162 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8003190:	7bfb      	ldrb	r3, [r7, #15]
}
 8003192:	4618      	mov	r0, r3
 8003194:	3710      	adds	r7, #16
 8003196:	46bd      	mov	sp, r7
 8003198:	bd80      	pop	{r7, pc}

0800319a <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800319a:	b580      	push	{r7, lr}
 800319c:	b084      	sub	sp, #16
 800319e:	af00      	add	r7, sp, #0
 80031a0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80031a2:	2300      	movs	r3, #0
 80031a4:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	68da      	ldr	r2, [r3, #12]
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80031b4:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	689b      	ldr	r3, [r3, #8]
 80031bc:	f003 0320 	and.w	r3, r3, #32
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d10a      	bne.n	80031da <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80031c4:	6878      	ldr	r0, [r7, #4]
 80031c6:	f7ff ff89 	bl	80030dc <HAL_RTC_WaitForSynchro>
 80031ca:	4603      	mov	r3, r0
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d004      	beq.n	80031da <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	2204      	movs	r2, #4
 80031d4:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 80031d6:	2301      	movs	r3, #1
 80031d8:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 80031da:	7bfb      	ldrb	r3, [r7, #15]
}
 80031dc:	4618      	mov	r0, r3
 80031de:	3710      	adds	r7, #16
 80031e0:	46bd      	mov	sp, r7
 80031e2:	bd80      	pop	{r7, pc}

080031e4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80031e4:	b580      	push	{r7, lr}
 80031e6:	b082      	sub	sp, #8
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d101      	bne.n	80031f6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80031f2:	2301      	movs	r3, #1
 80031f4:	e07b      	b.n	80032ee <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d108      	bne.n	8003210 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	685b      	ldr	r3, [r3, #4]
 8003202:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003206:	d009      	beq.n	800321c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	2200      	movs	r2, #0
 800320c:	61da      	str	r2, [r3, #28]
 800320e:	e005      	b.n	800321c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	2200      	movs	r2, #0
 8003214:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	2200      	movs	r2, #0
 800321a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	2200      	movs	r2, #0
 8003220:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003228:	b2db      	uxtb	r3, r3
 800322a:	2b00      	cmp	r3, #0
 800322c:	d106      	bne.n	800323c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	2200      	movs	r2, #0
 8003232:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003236:	6878      	ldr	r0, [r7, #4]
 8003238:	f7fe fb76 	bl	8001928 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	2202      	movs	r2, #2
 8003240:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	681a      	ldr	r2, [r3, #0]
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003252:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	685b      	ldr	r3, [r3, #4]
 8003258:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	689b      	ldr	r3, [r3, #8]
 8003260:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003264:	431a      	orrs	r2, r3
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	68db      	ldr	r3, [r3, #12]
 800326a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800326e:	431a      	orrs	r2, r3
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	691b      	ldr	r3, [r3, #16]
 8003274:	f003 0302 	and.w	r3, r3, #2
 8003278:	431a      	orrs	r2, r3
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	695b      	ldr	r3, [r3, #20]
 800327e:	f003 0301 	and.w	r3, r3, #1
 8003282:	431a      	orrs	r2, r3
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	699b      	ldr	r3, [r3, #24]
 8003288:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800328c:	431a      	orrs	r2, r3
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	69db      	ldr	r3, [r3, #28]
 8003292:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003296:	431a      	orrs	r2, r3
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	6a1b      	ldr	r3, [r3, #32]
 800329c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032a0:	ea42 0103 	orr.w	r1, r2, r3
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032a8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	430a      	orrs	r2, r1
 80032b2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	699b      	ldr	r3, [r3, #24]
 80032b8:	0c1b      	lsrs	r3, r3, #16
 80032ba:	f003 0104 	and.w	r1, r3, #4
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032c2:	f003 0210 	and.w	r2, r3, #16
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	430a      	orrs	r2, r1
 80032cc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	69da      	ldr	r2, [r3, #28]
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80032dc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	2200      	movs	r2, #0
 80032e2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2201      	movs	r2, #1
 80032e8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80032ec:	2300      	movs	r3, #0
}
 80032ee:	4618      	mov	r0, r3
 80032f0:	3708      	adds	r7, #8
 80032f2:	46bd      	mov	sp, r7
 80032f4:	bd80      	pop	{r7, pc}

080032f6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80032f6:	b580      	push	{r7, lr}
 80032f8:	b088      	sub	sp, #32
 80032fa:	af00      	add	r7, sp, #0
 80032fc:	60f8      	str	r0, [r7, #12]
 80032fe:	60b9      	str	r1, [r7, #8]
 8003300:	603b      	str	r3, [r7, #0]
 8003302:	4613      	mov	r3, r2
 8003304:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003306:	2300      	movs	r3, #0
 8003308:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003310:	2b01      	cmp	r3, #1
 8003312:	d101      	bne.n	8003318 <HAL_SPI_Transmit+0x22>
 8003314:	2302      	movs	r3, #2
 8003316:	e126      	b.n	8003566 <HAL_SPI_Transmit+0x270>
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	2201      	movs	r2, #1
 800331c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003320:	f7fe fd0e 	bl	8001d40 <HAL_GetTick>
 8003324:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003326:	88fb      	ldrh	r3, [r7, #6]
 8003328:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003330:	b2db      	uxtb	r3, r3
 8003332:	2b01      	cmp	r3, #1
 8003334:	d002      	beq.n	800333c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003336:	2302      	movs	r3, #2
 8003338:	77fb      	strb	r3, [r7, #31]
    goto error;
 800333a:	e10b      	b.n	8003554 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800333c:	68bb      	ldr	r3, [r7, #8]
 800333e:	2b00      	cmp	r3, #0
 8003340:	d002      	beq.n	8003348 <HAL_SPI_Transmit+0x52>
 8003342:	88fb      	ldrh	r3, [r7, #6]
 8003344:	2b00      	cmp	r3, #0
 8003346:	d102      	bne.n	800334e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003348:	2301      	movs	r3, #1
 800334a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800334c:	e102      	b.n	8003554 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	2203      	movs	r2, #3
 8003352:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	2200      	movs	r2, #0
 800335a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	68ba      	ldr	r2, [r7, #8]
 8003360:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	88fa      	ldrh	r2, [r7, #6]
 8003366:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	88fa      	ldrh	r2, [r7, #6]
 800336c:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	2200      	movs	r2, #0
 8003372:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	2200      	movs	r2, #0
 8003378:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	2200      	movs	r2, #0
 800337e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	2200      	movs	r2, #0
 8003384:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	2200      	movs	r2, #0
 800338a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	689b      	ldr	r3, [r3, #8]
 8003390:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003394:	d10f      	bne.n	80033b6 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	681a      	ldr	r2, [r3, #0]
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80033a4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	681a      	ldr	r2, [r3, #0]
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80033b4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033c0:	2b40      	cmp	r3, #64	; 0x40
 80033c2:	d007      	beq.n	80033d4 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	681a      	ldr	r2, [r3, #0]
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80033d2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	68db      	ldr	r3, [r3, #12]
 80033d8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80033dc:	d14b      	bne.n	8003476 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	685b      	ldr	r3, [r3, #4]
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d002      	beq.n	80033ec <HAL_SPI_Transmit+0xf6>
 80033e6:	8afb      	ldrh	r3, [r7, #22]
 80033e8:	2b01      	cmp	r3, #1
 80033ea:	d13e      	bne.n	800346a <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033f0:	881a      	ldrh	r2, [r3, #0]
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033fc:	1c9a      	adds	r2, r3, #2
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003406:	b29b      	uxth	r3, r3
 8003408:	3b01      	subs	r3, #1
 800340a:	b29a      	uxth	r2, r3
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003410:	e02b      	b.n	800346a <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	689b      	ldr	r3, [r3, #8]
 8003418:	f003 0302 	and.w	r3, r3, #2
 800341c:	2b02      	cmp	r3, #2
 800341e:	d112      	bne.n	8003446 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003424:	881a      	ldrh	r2, [r3, #0]
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003430:	1c9a      	adds	r2, r3, #2
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800343a:	b29b      	uxth	r3, r3
 800343c:	3b01      	subs	r3, #1
 800343e:	b29a      	uxth	r2, r3
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	86da      	strh	r2, [r3, #54]	; 0x36
 8003444:	e011      	b.n	800346a <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003446:	f7fe fc7b 	bl	8001d40 <HAL_GetTick>
 800344a:	4602      	mov	r2, r0
 800344c:	69bb      	ldr	r3, [r7, #24]
 800344e:	1ad3      	subs	r3, r2, r3
 8003450:	683a      	ldr	r2, [r7, #0]
 8003452:	429a      	cmp	r2, r3
 8003454:	d803      	bhi.n	800345e <HAL_SPI_Transmit+0x168>
 8003456:	683b      	ldr	r3, [r7, #0]
 8003458:	f1b3 3fff 	cmp.w	r3, #4294967295
 800345c:	d102      	bne.n	8003464 <HAL_SPI_Transmit+0x16e>
 800345e:	683b      	ldr	r3, [r7, #0]
 8003460:	2b00      	cmp	r3, #0
 8003462:	d102      	bne.n	800346a <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8003464:	2303      	movs	r3, #3
 8003466:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003468:	e074      	b.n	8003554 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800346e:	b29b      	uxth	r3, r3
 8003470:	2b00      	cmp	r3, #0
 8003472:	d1ce      	bne.n	8003412 <HAL_SPI_Transmit+0x11c>
 8003474:	e04c      	b.n	8003510 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	685b      	ldr	r3, [r3, #4]
 800347a:	2b00      	cmp	r3, #0
 800347c:	d002      	beq.n	8003484 <HAL_SPI_Transmit+0x18e>
 800347e:	8afb      	ldrh	r3, [r7, #22]
 8003480:	2b01      	cmp	r3, #1
 8003482:	d140      	bne.n	8003506 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	330c      	adds	r3, #12
 800348e:	7812      	ldrb	r2, [r2, #0]
 8003490:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003496:	1c5a      	adds	r2, r3, #1
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80034a0:	b29b      	uxth	r3, r3
 80034a2:	3b01      	subs	r3, #1
 80034a4:	b29a      	uxth	r2, r3
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80034aa:	e02c      	b.n	8003506 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	689b      	ldr	r3, [r3, #8]
 80034b2:	f003 0302 	and.w	r3, r3, #2
 80034b6:	2b02      	cmp	r3, #2
 80034b8:	d113      	bne.n	80034e2 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	330c      	adds	r3, #12
 80034c4:	7812      	ldrb	r2, [r2, #0]
 80034c6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034cc:	1c5a      	adds	r2, r3, #1
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80034d6:	b29b      	uxth	r3, r3
 80034d8:	3b01      	subs	r3, #1
 80034da:	b29a      	uxth	r2, r3
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	86da      	strh	r2, [r3, #54]	; 0x36
 80034e0:	e011      	b.n	8003506 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80034e2:	f7fe fc2d 	bl	8001d40 <HAL_GetTick>
 80034e6:	4602      	mov	r2, r0
 80034e8:	69bb      	ldr	r3, [r7, #24]
 80034ea:	1ad3      	subs	r3, r2, r3
 80034ec:	683a      	ldr	r2, [r7, #0]
 80034ee:	429a      	cmp	r2, r3
 80034f0:	d803      	bhi.n	80034fa <HAL_SPI_Transmit+0x204>
 80034f2:	683b      	ldr	r3, [r7, #0]
 80034f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034f8:	d102      	bne.n	8003500 <HAL_SPI_Transmit+0x20a>
 80034fa:	683b      	ldr	r3, [r7, #0]
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d102      	bne.n	8003506 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8003500:	2303      	movs	r3, #3
 8003502:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003504:	e026      	b.n	8003554 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800350a:	b29b      	uxth	r3, r3
 800350c:	2b00      	cmp	r3, #0
 800350e:	d1cd      	bne.n	80034ac <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003510:	69ba      	ldr	r2, [r7, #24]
 8003512:	6839      	ldr	r1, [r7, #0]
 8003514:	68f8      	ldr	r0, [r7, #12]
 8003516:	f000 f8b3 	bl	8003680 <SPI_EndRxTxTransaction>
 800351a:	4603      	mov	r3, r0
 800351c:	2b00      	cmp	r3, #0
 800351e:	d002      	beq.n	8003526 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	2220      	movs	r2, #32
 8003524:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	689b      	ldr	r3, [r3, #8]
 800352a:	2b00      	cmp	r3, #0
 800352c:	d10a      	bne.n	8003544 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800352e:	2300      	movs	r3, #0
 8003530:	613b      	str	r3, [r7, #16]
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	68db      	ldr	r3, [r3, #12]
 8003538:	613b      	str	r3, [r7, #16]
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	689b      	ldr	r3, [r3, #8]
 8003540:	613b      	str	r3, [r7, #16]
 8003542:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003548:	2b00      	cmp	r3, #0
 800354a:	d002      	beq.n	8003552 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800354c:	2301      	movs	r3, #1
 800354e:	77fb      	strb	r3, [r7, #31]
 8003550:	e000      	b.n	8003554 <HAL_SPI_Transmit+0x25e>
  }

error:
 8003552:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	2201      	movs	r2, #1
 8003558:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	2200      	movs	r2, #0
 8003560:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003564:	7ffb      	ldrb	r3, [r7, #31]
}
 8003566:	4618      	mov	r0, r3
 8003568:	3720      	adds	r7, #32
 800356a:	46bd      	mov	sp, r7
 800356c:	bd80      	pop	{r7, pc}
	...

08003570 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003570:	b580      	push	{r7, lr}
 8003572:	b088      	sub	sp, #32
 8003574:	af00      	add	r7, sp, #0
 8003576:	60f8      	str	r0, [r7, #12]
 8003578:	60b9      	str	r1, [r7, #8]
 800357a:	603b      	str	r3, [r7, #0]
 800357c:	4613      	mov	r3, r2
 800357e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003580:	f7fe fbde 	bl	8001d40 <HAL_GetTick>
 8003584:	4602      	mov	r2, r0
 8003586:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003588:	1a9b      	subs	r3, r3, r2
 800358a:	683a      	ldr	r2, [r7, #0]
 800358c:	4413      	add	r3, r2
 800358e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003590:	f7fe fbd6 	bl	8001d40 <HAL_GetTick>
 8003594:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003596:	4b39      	ldr	r3, [pc, #228]	; (800367c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	015b      	lsls	r3, r3, #5
 800359c:	0d1b      	lsrs	r3, r3, #20
 800359e:	69fa      	ldr	r2, [r7, #28]
 80035a0:	fb02 f303 	mul.w	r3, r2, r3
 80035a4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80035a6:	e054      	b.n	8003652 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80035a8:	683b      	ldr	r3, [r7, #0]
 80035aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035ae:	d050      	beq.n	8003652 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80035b0:	f7fe fbc6 	bl	8001d40 <HAL_GetTick>
 80035b4:	4602      	mov	r2, r0
 80035b6:	69bb      	ldr	r3, [r7, #24]
 80035b8:	1ad3      	subs	r3, r2, r3
 80035ba:	69fa      	ldr	r2, [r7, #28]
 80035bc:	429a      	cmp	r2, r3
 80035be:	d902      	bls.n	80035c6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80035c0:	69fb      	ldr	r3, [r7, #28]
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d13d      	bne.n	8003642 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	685a      	ldr	r2, [r3, #4]
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80035d4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	685b      	ldr	r3, [r3, #4]
 80035da:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80035de:	d111      	bne.n	8003604 <SPI_WaitFlagStateUntilTimeout+0x94>
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	689b      	ldr	r3, [r3, #8]
 80035e4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80035e8:	d004      	beq.n	80035f4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	689b      	ldr	r3, [r3, #8]
 80035ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80035f2:	d107      	bne.n	8003604 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	681a      	ldr	r2, [r3, #0]
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003602:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003608:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800360c:	d10f      	bne.n	800362e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	681a      	ldr	r2, [r3, #0]
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800361c:	601a      	str	r2, [r3, #0]
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	681a      	ldr	r2, [r3, #0]
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800362c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	2201      	movs	r2, #1
 8003632:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	2200      	movs	r2, #0
 800363a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800363e:	2303      	movs	r3, #3
 8003640:	e017      	b.n	8003672 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003642:	697b      	ldr	r3, [r7, #20]
 8003644:	2b00      	cmp	r3, #0
 8003646:	d101      	bne.n	800364c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003648:	2300      	movs	r3, #0
 800364a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800364c:	697b      	ldr	r3, [r7, #20]
 800364e:	3b01      	subs	r3, #1
 8003650:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	689a      	ldr	r2, [r3, #8]
 8003658:	68bb      	ldr	r3, [r7, #8]
 800365a:	4013      	ands	r3, r2
 800365c:	68ba      	ldr	r2, [r7, #8]
 800365e:	429a      	cmp	r2, r3
 8003660:	bf0c      	ite	eq
 8003662:	2301      	moveq	r3, #1
 8003664:	2300      	movne	r3, #0
 8003666:	b2db      	uxtb	r3, r3
 8003668:	461a      	mov	r2, r3
 800366a:	79fb      	ldrb	r3, [r7, #7]
 800366c:	429a      	cmp	r2, r3
 800366e:	d19b      	bne.n	80035a8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003670:	2300      	movs	r3, #0
}
 8003672:	4618      	mov	r0, r3
 8003674:	3720      	adds	r7, #32
 8003676:	46bd      	mov	sp, r7
 8003678:	bd80      	pop	{r7, pc}
 800367a:	bf00      	nop
 800367c:	20000010 	.word	0x20000010

08003680 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003680:	b580      	push	{r7, lr}
 8003682:	b088      	sub	sp, #32
 8003684:	af02      	add	r7, sp, #8
 8003686:	60f8      	str	r0, [r7, #12]
 8003688:	60b9      	str	r1, [r7, #8]
 800368a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800368c:	4b1b      	ldr	r3, [pc, #108]	; (80036fc <SPI_EndRxTxTransaction+0x7c>)
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	4a1b      	ldr	r2, [pc, #108]	; (8003700 <SPI_EndRxTxTransaction+0x80>)
 8003692:	fba2 2303 	umull	r2, r3, r2, r3
 8003696:	0d5b      	lsrs	r3, r3, #21
 8003698:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800369c:	fb02 f303 	mul.w	r3, r2, r3
 80036a0:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	685b      	ldr	r3, [r3, #4]
 80036a6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80036aa:	d112      	bne.n	80036d2 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	9300      	str	r3, [sp, #0]
 80036b0:	68bb      	ldr	r3, [r7, #8]
 80036b2:	2200      	movs	r2, #0
 80036b4:	2180      	movs	r1, #128	; 0x80
 80036b6:	68f8      	ldr	r0, [r7, #12]
 80036b8:	f7ff ff5a 	bl	8003570 <SPI_WaitFlagStateUntilTimeout>
 80036bc:	4603      	mov	r3, r0
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d016      	beq.n	80036f0 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036c6:	f043 0220 	orr.w	r2, r3, #32
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80036ce:	2303      	movs	r3, #3
 80036d0:	e00f      	b.n	80036f2 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80036d2:	697b      	ldr	r3, [r7, #20]
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d00a      	beq.n	80036ee <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80036d8:	697b      	ldr	r3, [r7, #20]
 80036da:	3b01      	subs	r3, #1
 80036dc:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	689b      	ldr	r3, [r3, #8]
 80036e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036e8:	2b80      	cmp	r3, #128	; 0x80
 80036ea:	d0f2      	beq.n	80036d2 <SPI_EndRxTxTransaction+0x52>
 80036ec:	e000      	b.n	80036f0 <SPI_EndRxTxTransaction+0x70>
        break;
 80036ee:	bf00      	nop
  }

  return HAL_OK;
 80036f0:	2300      	movs	r3, #0
}
 80036f2:	4618      	mov	r0, r3
 80036f4:	3718      	adds	r7, #24
 80036f6:	46bd      	mov	sp, r7
 80036f8:	bd80      	pop	{r7, pc}
 80036fa:	bf00      	nop
 80036fc:	20000010 	.word	0x20000010
 8003700:	165e9f81 	.word	0x165e9f81

08003704 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003704:	b580      	push	{r7, lr}
 8003706:	b082      	sub	sp, #8
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2b00      	cmp	r3, #0
 8003710:	d101      	bne.n	8003716 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003712:	2301      	movs	r3, #1
 8003714:	e03f      	b.n	8003796 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800371c:	b2db      	uxtb	r3, r3
 800371e:	2b00      	cmp	r3, #0
 8003720:	d106      	bne.n	8003730 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	2200      	movs	r2, #0
 8003726:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800372a:	6878      	ldr	r0, [r7, #4]
 800372c:	f7fe fa30 	bl	8001b90 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2224      	movs	r2, #36	; 0x24
 8003734:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	68da      	ldr	r2, [r3, #12]
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003746:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003748:	6878      	ldr	r0, [r7, #4]
 800374a:	f000 f829 	bl	80037a0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	691a      	ldr	r2, [r3, #16]
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800375c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	695a      	ldr	r2, [r3, #20]
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800376c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	68da      	ldr	r2, [r3, #12]
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800377c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	2200      	movs	r2, #0
 8003782:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	2220      	movs	r2, #32
 8003788:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	2220      	movs	r2, #32
 8003790:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003794:	2300      	movs	r3, #0
}
 8003796:	4618      	mov	r0, r3
 8003798:	3708      	adds	r7, #8
 800379a:	46bd      	mov	sp, r7
 800379c:	bd80      	pop	{r7, pc}
	...

080037a0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80037a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80037a4:	b0c0      	sub	sp, #256	; 0x100
 80037a6:	af00      	add	r7, sp, #0
 80037a8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80037ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	691b      	ldr	r3, [r3, #16]
 80037b4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80037b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037bc:	68d9      	ldr	r1, [r3, #12]
 80037be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037c2:	681a      	ldr	r2, [r3, #0]
 80037c4:	ea40 0301 	orr.w	r3, r0, r1
 80037c8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80037ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037ce:	689a      	ldr	r2, [r3, #8]
 80037d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037d4:	691b      	ldr	r3, [r3, #16]
 80037d6:	431a      	orrs	r2, r3
 80037d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037dc:	695b      	ldr	r3, [r3, #20]
 80037de:	431a      	orrs	r2, r3
 80037e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037e4:	69db      	ldr	r3, [r3, #28]
 80037e6:	4313      	orrs	r3, r2
 80037e8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80037ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	68db      	ldr	r3, [r3, #12]
 80037f4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80037f8:	f021 010c 	bic.w	r1, r1, #12
 80037fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003800:	681a      	ldr	r2, [r3, #0]
 8003802:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003806:	430b      	orrs	r3, r1
 8003808:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800380a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	695b      	ldr	r3, [r3, #20]
 8003812:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003816:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800381a:	6999      	ldr	r1, [r3, #24]
 800381c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003820:	681a      	ldr	r2, [r3, #0]
 8003822:	ea40 0301 	orr.w	r3, r0, r1
 8003826:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003828:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800382c:	681a      	ldr	r2, [r3, #0]
 800382e:	4b8f      	ldr	r3, [pc, #572]	; (8003a6c <UART_SetConfig+0x2cc>)
 8003830:	429a      	cmp	r2, r3
 8003832:	d005      	beq.n	8003840 <UART_SetConfig+0xa0>
 8003834:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003838:	681a      	ldr	r2, [r3, #0]
 800383a:	4b8d      	ldr	r3, [pc, #564]	; (8003a70 <UART_SetConfig+0x2d0>)
 800383c:	429a      	cmp	r2, r3
 800383e:	d104      	bne.n	800384a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003840:	f7ff fad2 	bl	8002de8 <HAL_RCC_GetPCLK2Freq>
 8003844:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003848:	e003      	b.n	8003852 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800384a:	f7ff fab9 	bl	8002dc0 <HAL_RCC_GetPCLK1Freq>
 800384e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003852:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003856:	69db      	ldr	r3, [r3, #28]
 8003858:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800385c:	f040 810c 	bne.w	8003a78 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003860:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003864:	2200      	movs	r2, #0
 8003866:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800386a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800386e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003872:	4622      	mov	r2, r4
 8003874:	462b      	mov	r3, r5
 8003876:	1891      	adds	r1, r2, r2
 8003878:	65b9      	str	r1, [r7, #88]	; 0x58
 800387a:	415b      	adcs	r3, r3
 800387c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800387e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003882:	4621      	mov	r1, r4
 8003884:	eb12 0801 	adds.w	r8, r2, r1
 8003888:	4629      	mov	r1, r5
 800388a:	eb43 0901 	adc.w	r9, r3, r1
 800388e:	f04f 0200 	mov.w	r2, #0
 8003892:	f04f 0300 	mov.w	r3, #0
 8003896:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800389a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800389e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80038a2:	4690      	mov	r8, r2
 80038a4:	4699      	mov	r9, r3
 80038a6:	4623      	mov	r3, r4
 80038a8:	eb18 0303 	adds.w	r3, r8, r3
 80038ac:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80038b0:	462b      	mov	r3, r5
 80038b2:	eb49 0303 	adc.w	r3, r9, r3
 80038b6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80038ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038be:	685b      	ldr	r3, [r3, #4]
 80038c0:	2200      	movs	r2, #0
 80038c2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80038c6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80038ca:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80038ce:	460b      	mov	r3, r1
 80038d0:	18db      	adds	r3, r3, r3
 80038d2:	653b      	str	r3, [r7, #80]	; 0x50
 80038d4:	4613      	mov	r3, r2
 80038d6:	eb42 0303 	adc.w	r3, r2, r3
 80038da:	657b      	str	r3, [r7, #84]	; 0x54
 80038dc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80038e0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80038e4:	f7fc fc78 	bl	80001d8 <__aeabi_uldivmod>
 80038e8:	4602      	mov	r2, r0
 80038ea:	460b      	mov	r3, r1
 80038ec:	4b61      	ldr	r3, [pc, #388]	; (8003a74 <UART_SetConfig+0x2d4>)
 80038ee:	fba3 2302 	umull	r2, r3, r3, r2
 80038f2:	095b      	lsrs	r3, r3, #5
 80038f4:	011c      	lsls	r4, r3, #4
 80038f6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80038fa:	2200      	movs	r2, #0
 80038fc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003900:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003904:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003908:	4642      	mov	r2, r8
 800390a:	464b      	mov	r3, r9
 800390c:	1891      	adds	r1, r2, r2
 800390e:	64b9      	str	r1, [r7, #72]	; 0x48
 8003910:	415b      	adcs	r3, r3
 8003912:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003914:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003918:	4641      	mov	r1, r8
 800391a:	eb12 0a01 	adds.w	sl, r2, r1
 800391e:	4649      	mov	r1, r9
 8003920:	eb43 0b01 	adc.w	fp, r3, r1
 8003924:	f04f 0200 	mov.w	r2, #0
 8003928:	f04f 0300 	mov.w	r3, #0
 800392c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003930:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003934:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003938:	4692      	mov	sl, r2
 800393a:	469b      	mov	fp, r3
 800393c:	4643      	mov	r3, r8
 800393e:	eb1a 0303 	adds.w	r3, sl, r3
 8003942:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003946:	464b      	mov	r3, r9
 8003948:	eb4b 0303 	adc.w	r3, fp, r3
 800394c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003950:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003954:	685b      	ldr	r3, [r3, #4]
 8003956:	2200      	movs	r2, #0
 8003958:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800395c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003960:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003964:	460b      	mov	r3, r1
 8003966:	18db      	adds	r3, r3, r3
 8003968:	643b      	str	r3, [r7, #64]	; 0x40
 800396a:	4613      	mov	r3, r2
 800396c:	eb42 0303 	adc.w	r3, r2, r3
 8003970:	647b      	str	r3, [r7, #68]	; 0x44
 8003972:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003976:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800397a:	f7fc fc2d 	bl	80001d8 <__aeabi_uldivmod>
 800397e:	4602      	mov	r2, r0
 8003980:	460b      	mov	r3, r1
 8003982:	4611      	mov	r1, r2
 8003984:	4b3b      	ldr	r3, [pc, #236]	; (8003a74 <UART_SetConfig+0x2d4>)
 8003986:	fba3 2301 	umull	r2, r3, r3, r1
 800398a:	095b      	lsrs	r3, r3, #5
 800398c:	2264      	movs	r2, #100	; 0x64
 800398e:	fb02 f303 	mul.w	r3, r2, r3
 8003992:	1acb      	subs	r3, r1, r3
 8003994:	00db      	lsls	r3, r3, #3
 8003996:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800399a:	4b36      	ldr	r3, [pc, #216]	; (8003a74 <UART_SetConfig+0x2d4>)
 800399c:	fba3 2302 	umull	r2, r3, r3, r2
 80039a0:	095b      	lsrs	r3, r3, #5
 80039a2:	005b      	lsls	r3, r3, #1
 80039a4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80039a8:	441c      	add	r4, r3
 80039aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80039ae:	2200      	movs	r2, #0
 80039b0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80039b4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80039b8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80039bc:	4642      	mov	r2, r8
 80039be:	464b      	mov	r3, r9
 80039c0:	1891      	adds	r1, r2, r2
 80039c2:	63b9      	str	r1, [r7, #56]	; 0x38
 80039c4:	415b      	adcs	r3, r3
 80039c6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80039c8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80039cc:	4641      	mov	r1, r8
 80039ce:	1851      	adds	r1, r2, r1
 80039d0:	6339      	str	r1, [r7, #48]	; 0x30
 80039d2:	4649      	mov	r1, r9
 80039d4:	414b      	adcs	r3, r1
 80039d6:	637b      	str	r3, [r7, #52]	; 0x34
 80039d8:	f04f 0200 	mov.w	r2, #0
 80039dc:	f04f 0300 	mov.w	r3, #0
 80039e0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80039e4:	4659      	mov	r1, fp
 80039e6:	00cb      	lsls	r3, r1, #3
 80039e8:	4651      	mov	r1, sl
 80039ea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80039ee:	4651      	mov	r1, sl
 80039f0:	00ca      	lsls	r2, r1, #3
 80039f2:	4610      	mov	r0, r2
 80039f4:	4619      	mov	r1, r3
 80039f6:	4603      	mov	r3, r0
 80039f8:	4642      	mov	r2, r8
 80039fa:	189b      	adds	r3, r3, r2
 80039fc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003a00:	464b      	mov	r3, r9
 8003a02:	460a      	mov	r2, r1
 8003a04:	eb42 0303 	adc.w	r3, r2, r3
 8003a08:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003a0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a10:	685b      	ldr	r3, [r3, #4]
 8003a12:	2200      	movs	r2, #0
 8003a14:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003a18:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003a1c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003a20:	460b      	mov	r3, r1
 8003a22:	18db      	adds	r3, r3, r3
 8003a24:	62bb      	str	r3, [r7, #40]	; 0x28
 8003a26:	4613      	mov	r3, r2
 8003a28:	eb42 0303 	adc.w	r3, r2, r3
 8003a2c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003a2e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003a32:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003a36:	f7fc fbcf 	bl	80001d8 <__aeabi_uldivmod>
 8003a3a:	4602      	mov	r2, r0
 8003a3c:	460b      	mov	r3, r1
 8003a3e:	4b0d      	ldr	r3, [pc, #52]	; (8003a74 <UART_SetConfig+0x2d4>)
 8003a40:	fba3 1302 	umull	r1, r3, r3, r2
 8003a44:	095b      	lsrs	r3, r3, #5
 8003a46:	2164      	movs	r1, #100	; 0x64
 8003a48:	fb01 f303 	mul.w	r3, r1, r3
 8003a4c:	1ad3      	subs	r3, r2, r3
 8003a4e:	00db      	lsls	r3, r3, #3
 8003a50:	3332      	adds	r3, #50	; 0x32
 8003a52:	4a08      	ldr	r2, [pc, #32]	; (8003a74 <UART_SetConfig+0x2d4>)
 8003a54:	fba2 2303 	umull	r2, r3, r2, r3
 8003a58:	095b      	lsrs	r3, r3, #5
 8003a5a:	f003 0207 	and.w	r2, r3, #7
 8003a5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	4422      	add	r2, r4
 8003a66:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003a68:	e105      	b.n	8003c76 <UART_SetConfig+0x4d6>
 8003a6a:	bf00      	nop
 8003a6c:	40011000 	.word	0x40011000
 8003a70:	40011400 	.word	0x40011400
 8003a74:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003a78:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003a7c:	2200      	movs	r2, #0
 8003a7e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003a82:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003a86:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003a8a:	4642      	mov	r2, r8
 8003a8c:	464b      	mov	r3, r9
 8003a8e:	1891      	adds	r1, r2, r2
 8003a90:	6239      	str	r1, [r7, #32]
 8003a92:	415b      	adcs	r3, r3
 8003a94:	627b      	str	r3, [r7, #36]	; 0x24
 8003a96:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003a9a:	4641      	mov	r1, r8
 8003a9c:	1854      	adds	r4, r2, r1
 8003a9e:	4649      	mov	r1, r9
 8003aa0:	eb43 0501 	adc.w	r5, r3, r1
 8003aa4:	f04f 0200 	mov.w	r2, #0
 8003aa8:	f04f 0300 	mov.w	r3, #0
 8003aac:	00eb      	lsls	r3, r5, #3
 8003aae:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003ab2:	00e2      	lsls	r2, r4, #3
 8003ab4:	4614      	mov	r4, r2
 8003ab6:	461d      	mov	r5, r3
 8003ab8:	4643      	mov	r3, r8
 8003aba:	18e3      	adds	r3, r4, r3
 8003abc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003ac0:	464b      	mov	r3, r9
 8003ac2:	eb45 0303 	adc.w	r3, r5, r3
 8003ac6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003aca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ace:	685b      	ldr	r3, [r3, #4]
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003ad6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003ada:	f04f 0200 	mov.w	r2, #0
 8003ade:	f04f 0300 	mov.w	r3, #0
 8003ae2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003ae6:	4629      	mov	r1, r5
 8003ae8:	008b      	lsls	r3, r1, #2
 8003aea:	4621      	mov	r1, r4
 8003aec:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003af0:	4621      	mov	r1, r4
 8003af2:	008a      	lsls	r2, r1, #2
 8003af4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003af8:	f7fc fb6e 	bl	80001d8 <__aeabi_uldivmod>
 8003afc:	4602      	mov	r2, r0
 8003afe:	460b      	mov	r3, r1
 8003b00:	4b60      	ldr	r3, [pc, #384]	; (8003c84 <UART_SetConfig+0x4e4>)
 8003b02:	fba3 2302 	umull	r2, r3, r3, r2
 8003b06:	095b      	lsrs	r3, r3, #5
 8003b08:	011c      	lsls	r4, r3, #4
 8003b0a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003b0e:	2200      	movs	r2, #0
 8003b10:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003b14:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003b18:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003b1c:	4642      	mov	r2, r8
 8003b1e:	464b      	mov	r3, r9
 8003b20:	1891      	adds	r1, r2, r2
 8003b22:	61b9      	str	r1, [r7, #24]
 8003b24:	415b      	adcs	r3, r3
 8003b26:	61fb      	str	r3, [r7, #28]
 8003b28:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003b2c:	4641      	mov	r1, r8
 8003b2e:	1851      	adds	r1, r2, r1
 8003b30:	6139      	str	r1, [r7, #16]
 8003b32:	4649      	mov	r1, r9
 8003b34:	414b      	adcs	r3, r1
 8003b36:	617b      	str	r3, [r7, #20]
 8003b38:	f04f 0200 	mov.w	r2, #0
 8003b3c:	f04f 0300 	mov.w	r3, #0
 8003b40:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003b44:	4659      	mov	r1, fp
 8003b46:	00cb      	lsls	r3, r1, #3
 8003b48:	4651      	mov	r1, sl
 8003b4a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003b4e:	4651      	mov	r1, sl
 8003b50:	00ca      	lsls	r2, r1, #3
 8003b52:	4610      	mov	r0, r2
 8003b54:	4619      	mov	r1, r3
 8003b56:	4603      	mov	r3, r0
 8003b58:	4642      	mov	r2, r8
 8003b5a:	189b      	adds	r3, r3, r2
 8003b5c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003b60:	464b      	mov	r3, r9
 8003b62:	460a      	mov	r2, r1
 8003b64:	eb42 0303 	adc.w	r3, r2, r3
 8003b68:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003b6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b70:	685b      	ldr	r3, [r3, #4]
 8003b72:	2200      	movs	r2, #0
 8003b74:	67bb      	str	r3, [r7, #120]	; 0x78
 8003b76:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003b78:	f04f 0200 	mov.w	r2, #0
 8003b7c:	f04f 0300 	mov.w	r3, #0
 8003b80:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003b84:	4649      	mov	r1, r9
 8003b86:	008b      	lsls	r3, r1, #2
 8003b88:	4641      	mov	r1, r8
 8003b8a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003b8e:	4641      	mov	r1, r8
 8003b90:	008a      	lsls	r2, r1, #2
 8003b92:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003b96:	f7fc fb1f 	bl	80001d8 <__aeabi_uldivmod>
 8003b9a:	4602      	mov	r2, r0
 8003b9c:	460b      	mov	r3, r1
 8003b9e:	4b39      	ldr	r3, [pc, #228]	; (8003c84 <UART_SetConfig+0x4e4>)
 8003ba0:	fba3 1302 	umull	r1, r3, r3, r2
 8003ba4:	095b      	lsrs	r3, r3, #5
 8003ba6:	2164      	movs	r1, #100	; 0x64
 8003ba8:	fb01 f303 	mul.w	r3, r1, r3
 8003bac:	1ad3      	subs	r3, r2, r3
 8003bae:	011b      	lsls	r3, r3, #4
 8003bb0:	3332      	adds	r3, #50	; 0x32
 8003bb2:	4a34      	ldr	r2, [pc, #208]	; (8003c84 <UART_SetConfig+0x4e4>)
 8003bb4:	fba2 2303 	umull	r2, r3, r2, r3
 8003bb8:	095b      	lsrs	r3, r3, #5
 8003bba:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003bbe:	441c      	add	r4, r3
 8003bc0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	673b      	str	r3, [r7, #112]	; 0x70
 8003bc8:	677a      	str	r2, [r7, #116]	; 0x74
 8003bca:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003bce:	4642      	mov	r2, r8
 8003bd0:	464b      	mov	r3, r9
 8003bd2:	1891      	adds	r1, r2, r2
 8003bd4:	60b9      	str	r1, [r7, #8]
 8003bd6:	415b      	adcs	r3, r3
 8003bd8:	60fb      	str	r3, [r7, #12]
 8003bda:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003bde:	4641      	mov	r1, r8
 8003be0:	1851      	adds	r1, r2, r1
 8003be2:	6039      	str	r1, [r7, #0]
 8003be4:	4649      	mov	r1, r9
 8003be6:	414b      	adcs	r3, r1
 8003be8:	607b      	str	r3, [r7, #4]
 8003bea:	f04f 0200 	mov.w	r2, #0
 8003bee:	f04f 0300 	mov.w	r3, #0
 8003bf2:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003bf6:	4659      	mov	r1, fp
 8003bf8:	00cb      	lsls	r3, r1, #3
 8003bfa:	4651      	mov	r1, sl
 8003bfc:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003c00:	4651      	mov	r1, sl
 8003c02:	00ca      	lsls	r2, r1, #3
 8003c04:	4610      	mov	r0, r2
 8003c06:	4619      	mov	r1, r3
 8003c08:	4603      	mov	r3, r0
 8003c0a:	4642      	mov	r2, r8
 8003c0c:	189b      	adds	r3, r3, r2
 8003c0e:	66bb      	str	r3, [r7, #104]	; 0x68
 8003c10:	464b      	mov	r3, r9
 8003c12:	460a      	mov	r2, r1
 8003c14:	eb42 0303 	adc.w	r3, r2, r3
 8003c18:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003c1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c1e:	685b      	ldr	r3, [r3, #4]
 8003c20:	2200      	movs	r2, #0
 8003c22:	663b      	str	r3, [r7, #96]	; 0x60
 8003c24:	667a      	str	r2, [r7, #100]	; 0x64
 8003c26:	f04f 0200 	mov.w	r2, #0
 8003c2a:	f04f 0300 	mov.w	r3, #0
 8003c2e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003c32:	4649      	mov	r1, r9
 8003c34:	008b      	lsls	r3, r1, #2
 8003c36:	4641      	mov	r1, r8
 8003c38:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003c3c:	4641      	mov	r1, r8
 8003c3e:	008a      	lsls	r2, r1, #2
 8003c40:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003c44:	f7fc fac8 	bl	80001d8 <__aeabi_uldivmod>
 8003c48:	4602      	mov	r2, r0
 8003c4a:	460b      	mov	r3, r1
 8003c4c:	4b0d      	ldr	r3, [pc, #52]	; (8003c84 <UART_SetConfig+0x4e4>)
 8003c4e:	fba3 1302 	umull	r1, r3, r3, r2
 8003c52:	095b      	lsrs	r3, r3, #5
 8003c54:	2164      	movs	r1, #100	; 0x64
 8003c56:	fb01 f303 	mul.w	r3, r1, r3
 8003c5a:	1ad3      	subs	r3, r2, r3
 8003c5c:	011b      	lsls	r3, r3, #4
 8003c5e:	3332      	adds	r3, #50	; 0x32
 8003c60:	4a08      	ldr	r2, [pc, #32]	; (8003c84 <UART_SetConfig+0x4e4>)
 8003c62:	fba2 2303 	umull	r2, r3, r2, r3
 8003c66:	095b      	lsrs	r3, r3, #5
 8003c68:	f003 020f 	and.w	r2, r3, #15
 8003c6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	4422      	add	r2, r4
 8003c74:	609a      	str	r2, [r3, #8]
}
 8003c76:	bf00      	nop
 8003c78:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003c7c:	46bd      	mov	sp, r7
 8003c7e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003c82:	bf00      	nop
 8003c84:	51eb851f 	.word	0x51eb851f

08003c88 <__errno>:
 8003c88:	4b01      	ldr	r3, [pc, #4]	; (8003c90 <__errno+0x8>)
 8003c8a:	6818      	ldr	r0, [r3, #0]
 8003c8c:	4770      	bx	lr
 8003c8e:	bf00      	nop
 8003c90:	2000001c 	.word	0x2000001c

08003c94 <__libc_init_array>:
 8003c94:	b570      	push	{r4, r5, r6, lr}
 8003c96:	4d0d      	ldr	r5, [pc, #52]	; (8003ccc <__libc_init_array+0x38>)
 8003c98:	4c0d      	ldr	r4, [pc, #52]	; (8003cd0 <__libc_init_array+0x3c>)
 8003c9a:	1b64      	subs	r4, r4, r5
 8003c9c:	10a4      	asrs	r4, r4, #2
 8003c9e:	2600      	movs	r6, #0
 8003ca0:	42a6      	cmp	r6, r4
 8003ca2:	d109      	bne.n	8003cb8 <__libc_init_array+0x24>
 8003ca4:	4d0b      	ldr	r5, [pc, #44]	; (8003cd4 <__libc_init_array+0x40>)
 8003ca6:	4c0c      	ldr	r4, [pc, #48]	; (8003cd8 <__libc_init_array+0x44>)
 8003ca8:	f000 f92e 	bl	8003f08 <_init>
 8003cac:	1b64      	subs	r4, r4, r5
 8003cae:	10a4      	asrs	r4, r4, #2
 8003cb0:	2600      	movs	r6, #0
 8003cb2:	42a6      	cmp	r6, r4
 8003cb4:	d105      	bne.n	8003cc2 <__libc_init_array+0x2e>
 8003cb6:	bd70      	pop	{r4, r5, r6, pc}
 8003cb8:	f855 3b04 	ldr.w	r3, [r5], #4
 8003cbc:	4798      	blx	r3
 8003cbe:	3601      	adds	r6, #1
 8003cc0:	e7ee      	b.n	8003ca0 <__libc_init_array+0xc>
 8003cc2:	f855 3b04 	ldr.w	r3, [r5], #4
 8003cc6:	4798      	blx	r3
 8003cc8:	3601      	adds	r6, #1
 8003cca:	e7f2      	b.n	8003cb2 <__libc_init_array+0x1e>
 8003ccc:	080069f4 	.word	0x080069f4
 8003cd0:	080069f4 	.word	0x080069f4
 8003cd4:	080069f4 	.word	0x080069f4
 8003cd8:	080069f8 	.word	0x080069f8

08003cdc <malloc>:
 8003cdc:	4b02      	ldr	r3, [pc, #8]	; (8003ce8 <malloc+0xc>)
 8003cde:	4601      	mov	r1, r0
 8003ce0:	6818      	ldr	r0, [r3, #0]
 8003ce2:	f000 b87f 	b.w	8003de4 <_malloc_r>
 8003ce6:	bf00      	nop
 8003ce8:	2000001c 	.word	0x2000001c

08003cec <free>:
 8003cec:	4b02      	ldr	r3, [pc, #8]	; (8003cf8 <free+0xc>)
 8003cee:	4601      	mov	r1, r0
 8003cf0:	6818      	ldr	r0, [r3, #0]
 8003cf2:	f000 b80b 	b.w	8003d0c <_free_r>
 8003cf6:	bf00      	nop
 8003cf8:	2000001c 	.word	0x2000001c

08003cfc <memset>:
 8003cfc:	4402      	add	r2, r0
 8003cfe:	4603      	mov	r3, r0
 8003d00:	4293      	cmp	r3, r2
 8003d02:	d100      	bne.n	8003d06 <memset+0xa>
 8003d04:	4770      	bx	lr
 8003d06:	f803 1b01 	strb.w	r1, [r3], #1
 8003d0a:	e7f9      	b.n	8003d00 <memset+0x4>

08003d0c <_free_r>:
 8003d0c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003d0e:	2900      	cmp	r1, #0
 8003d10:	d044      	beq.n	8003d9c <_free_r+0x90>
 8003d12:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003d16:	9001      	str	r0, [sp, #4]
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	f1a1 0404 	sub.w	r4, r1, #4
 8003d1e:	bfb8      	it	lt
 8003d20:	18e4      	addlt	r4, r4, r3
 8003d22:	f000 f8e3 	bl	8003eec <__malloc_lock>
 8003d26:	4a1e      	ldr	r2, [pc, #120]	; (8003da0 <_free_r+0x94>)
 8003d28:	9801      	ldr	r0, [sp, #4]
 8003d2a:	6813      	ldr	r3, [r2, #0]
 8003d2c:	b933      	cbnz	r3, 8003d3c <_free_r+0x30>
 8003d2e:	6063      	str	r3, [r4, #4]
 8003d30:	6014      	str	r4, [r2, #0]
 8003d32:	b003      	add	sp, #12
 8003d34:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003d38:	f000 b8de 	b.w	8003ef8 <__malloc_unlock>
 8003d3c:	42a3      	cmp	r3, r4
 8003d3e:	d908      	bls.n	8003d52 <_free_r+0x46>
 8003d40:	6825      	ldr	r5, [r4, #0]
 8003d42:	1961      	adds	r1, r4, r5
 8003d44:	428b      	cmp	r3, r1
 8003d46:	bf01      	itttt	eq
 8003d48:	6819      	ldreq	r1, [r3, #0]
 8003d4a:	685b      	ldreq	r3, [r3, #4]
 8003d4c:	1949      	addeq	r1, r1, r5
 8003d4e:	6021      	streq	r1, [r4, #0]
 8003d50:	e7ed      	b.n	8003d2e <_free_r+0x22>
 8003d52:	461a      	mov	r2, r3
 8003d54:	685b      	ldr	r3, [r3, #4]
 8003d56:	b10b      	cbz	r3, 8003d5c <_free_r+0x50>
 8003d58:	42a3      	cmp	r3, r4
 8003d5a:	d9fa      	bls.n	8003d52 <_free_r+0x46>
 8003d5c:	6811      	ldr	r1, [r2, #0]
 8003d5e:	1855      	adds	r5, r2, r1
 8003d60:	42a5      	cmp	r5, r4
 8003d62:	d10b      	bne.n	8003d7c <_free_r+0x70>
 8003d64:	6824      	ldr	r4, [r4, #0]
 8003d66:	4421      	add	r1, r4
 8003d68:	1854      	adds	r4, r2, r1
 8003d6a:	42a3      	cmp	r3, r4
 8003d6c:	6011      	str	r1, [r2, #0]
 8003d6e:	d1e0      	bne.n	8003d32 <_free_r+0x26>
 8003d70:	681c      	ldr	r4, [r3, #0]
 8003d72:	685b      	ldr	r3, [r3, #4]
 8003d74:	6053      	str	r3, [r2, #4]
 8003d76:	4421      	add	r1, r4
 8003d78:	6011      	str	r1, [r2, #0]
 8003d7a:	e7da      	b.n	8003d32 <_free_r+0x26>
 8003d7c:	d902      	bls.n	8003d84 <_free_r+0x78>
 8003d7e:	230c      	movs	r3, #12
 8003d80:	6003      	str	r3, [r0, #0]
 8003d82:	e7d6      	b.n	8003d32 <_free_r+0x26>
 8003d84:	6825      	ldr	r5, [r4, #0]
 8003d86:	1961      	adds	r1, r4, r5
 8003d88:	428b      	cmp	r3, r1
 8003d8a:	bf04      	itt	eq
 8003d8c:	6819      	ldreq	r1, [r3, #0]
 8003d8e:	685b      	ldreq	r3, [r3, #4]
 8003d90:	6063      	str	r3, [r4, #4]
 8003d92:	bf04      	itt	eq
 8003d94:	1949      	addeq	r1, r1, r5
 8003d96:	6021      	streq	r1, [r4, #0]
 8003d98:	6054      	str	r4, [r2, #4]
 8003d9a:	e7ca      	b.n	8003d32 <_free_r+0x26>
 8003d9c:	b003      	add	sp, #12
 8003d9e:	bd30      	pop	{r4, r5, pc}
 8003da0:	200001cc 	.word	0x200001cc

08003da4 <sbrk_aligned>:
 8003da4:	b570      	push	{r4, r5, r6, lr}
 8003da6:	4e0e      	ldr	r6, [pc, #56]	; (8003de0 <sbrk_aligned+0x3c>)
 8003da8:	460c      	mov	r4, r1
 8003daa:	6831      	ldr	r1, [r6, #0]
 8003dac:	4605      	mov	r5, r0
 8003dae:	b911      	cbnz	r1, 8003db6 <sbrk_aligned+0x12>
 8003db0:	f000 f88c 	bl	8003ecc <_sbrk_r>
 8003db4:	6030      	str	r0, [r6, #0]
 8003db6:	4621      	mov	r1, r4
 8003db8:	4628      	mov	r0, r5
 8003dba:	f000 f887 	bl	8003ecc <_sbrk_r>
 8003dbe:	1c43      	adds	r3, r0, #1
 8003dc0:	d00a      	beq.n	8003dd8 <sbrk_aligned+0x34>
 8003dc2:	1cc4      	adds	r4, r0, #3
 8003dc4:	f024 0403 	bic.w	r4, r4, #3
 8003dc8:	42a0      	cmp	r0, r4
 8003dca:	d007      	beq.n	8003ddc <sbrk_aligned+0x38>
 8003dcc:	1a21      	subs	r1, r4, r0
 8003dce:	4628      	mov	r0, r5
 8003dd0:	f000 f87c 	bl	8003ecc <_sbrk_r>
 8003dd4:	3001      	adds	r0, #1
 8003dd6:	d101      	bne.n	8003ddc <sbrk_aligned+0x38>
 8003dd8:	f04f 34ff 	mov.w	r4, #4294967295
 8003ddc:	4620      	mov	r0, r4
 8003dde:	bd70      	pop	{r4, r5, r6, pc}
 8003de0:	200001d0 	.word	0x200001d0

08003de4 <_malloc_r>:
 8003de4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003de8:	1ccd      	adds	r5, r1, #3
 8003dea:	f025 0503 	bic.w	r5, r5, #3
 8003dee:	3508      	adds	r5, #8
 8003df0:	2d0c      	cmp	r5, #12
 8003df2:	bf38      	it	cc
 8003df4:	250c      	movcc	r5, #12
 8003df6:	2d00      	cmp	r5, #0
 8003df8:	4607      	mov	r7, r0
 8003dfa:	db01      	blt.n	8003e00 <_malloc_r+0x1c>
 8003dfc:	42a9      	cmp	r1, r5
 8003dfe:	d905      	bls.n	8003e0c <_malloc_r+0x28>
 8003e00:	230c      	movs	r3, #12
 8003e02:	603b      	str	r3, [r7, #0]
 8003e04:	2600      	movs	r6, #0
 8003e06:	4630      	mov	r0, r6
 8003e08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003e0c:	4e2e      	ldr	r6, [pc, #184]	; (8003ec8 <_malloc_r+0xe4>)
 8003e0e:	f000 f86d 	bl	8003eec <__malloc_lock>
 8003e12:	6833      	ldr	r3, [r6, #0]
 8003e14:	461c      	mov	r4, r3
 8003e16:	bb34      	cbnz	r4, 8003e66 <_malloc_r+0x82>
 8003e18:	4629      	mov	r1, r5
 8003e1a:	4638      	mov	r0, r7
 8003e1c:	f7ff ffc2 	bl	8003da4 <sbrk_aligned>
 8003e20:	1c43      	adds	r3, r0, #1
 8003e22:	4604      	mov	r4, r0
 8003e24:	d14d      	bne.n	8003ec2 <_malloc_r+0xde>
 8003e26:	6834      	ldr	r4, [r6, #0]
 8003e28:	4626      	mov	r6, r4
 8003e2a:	2e00      	cmp	r6, #0
 8003e2c:	d140      	bne.n	8003eb0 <_malloc_r+0xcc>
 8003e2e:	6823      	ldr	r3, [r4, #0]
 8003e30:	4631      	mov	r1, r6
 8003e32:	4638      	mov	r0, r7
 8003e34:	eb04 0803 	add.w	r8, r4, r3
 8003e38:	f000 f848 	bl	8003ecc <_sbrk_r>
 8003e3c:	4580      	cmp	r8, r0
 8003e3e:	d13a      	bne.n	8003eb6 <_malloc_r+0xd2>
 8003e40:	6821      	ldr	r1, [r4, #0]
 8003e42:	3503      	adds	r5, #3
 8003e44:	1a6d      	subs	r5, r5, r1
 8003e46:	f025 0503 	bic.w	r5, r5, #3
 8003e4a:	3508      	adds	r5, #8
 8003e4c:	2d0c      	cmp	r5, #12
 8003e4e:	bf38      	it	cc
 8003e50:	250c      	movcc	r5, #12
 8003e52:	4629      	mov	r1, r5
 8003e54:	4638      	mov	r0, r7
 8003e56:	f7ff ffa5 	bl	8003da4 <sbrk_aligned>
 8003e5a:	3001      	adds	r0, #1
 8003e5c:	d02b      	beq.n	8003eb6 <_malloc_r+0xd2>
 8003e5e:	6823      	ldr	r3, [r4, #0]
 8003e60:	442b      	add	r3, r5
 8003e62:	6023      	str	r3, [r4, #0]
 8003e64:	e00e      	b.n	8003e84 <_malloc_r+0xa0>
 8003e66:	6822      	ldr	r2, [r4, #0]
 8003e68:	1b52      	subs	r2, r2, r5
 8003e6a:	d41e      	bmi.n	8003eaa <_malloc_r+0xc6>
 8003e6c:	2a0b      	cmp	r2, #11
 8003e6e:	d916      	bls.n	8003e9e <_malloc_r+0xba>
 8003e70:	1961      	adds	r1, r4, r5
 8003e72:	42a3      	cmp	r3, r4
 8003e74:	6025      	str	r5, [r4, #0]
 8003e76:	bf18      	it	ne
 8003e78:	6059      	strne	r1, [r3, #4]
 8003e7a:	6863      	ldr	r3, [r4, #4]
 8003e7c:	bf08      	it	eq
 8003e7e:	6031      	streq	r1, [r6, #0]
 8003e80:	5162      	str	r2, [r4, r5]
 8003e82:	604b      	str	r3, [r1, #4]
 8003e84:	4638      	mov	r0, r7
 8003e86:	f104 060b 	add.w	r6, r4, #11
 8003e8a:	f000 f835 	bl	8003ef8 <__malloc_unlock>
 8003e8e:	f026 0607 	bic.w	r6, r6, #7
 8003e92:	1d23      	adds	r3, r4, #4
 8003e94:	1af2      	subs	r2, r6, r3
 8003e96:	d0b6      	beq.n	8003e06 <_malloc_r+0x22>
 8003e98:	1b9b      	subs	r3, r3, r6
 8003e9a:	50a3      	str	r3, [r4, r2]
 8003e9c:	e7b3      	b.n	8003e06 <_malloc_r+0x22>
 8003e9e:	6862      	ldr	r2, [r4, #4]
 8003ea0:	42a3      	cmp	r3, r4
 8003ea2:	bf0c      	ite	eq
 8003ea4:	6032      	streq	r2, [r6, #0]
 8003ea6:	605a      	strne	r2, [r3, #4]
 8003ea8:	e7ec      	b.n	8003e84 <_malloc_r+0xa0>
 8003eaa:	4623      	mov	r3, r4
 8003eac:	6864      	ldr	r4, [r4, #4]
 8003eae:	e7b2      	b.n	8003e16 <_malloc_r+0x32>
 8003eb0:	4634      	mov	r4, r6
 8003eb2:	6876      	ldr	r6, [r6, #4]
 8003eb4:	e7b9      	b.n	8003e2a <_malloc_r+0x46>
 8003eb6:	230c      	movs	r3, #12
 8003eb8:	603b      	str	r3, [r7, #0]
 8003eba:	4638      	mov	r0, r7
 8003ebc:	f000 f81c 	bl	8003ef8 <__malloc_unlock>
 8003ec0:	e7a1      	b.n	8003e06 <_malloc_r+0x22>
 8003ec2:	6025      	str	r5, [r4, #0]
 8003ec4:	e7de      	b.n	8003e84 <_malloc_r+0xa0>
 8003ec6:	bf00      	nop
 8003ec8:	200001cc 	.word	0x200001cc

08003ecc <_sbrk_r>:
 8003ecc:	b538      	push	{r3, r4, r5, lr}
 8003ece:	4d06      	ldr	r5, [pc, #24]	; (8003ee8 <_sbrk_r+0x1c>)
 8003ed0:	2300      	movs	r3, #0
 8003ed2:	4604      	mov	r4, r0
 8003ed4:	4608      	mov	r0, r1
 8003ed6:	602b      	str	r3, [r5, #0]
 8003ed8:	f7fd fdc4 	bl	8001a64 <_sbrk>
 8003edc:	1c43      	adds	r3, r0, #1
 8003ede:	d102      	bne.n	8003ee6 <_sbrk_r+0x1a>
 8003ee0:	682b      	ldr	r3, [r5, #0]
 8003ee2:	b103      	cbz	r3, 8003ee6 <_sbrk_r+0x1a>
 8003ee4:	6023      	str	r3, [r4, #0]
 8003ee6:	bd38      	pop	{r3, r4, r5, pc}
 8003ee8:	200001d4 	.word	0x200001d4

08003eec <__malloc_lock>:
 8003eec:	4801      	ldr	r0, [pc, #4]	; (8003ef4 <__malloc_lock+0x8>)
 8003eee:	f000 b809 	b.w	8003f04 <__retarget_lock_acquire_recursive>
 8003ef2:	bf00      	nop
 8003ef4:	200001d8 	.word	0x200001d8

08003ef8 <__malloc_unlock>:
 8003ef8:	4801      	ldr	r0, [pc, #4]	; (8003f00 <__malloc_unlock+0x8>)
 8003efa:	f000 b804 	b.w	8003f06 <__retarget_lock_release_recursive>
 8003efe:	bf00      	nop
 8003f00:	200001d8 	.word	0x200001d8

08003f04 <__retarget_lock_acquire_recursive>:
 8003f04:	4770      	bx	lr

08003f06 <__retarget_lock_release_recursive>:
 8003f06:	4770      	bx	lr

08003f08 <_init>:
 8003f08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f0a:	bf00      	nop
 8003f0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f0e:	bc08      	pop	{r3}
 8003f10:	469e      	mov	lr, r3
 8003f12:	4770      	bx	lr

08003f14 <_fini>:
 8003f14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f16:	bf00      	nop
 8003f18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f1a:	bc08      	pop	{r3}
 8003f1c:	469e      	mov	lr, r3
 8003f1e:	4770      	bx	lr
